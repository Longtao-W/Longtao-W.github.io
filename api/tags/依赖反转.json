{"name":"依赖反转","postlist":[{"title":"从Typhoon台风到控制反转-依赖注入","slug":"language/common/dependencyinjection","date":"2021-07-25T13:20:21.000Z","updated":"2024-06-30T10:35:56.304Z","comments":true,"path":"api/articles/language/common/dependencyinjection.json","excerpt":null,"keywords":"云计算","cover":"https://cdn.jsdelivr.net/gh/Longtao-W/pics@main/20211025/1635133883rappel-772262__340.jpg","content":"<p>最近这两天台风“烟花“ 肆虐长三角，偶然间看到ios开发中的Typhoon，那今天就聊聊依赖注入吧。</p>\n<h2 id=\"什么是Typhoon台风\"><a href=\"#什么是Typhoon台风\" class=\"headerlink\" title=\"什么是Typhoon台风\"></a>什么是Typhoon台风</h2><p>Typhoon 是Objective-C和Swift语言的轻量级依赖注入工具，功能较全，容易上手。</p>\n<h2 id=\"什么是依赖注入-Dependency-Injection-DI\"><a href=\"#什么是依赖注入-Dependency-Injection-DI\" class=\"headerlink\" title=\"什么是依赖注入(Dependency Injection,DI)\"></a>什么是依赖注入(Dependency Injection,DI)</h2><p>依赖注入是减少代码耦合度的一种常见方式。</p>\n<p>在解释依赖注入之前我们要解释一下控制反转，因为依赖注入是实现控制反转的一种方式(另一种方式是依赖查找)。</p>\n<h3 id=\"什么是控制反转-Inversion-of-Control-IoC\"><a href=\"#什么是控制反转-Inversion-of-Control-IoC\" class=\"headerlink\" title=\"什么是控制反转(Inversion of Control,IoC)\"></a>什么是控制反转(Inversion of Control,IoC)</h3><p>控制反转是面向对象编程(OOP)的一种设计原则(SOLID原则的D依赖倒置原则)，用来降低代码耦合度。</p>\n<p>描述：类A需要用到类B中的对象o,必使得要在类A要获取类B的引用，类B实例创建过程如果在类A代码中实现会使得代码耦合度增大，更改类B中的代码，可能也要去更改引用了类B的代码，很不好用；而控制反转则是将创建类B实例的控制权从类A中剥离到IOC容器控制。</p>\n<h4 id=\"依赖注入与控制反转辨析\"><a href=\"#依赖注入与控制反转辨析\" class=\"headerlink\" title=\"依赖注入与控制反转辨析\"></a>依赖注入与控制反转辨析</h4><p>控制反转是思想，依赖注入是技术，依赖注入是控制反转的一种实现方式。</p>\n<p>依赖注入是从类A的角度描述的：类A需要依赖IOC容器创建并注入类A需要的外部资源；</p>\n<p>控制反转是从IOC容器的角度描述的：IOC容器控制类A，由IOC容器反向向类A中注入类A需要的外部资源。</p>\n<h3 id=\"依赖注入与依赖查找-Dependency-Lookup-的区别\"><a href=\"#依赖注入与依赖查找-Dependency-Lookup-的区别\" class=\"headerlink\" title=\"依赖注入与依赖查找(Dependency Lookup)的区别\"></a>依赖注入与依赖查找(Dependency Lookup)的区别</h3><p>依赖查找使用容器的API来查找依赖的资源，虽然降低了对象间的依赖，却让对象依赖容器，无法在容器外使用依赖对象。</p>\n<h3 id=\"依赖注入的方式\"><a href=\"#依赖注入的方式\" class=\"headerlink\" title=\"依赖注入的方式\"></a>依赖注入的方式</h3><p>依赖注入有5种实现方式，主要使用Setter注入和构造方法注入。</p>\n<h4 id=\"构造方法注入\"><a href=\"#构造方法注入\" class=\"headerlink\" title=\"构造方法注入\"></a>构造方法注入</h4><p>IOC调用带参数的构造方法来注入依赖的实例，每个参数代表一个依赖。</p>\n<h4 id=\"Set方法注入\"><a href=\"#Set方法注入\" class=\"headerlink\" title=\"Set方法注入\"></a>Set方法注入</h4><p>set是更新变量值的一种方法，在接受注入的类中(上文类A)中定义Set方法，在参数中定义药注入的元素，IOC调用类A的Set方法实现注入；</p>\n<h4 id=\"接口注入\"><a href=\"#接口注入\" class=\"headerlink\" title=\"接口注入\"></a>接口注入</h4><p>在接口中定义要注入的信息，IOC通过接口注入。</p>\n<h4 id=\"基于注解、反射注入\"><a href=\"#基于注解、反射注入\" class=\"headerlink\" title=\"基于注解、反射注入\"></a>基于注解、反射注入</h4><p>指的是java那种注解(而非py3那种注解)，java中@Resource、@Autowired、@Qualifier都可用于注解注入</p>\n<h4 id=\"编译时注入\"><a href=\"#编译时注入\" class=\"headerlink\" title=\"编译时注入\"></a>编译时注入</h4><p>在编译时自动生成代码完成注入，例如golang中的wire</p>\n","raw":null,"categories":[{"name":"编程技术","path":"api/categories/编程技术.json"}],"tags":[{"name":"编程思想","path":"api/tags/编程思想.json"},{"name":"依赖反转","path":"api/tags/依赖反转.json"}]}]}