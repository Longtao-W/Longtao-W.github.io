{"name":"算法","postlist":[{"title":"golang实现rsa加解密","slug":"language/golang/implementrsa","date":"2021-07-23T13:20:21.000Z","updated":"2024-06-30T10:35:56.308Z","comments":true,"path":"api/articles/language/golang/implementrsa.json","excerpt":null,"keywords":"云计算","cover":"https://cdn.jsdelivr.net/gh/Longtao-W/pics@main/20211025/1635138256OIP-C.UcxtcvLrH_YFbKaHBdoF5wHaFG?w=250&h=180&c=7&r=0&o=5&dpr=2.5&pid=1.7","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><ol>\n<li><p>数字签名</p>\n</li>\n<li><p>加解密</p>\n</li>\n<li><p>对称</p>\n</li>\n<li><p>非对称</p>\n</li>\n<li><p>RSA算法</p>\n</li>\n</ol>\n<p>大整数的因数分解，是一件非常困难的事情（对目前的计算机算力和数学方法来说）。我们可以以此为数据加解密</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;errors&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;reflect&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;strconv&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;strings&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//publicKey, privateKey := generateKey(999773, 999959)</span></span><br><span class=\"line\">\tpublicKey, privateKey := generateKey(<span class=\"number\">7001</span>, <span class=\"number\">7079</span>)</span><br><span class=\"line\">\ttxt := <span class=\"string\">&quot;password&quot;</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;publicKey&quot;</span>,publicKey)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;privateKey&quot;</span>, privateKey)</span><br><span class=\"line\">\tencode := rsaEnCode(publicKey, txt)</span><br><span class=\"line\">\tfmt.Println(encode)</span><br><span class=\"line\">\tdecode := rsaDeCode(privateKey, encode)</span><br><span class=\"line\">\tfmt.Println(decode)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//gcd 最大公约数greatest common divisor,辗转相除法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">gcd</span><span class=\"params\">(x, y <span class=\"keyword\">uint64</span>)</span> <span class=\"title\">uint64</span></span> &#123;</span><br><span class=\"line\">\ttmp := x % y</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> tmp &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> gcd(y, tmp)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> y</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//lcm 最小公倍数least common multiple，公式法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">lcm</span><span class=\"params\">(x, y <span class=\"keyword\">uint64</span>)</span> <span class=\"title\">uint64</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x * y / gcd(x, y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//generateKey 生成密钥</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">generateKey</span><span class=\"params\">(a, b <span class=\"keyword\">uint64</span>)</span> <span class=\"params\">([2]<span class=\"keyword\">uint64</span>, [2]<span class=\"keyword\">uint64</span>)</span></span> &#123;</span><br><span class=\"line\">\tpublicKey := [<span class=\"number\">2</span>]<span class=\"keyword\">uint64</span>&#123;&#125;</span><br><span class=\"line\">\tprivateKey := [<span class=\"number\">2</span>]<span class=\"keyword\">uint64</span>&#123;&#125;</span><br><span class=\"line\">\tn := a * b</span><br><span class=\"line\">\tpublicKey[<span class=\"number\">0</span>] = n</span><br><span class=\"line\">\tprivateKey[<span class=\"number\">0</span>] = n</span><br><span class=\"line\"></span><br><span class=\"line\">\tl := lcm(a<span class=\"number\">-1</span>, b<span class=\"number\">-1</span>)</span><br><span class=\"line\">\te, err := getE(l)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\td, err := getD(e, l)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublicKey[<span class=\"number\">1</span>] = e</span><br><span class=\"line\">\tprivateKey[<span class=\"number\">1</span>] = d</span><br><span class=\"line\">\tfmt.Println(e)</span><br><span class=\"line\">\tfmt.Println(d)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> publicKey, privateKey</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取公钥参数e</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getE</span><span class=\"params\">(l <span class=\"keyword\">uint64</span>)</span> <span class=\"params\">(<span class=\"keyword\">uint64</span>, error)</span></span> &#123;</span><br><span class=\"line\">\te := l - <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> e &lt;= <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>, errors.New(<span class=\"string\">&quot;no e founded&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> gcd(e, l) == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> e, <span class=\"literal\">nil</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\te--</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取私钥参数d</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getD</span><span class=\"params\">(e, l <span class=\"keyword\">uint64</span>)</span> <span class=\"params\">(<span class=\"keyword\">uint64</span>, error)</span></span> &#123;</span><br><span class=\"line\">\td := l - <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> d &lt;= <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>, errors.New(<span class=\"string\">&quot;no d founded&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> e*d%l == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> e, <span class=\"literal\">nil</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\td--</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 无符号64位整形求幂</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pow</span><span class=\"params\">(a, b <span class=\"keyword\">uint64</span>)</span> <span class=\"title\">uint64</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> b == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tout := a</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> b == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> out</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tout *= a</span><br><span class=\"line\">\t\tb--</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//rsa加密</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">rsaEnCode</span><span class=\"params\">(publicKey [2]<span class=\"keyword\">uint64</span>, string2 <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\tpp := <span class=\"built_in\">make</span>([]<span class=\"keyword\">string</span>,<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(string2))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _,v :=<span class=\"keyword\">range</span> string2 &#123;</span><br><span class=\"line\">\t\tuint64String := <span class=\"keyword\">uint64</span>(v)</span><br><span class=\"line\">\t\tencodeUint := pow(uint64String, publicKey[<span class=\"number\">1</span>]) % publicKey[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\tencodeString := strconv.FormatUint(encodeUint, <span class=\"number\">10</span>)</span><br><span class=\"line\">\t\tpp = <span class=\"built_in\">append</span>(pp, encodeString)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;rsaEncode&quot;</span>,fmt.Sprintf(strings.Join(pp,<span class=\"string\">&quot;,&quot;</span>)))</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fmt.Sprintf(strings.Join(pp,<span class=\"string\">&quot;,&quot;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//rsa解密</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">rsaDeCode</span><span class=\"params\">(publicKey [2]<span class=\"keyword\">uint64</span>, string2 <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\ttxtSlice := strings.Split(string2,<span class=\"string\">&quot;,&quot;</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;txt&quot;</span>,txtSlice,reflect.TypeOf(txtSlice))</span><br><span class=\"line\">\tpp := <span class=\"built_in\">make</span>([]<span class=\"keyword\">string</span>,<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(txtSlice))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _,v :=<span class=\"keyword\">range</span> txtSlice &#123;</span><br><span class=\"line\">\t\tuint64String,_ := strconv.ParseUint(v,<span class=\"number\">10</span>,<span class=\"number\">64</span>)</span><br><span class=\"line\">\t\tencodeUint := pow(uint64String, publicKey[<span class=\"number\">1</span>]) % publicKey[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\tencodeString := <span class=\"keyword\">string</span>(encodeUint)</span><br><span class=\"line\">\t\tfmt.Println(encodeUint,encodeString)</span><br><span class=\"line\">\t\tpp = <span class=\"built_in\">append</span>(pp, encodeString)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;rsaDecode&quot;</span>,pp,fmt.Sprintf(strings.Join(pp,<span class=\"string\">&quot;&quot;</span>)))</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fmt.Sprintf(strings.Join(pp,<span class=\"string\">&quot;&quot;</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"PKCS1与PKCS8\"><a href=\"#PKCS1与PKCS8\" class=\"headerlink\" title=\"PKCS1与PKCS8\"></a>PKCS1与PKCS8</h2><p><strong>PKCS1：</strong>全名《Public-Key Cryptography Standards (PKCS) #1: RSA Cryptography Specifications》最新版本2.2  <em>(rfc8017, 有兴趣的同学可以读一下)</em> ，从名称上可以看出它是针对RSA算法的一个规范。里面包含了RSA加密、解密、签名验签等所有的内容，当然也包含了私钥的格式。PKCS1的1.1版本是1991年发布的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-----BEGIN RSA PRIVATE KEY-----</span><br><span class=\"line\">...</span><br><span class=\"line\">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure>\n\n\n\n<p> <strong>PKCS8：</strong>全名《Public-Key Cryptography Standards (PKCS) #8: Private-Key Information Syntax Specification》最新版本1.2，从名称上可以看出它是一个专门用来存储私钥的文件格式规范。PKCS1的1.2版本是2008年发布的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-----BEGIN PRIVATE KEY-----</span><br><span class=\"line\">...</span><br><span class=\"line\">-----END PRIVATE KEY-----</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"将私钥PEM格式的文件转换为DER格式\"><a href=\"#将私钥PEM格式的文件转换为DER格式\" class=\"headerlink\" title=\"将私钥PEM格式的文件转换为DER格式\"></a>将私钥PEM格式的文件转换为DER格式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash# openssl rsa -in pkcs1.pem -out pkcs1.der -outform DER</span><br><span class=\"line\">bash# openssl pkcs8 -topk8 -inform PEM -in pkcs1.pem -outform DER -nocrypt -out pkcs8.der</span><br><span class=\"line\">bash# ls </span><br><span class=\"line\">pkcs1.der pkcs1.pem pkcs8.der pkcs8.pem</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对比两个der格式内容\"><a href=\"#对比两个der格式内容\" class=\"headerlink\" title=\"对比两个der格式内容\"></a>对比两个der格式内容</h3><p>使用hexdump查看内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat pkcs1.der | hexdump</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"PEM-和DER区别\"><a href=\"#PEM-和DER区别\" class=\"headerlink\" title=\"PEM 和DER区别\"></a>PEM 和DER区别</h4><p>PEM与DER有什么区别呢？其实PEM就是对DER的内容做了base64的编码并做了一下格式化的输出而已。</p>\n","raw":null,"categories":[{"name":"编程技术","path":"api/categories/编程技术.json"}],"tags":[{"name":"密码学","path":"api/tags/密码学.json"},{"name":"golang","path":"api/tags/golang.json"},{"name":"算法","path":"api/tags/算法.json"}]}]}