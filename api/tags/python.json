{"name":"python","postlist":[{"title":"py2与py3在closerange的区别","slug":"language/python/differencebwtweenpy2andpy3incloserangefuntion","date":"2020-12-23T15:20:21.000Z","updated":"2024-06-30T10:35:56.308Z","comments":true,"path":"api/articles/language/python/differencebwtweenpy2andpy3incloserangefuntion.json","excerpt":null,"keywords":"云计算","cover":"https://cdn.jsdelivr.net/gh/Longtao-W/pics@main/20211025/1635138448v2-0647c2d439278d31bcb155d70cfeab31_1200x500.jpg","content":"<h2 id=\"file-descriptors（-proc下）\"><a href=\"#file-descriptors（-proc下）\" class=\"headerlink\" title=\"file descriptors（/proc下）\"></a>file descriptors（/proc下）</h2><p>文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向<a href=\"https://zh.wikipedia.org/wiki/%E5%86%85%E6%A0%B8\">内核</a>为每一个<a href=\"https://zh.wikipedia.org/wiki/%E8%BF%9B%E7%A8%8B\">进程</a>所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。在<a href=\"https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1\">程序设计</a>中，一些涉及底层的程序编写往往会围绕着文件描述符展开。但是文件描述符这一概念往往只适用于<a href=\"https://zh.wikipedia.org/wiki/UNIX\">UNIX</a>、<a href=\"https://zh.wikipedia.org/wiki/Linux\">Linux</a>这样的操作系统。</p>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><p>文件描述符的优点主要有两个：</p>\n<ul>\n<li>基于文件描述符的<a href=\"https://zh.wikipedia.org/wiki/I/O\">I/O操作</a>兼容<a href=\"https://zh.wikipedia.org/wiki/POSIX\">POSIX</a>标准。</li>\n<li>在UNIX、Linux的系统调用中，大量的系统调用都是依赖于文件描述符</li>\n</ul>\n<p>此外，在Linux系列的操作系统上，由于Linux的设计思想便是把一切设备都视作文件。因此，文件描述符为在该系列平台上进行设备相关的编程实际上提供了一个统一的方法。</p>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><p>文件描述符的概念存在两大缺点：</p>\n<ul>\n<li>在非UNIX/Linux <a href=\"https://zh.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F\">操作系统</a>上（如<a href=\"https://zh.wikipedia.org/wiki/Windows\">Windows</a>），无法基于这一概念进行编程——事实上，Windows下的文件描述符和<a href=\"https://zh.wikipedia.org/wiki/%E4%BF%A1%E5%8F%B7%E9%87%8F\">信号量</a>、<a href=\"https://zh.wikipedia.org/wiki/%E4%BA%92%E6%96%A5%E9%94%81\">互斥锁</a>等<a href=\"https://zh.wikipedia.org/wiki/%E5%86%85%E6%A0%B8%E5%AF%B9%E8%B1%A1\">内核对象</a>一样都记作HANDLE。</li>\n<li>由于文件描述符在形式上不过是个整数，当代码量增大时，会使编程者难以分清哪些整数意味着数据，哪些意味着文件描述符。因此，完成的代码可读性也就会变得很差，这一点一般通过消除<a href=\"https://zh.wikipedia.org/wiki/%E9%AD%94%E8%A1%93%E6%95%B8%E5%AD%97\">魔术数字</a>来解决。</li>\n</ul>\n<h2 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><ol>\n<li>在proc目录下，以数字命名的目录表示当前一个运行的进程，目录名即为进程的pid，进程里的fd是文件描述符。</li>\n<li>魔术数字（magic number）是程式设计中所谓的直接写在程式码里的具体数值（如“10”“123”等以数字直接写出的值）。虽然程式作者写的时候自己能了解数值的意义，但对其他程式员而言，甚至制作者本人经过一段时间后，会难以了解这个数值的用途，只能苦笑讽刺“这个数值的意义虽然不懂，不过至少程式会动，真是个魔术般的数字”而得名。</li>\n</ol>\n","raw":null,"categories":[{"name":"编程技术","path":"api/categories/编程技术.json"}],"tags":[{"name":"编程原理","path":"api/tags/编程原理.json"},{"name":"python","path":"api/tags/python.json"}]},{"title":"内置库os","slug":"language/python/import","date":"2020-06-20T15:20:31.000Z","updated":"2024-06-30T10:35:56.308Z","comments":true,"path":"api/articles/language/python/import.json","excerpt":null,"keywords":"云计算","cover":"https://cdn.jsdelivr.net/gh/Longtao-W/pics@main/20211025/1635138518python3-print-function.png","content":"<p>一个 <a href=\"https://docs.python.org/zh-cn/3/glossary.html#term-module\">module</a> 内的 Python 代码通过 <a href=\"https://docs.python.org/zh-cn/3/glossary.html#term-importing\">importing</a> 操作就能够访问另一个模块内的代码。 <a href=\"https://docs.python.org/zh-cn/3/reference/simple_stmts.html#import\"><code>import</code></a> 语句是发起调用导入机制的最常用方式，但不是唯一的方式。 <a href=\"https://docs.python.org/zh-cn/3/library/importlib.html#importlib.import_module\"><code>importlib.import_module()</code></a> 以及内置的 <a href=\"https://docs.python.org/zh-cn/3/library/functions.html#import__\"><code>__import__()</code></a> 等函数也可以被用来发起调用导入机制。</p>\n<p><a href=\"https://docs.python.org/zh-cn/3/reference/simple_stmts.html#import\"><code>import</code></a> 语句结合了两个操作；它先搜索指定名称的模块，然后将搜索结果绑定到当前作用域中的名称。 <code>import</code> 语句的搜索操作被定义为对 <a href=\"https://docs.python.org/zh-cn/3/library/functions.html#import__\"><code>__import__()</code></a> 函数的调用并带有适当的参数。 <a href=\"https://docs.python.org/zh-cn/3/library/functions.html#import__\"><code>__import__()</code></a> 的返回值会被用于执行 <code>import</code> 语句的名称绑定操作。 请参阅 <code>import</code> 语句了解名称绑定操作的更多细节。</p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><ol>\n<li>py2和py3在import时即使没有使用，也会初始化import的module文件</li>\n<li>在import文件初始化时，会对类属性进行初始化！</li>\n</ol>\n","raw":null,"categories":[{"name":"编程技术","path":"api/categories/编程技术.json"}],"tags":[{"name":"编程原理","path":"api/tags/编程原理.json"},{"name":"python","path":"api/tags/python.json"}]},{"title":"内置库os","slug":"language/python/os","date":"2020-06-20T15:20:21.000Z","updated":"2024-06-30T10:35:56.308Z","comments":true,"path":"api/articles/language/python/os.json","excerpt":null,"keywords":"云计算","cover":"https://cdn.jsdelivr.net/gh/Longtao-W/pics@main/20211025/1635138518python3-print-function.png","content":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listdir(path: AnyStr) -&gt; List[AnyStr] #列出目录下所有文件和文件夹</span><br></pre></td></tr></table></figure>\n\n<p>os.sep与os.path.sep</p>\n<p>根据系统返回分隔符，os.path对于文件路径更健壮</p>\n","raw":null,"categories":[{"name":"编程技术","path":"api/categories/编程技术.json"}],"tags":[{"name":"编程原理","path":"api/tags/编程原理.json"},{"name":"python","path":"api/tags/python.json"}]},{"title":"内置库re","slug":"language/python/re","date":"2020-08-20T15:20:21.000Z","updated":"2024-06-30T10:35:56.308Z","comments":true,"path":"api/articles/language/python/re.json","excerpt":null,"keywords":"云计算","cover":"https://cdn.jsdelivr.net/gh/Longtao-W/pics@main/20211025/1635138518python3-print-function.png","content":"<p>re是python中的正则表达式内置库</p>\n<table>\n<thead>\n<tr>\n<th>修饰符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>re.I</td>\n<td>IGNORECASE，忽略大小写</td>\n</tr>\n<tr>\n<td>re.L</td>\n<td>LOCALE，只对8位字节有效，不建议使用，由当前语言区域决定 <code>\\w</code>, <code>\\W</code>, <code>\\b</code>, <code>\\B</code> 和大小写敏感匹配</td>\n</tr>\n<tr>\n<td>re.U</td>\n<td>UNICODE，根据Unicode字符集解析字符。由当前语言区域决定 <code>\\w</code>, <code>\\W</code>, <code>\\b</code>, <code>\\B</code> 和大小写敏感匹配</td>\n</tr>\n<tr>\n<td>re.M</td>\n<td>MULTILINE，多行匹配，影响 ^ 和 $</td>\n</tr>\n<tr>\n<td>re.S</td>\n<td>DOTALL，.可以匹配除换行符外所有内容</td>\n</tr>\n<tr>\n<td>re.X</td>\n<td>VERBOSE，忽略空格和注释</td>\n</tr>\n</tbody></table>\n","raw":null,"categories":[{"name":"编程技术","path":"api/categories/编程技术.json"}],"tags":[{"name":"编程原理","path":"api/tags/编程原理.json"},{"name":"python","path":"api/tags/python.json"}]}]}