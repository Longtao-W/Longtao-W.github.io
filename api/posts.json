{"total":78,"pageSize":10,"pageCount":8,"data":[{"title":"longtaoLM的使用","slug":"tools/longtaollm","date":"2023-02-11T10:20:21.000Z","updated":"2024-06-30T10:35:56.312Z","comments":true,"path":"api/articles/tools/longtaollm.json","excerpt":null,"keywords":"云计算","cover":"https://st2.depositphotos.com/1002075/9896/v/600/depositphotos_98965042-stock-illustration-abstract-tunnel-grid-futuristic-technology.jpg","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>longtaoLM是一个精简的中文语言模型</p>\n<h2 id=\"体验\"><a href=\"#体验\" class=\"headerlink\" title=\"体验\"></a>体验</h2><p>在下面的input中输入文字，等待一段时间将会在右侧给出生成的结果；</p>\n<p>注意，如果提问，必须带上问号<code>?</code></p>\n<iframe\n    src=\"https://eustance-eustance-longtao-v1.hf.space\"\n    frameborder=\"0\"\n    width=\"850\"\n    height=\"450\"\n></iframe>","raw":null,"categories":[{"name":"编程技术","path":"api/categories/编程技术.json"}],"tags":[{"name":"应用","path":"api/tags/应用.json"}]},{"title":"CodeGeeXr多语言代码生成模型","slug":"tools/codegeex","date":"2022-09-28T15:20:21.000Z","updated":"2024-06-30T10:35:56.308Z","comments":true,"path":"api/articles/tools/codegeex.json","excerpt":null,"keywords":"云计算","cover":"https://cdn.jsdelivr.net/gh/Longtao-W/pics@main/22/789225215918222218321111919177951016669119_gopic_.png","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>去年copilot微软发布的基于AI的辅助工具因为利用Github开源代码，造成了不小的冲击，不过copilot的功能还是让人印象深刻</p>\n<p><strong>代码补全</strong>：很多ide都支持，单copilot 增强了 IDE 的补全功能。</p>\n<p><strong>注释即代码</strong>：通过编写注释然后一路根据 copilot 的提示编写出完整的程序</p>\n<p>copilot虽好，但是随着收费，热度也在下降，而最近清华大学和华为推出的开源工具CodeGeeX，不仅仅兼容copilot功能，还支持了代码翻译等功能，根据宣传，主要有一下几个特点：</p>\n<p><strong>高精度代码生成</strong>：支持生成Python、C++、Java、JavaScript和Go等多种主流编程语言的代码，在HumanEval-X代码生成任务上取得47%~60%求解率，较其他开源基线模型有更佳的平均性能。</p>\n<p><strong>跨语言代码翻译</strong>：支持代码片段在不同编程语言间进行自动翻译转换，翻译结果正确率高，在HumanEval-X代码翻译任务上超越了其它基线模型。</p>\n<p><strong>自动编程插件</strong>：CodeGeeX插件现已上架VSCode插件市场（完全免费），用户可以通过其强大的少样本生成能力，自定义代码生成风格和能力，更好辅助代码编写</p>\n<h2 id=\"相关地址\"><a href=\"#相关地址\" class=\"headerlink\" title=\"相关地址\"></a>相关地址</h2><h2 id=\"demo试用地址\"><a href=\"#demo试用地址\" class=\"headerlink\" title=\"demo试用地址\"></a>demo试用地址</h2><h3 id=\"在线生成与翻译DEMO\"><a href=\"#在线生成与翻译DEMO\" class=\"headerlink\" title=\"在线生成与翻译DEMO\"></a>在线生成与翻译DEMO</h3><p><img src= \"/img/loading.gif\" data-lazy-src=\"https://cdn.jsdelivr.net/gh/Longtao-W/pics@main/22/100811112691208133214153230147421061462154_gopic_.png\" alt=\"img\"></p>\n<p>DEMO地址：<a href=\"https://models.aminer.cn/codegeex/zh-CN/playground\">代码生成</a>和<a href=\"https://models.aminer.cn/codegeex/zh-CN/codeTranslator\">代码翻译</a></p>\n<h2 id=\"自动编程VS-Code插件\"><a href=\"#自动编程VS-Code插件\" class=\"headerlink\" title=\"自动编程VS Code插件\"></a>自动编程VS Code插件</h2><p>插件下载地址：<a href=\"https://marketplace.visualstudio.com/items?itemName=aminer.codegeex\">https://marketplace.visualstudio.com/items?itemName=aminer.codegeex</a></p>\n","raw":null,"categories":[{"name":"编程技术","path":"api/categories/编程技术.json"}],"tags":[{"name":"编程工具","path":"api/tags/编程工具.json"}]},{"title":"grub介绍及使用","slug":"systemstructure/linux/grub","date":"2022-01-01T12:13:31.000Z","updated":"2024-06-30T10:35:56.308Z","comments":true,"path":"api/articles/systemstructure/linux/grub.json","excerpt":null,"keywords":"云计算","cover":"https://cdn.jsdelivr.net/gh/Longtao-W/pics@main/20220221/grub.png","content":"<h2 id=\"多重操作系统引导管理器\"><a href=\"#多重操作系统引导管理器\" class=\"headerlink\" title=\"多重操作系统引导管理器\"></a>多重操作系统引导管理器</h2><h3 id=\"什么是多重引导\"><a href=\"#什么是多重引导\" class=\"headerlink\" title=\"什么是多重引导\"></a>什么是多重引导</h3><p>多重引导指一台计算机上安装多个操作系统,同时可以选择启动哪一个,例如常见的双系统也被叫做双引导</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>grub是GNU项目的启动引导程序，可以用于选择操作系统分区中的不同内核也可以向内核传递启动参数</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ol>\n<li><p>修改/etc/default/grub中的参数</p>\n</li>\n<li><p>1.当为legacyBIOS时</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br><span class=\"line\"><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>2.当为UEFIBIOS时</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grub2-mkconfig -o /boot/efi/EFI/操作系统名称/grub.cfg </span><br></pre></td></tr></table></figure></li>\n<li><p>重启机器</p>\n</li>\n</ol>\n","raw":null,"categories":[{"name":"编程技术","path":"api/categories/编程技术.json"}],"tags":[{"name":"编程原理","path":"api/tags/编程原理.json"},{"name":"linux","path":"api/tags/linux.json"}]},{"title":"ubuntu使用指北","slug":"tools/ubuntu","date":"2021-11-21T12:12:11.000Z","updated":"2024-06-30T10:35:56.312Z","comments":true,"path":"api/articles/tools/ubuntu.json","excerpt":null,"keywords":"云计算","cover":"https://cdn.jsdelivr.net/gh/Longtao-W/pics@main/20211124/1637718777Ubuntu-Pink.png","content":"<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><p>[toc]</p>\n<h2 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h2><p><img src= \"/img/loading.gif\" data-lazy-src=\"https://cdn.jsdelivr.net/gh/Longtao-W/pics@main/20211124/1637718777Ubuntu-Pink.png\"></p>\n<h2 id=\"方便使用\"><a href=\"#方便使用\" class=\"headerlink\" title=\"方便使用\"></a>方便使用</h2><h3 id=\"ubuntu的sudo不用每次都输入密码解决办法\"><a href=\"#ubuntu的sudo不用每次都输入密码解决办法\" class=\"headerlink\" title=\"ubuntu的sudo不用每次都输入密码解决办法\"></a>ubuntu的sudo不用每次都输入密码解决办法</h3><p><strong>方法</strong>:修改<code>/etc/sudoers</code>文件中的<code>%sudo   ALL=(ALL:ALL) ALL   修改为  %sudo   ALL=(ALL:ALL) NOPASSWD:ALL</code><br><strong>原因</strong>：<code>/etc/sudoers</code>为<code>sudo</code>配置文件，当用户执行<code>sudo</code>时，系统会主动寻找<code>/etc/sudoers</code>文件，判断该用户是否有执行<code>sudo</code>的权限，确认用户具有可执行sudo的权限后，让用户输入用户自己的密码确认，若密码输入成功，则开始执行sudo后续的命令</p>\n<h3 id=\"py2-py3-设置-pip\"><a href=\"#py2-py3-设置-pip\" class=\"headerlink\" title=\"py2 py3 设置 pip\"></a>py2 py3 设置 pip</h3><p>下载<a href=\"https://bootstrap.pypa.io/pip/2.7/get-pip.py\">https://bootstrap.pypa.io/pip/2.7/get-pip.py</a></p>\n<p>sudo python2 get-pip.py安装 就可使用pip2了</p>\n<h2 id=\"Linux-通用\"><a href=\"#Linux-通用\" class=\"headerlink\" title=\"Linux 通用\"></a>Linux 通用</h2><h3 id=\"linux如何制作U盘系统镜像\"><a href=\"#linux如何制作U盘系统镜像\" class=\"headerlink\" title=\"linux如何制作U盘系统镜像\"></a>linux如何制作U盘系统镜像</h3><p>方法挺多的，这里用<code>dd</code>命令实现</p>\n<h4 id=\"获取U盘路径\"><a href=\"#获取U盘路径\" class=\"headerlink\" title=\"获取U盘路径\"></a>获取U盘路径</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo fdisk -l <span class=\"comment\">#diskmode 是 USB的那个就是</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"卸载U盘\"><a href=\"#卸载U盘\" class=\"headerlink\" title=\"卸载U盘\"></a>卸载U盘</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo umount /dev/sda* <span class=\"comment\">#我这里的U盘路径是/dev/sda</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"格式化U盘\"><a href=\"#格式化U盘\" class=\"headerlink\" title=\"格式化U盘\"></a>格式化U盘</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkfs.vfat /dev/sda -I <span class=\"comment\"># mkfs.vfat 与mkfs.fat以及mkdosfs效果一样的都是创建vfat文件系统</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"制作系统盘\"><a href=\"#制作系统盘\" class=\"headerlink\" title=\"制作系统盘\"></a>制作系统盘</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dd <span class=\"keyword\">if</span>=~/yourImage.iso of=/dev/sda <span class=\"comment\"># ~/yourImage.iso是你的iso文件</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><ol>\n<li>dd命令直接将Linux的iso写入U盘就能开机引导的原因是，这些Linux的iso自带了引导文件，所以用dd将Windows的iso写入U盘将不能开机引导，Windows的U盘启动盘制作方法，请参考本文第三小节</li>\n</ol>\n<h3 id=\"配置免密\"><a href=\"#配置免密\" class=\"headerlink\" title=\"配置免密\"></a>配置免密</h3><p>如果没有设置root密码，先设置一下root账户密码：<br>sudo passwd root<br>为了避免每次sudo都要输入密码，这里配置一下visudo：<br>sudo visudo<br>在文件最后加上一句（改为自己的用户名）：<br>longtao ALL=(ALL) NOPASSWD: ALL</p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><h2 id=\"IBUS输入法崩溃可能会导致gnome卡住，等待超时就好了\"><a href=\"#IBUS输入法崩溃可能会导致gnome卡住，等待超时就好了\" class=\"headerlink\" title=\"IBUS输入法崩溃可能会导致gnome卡住，等待超时就好了\"></a>IBUS输入法崩溃可能会导致gnome卡住，等待超时就好了</h2><p><img src= \"/img/loading.gif\" data-lazy-src=\"https://cdn.jsdelivr.net/gh/Longtao-W/pics@main/22/17622374100240188772124472144517832259_image-20220721114611372.png\" alt=\"image-20220721114611372\"></p>\n<h2 id=\"IBUS输入法与jetbrain全家桶有冲突，谨慎使用\"><a href=\"#IBUS输入法与jetbrain全家桶有冲突，谨慎使用\" class=\"headerlink\" title=\"IBUS输入法与jetbrain全家桶有冲突，谨慎使用\"></a>IBUS输入法与jetbrain全家桶有冲突，谨慎使用</h2>","raw":null,"categories":[{"name":"编程技术","path":"api/categories/编程技术.json"}],"tags":[{"name":"应用","path":"api/tags/应用.json"}]},{"title":"collectd后台监控程序","slug":"tools/collectd","date":"2021-11-21T10:20:21.000Z","updated":"2024-06-30T10:35:56.308Z","comments":true,"path":"api/articles/tools/collectd.json","excerpt":null,"keywords":"云计算","cover":"https://cdn.jsdelivr.net/gh/Longtao-W/pics@main/20211122/1637548845collectd_logo.png","content":"<p>[toc]</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>collectd 是一个后台监控程序，用来采集其所运行系统上的系统信息，并提供各种存储方式来存储为不同值的格式，例如 RRD 文件形式、文本格式、MongoDB 等等</p>\n<p><strong>连接</strong>：<a href=\"https://collectd.org/index.shtml\">官网文档</a>、<a href=\"https://collectd.org/download.shtml\">下载地址</a>、<a href=\"https://github.com/collectd/collectd\">源码地址</a></p>\n<h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ol>\n<li>C语言编写，性能好，跨平台能力强</li>\n<li>插件丰富，方便扩充</li>\n</ol>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ol>\n<li>监控简单</li>\n<li>不能直接生成图形</li>\n</ol>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>修改<code>sudo vim /opt/collectd/etc/collectd.conf</code>选择自己需要的插件</p>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><p><code>systemctl start collectd</code> 启动服务</p>\n<h3 id=\"查看数据\"><a href=\"#查看数据\" class=\"headerlink\" title=\"查看数据\"></a>查看数据</h3><p>若开启了<code>rrdtool</code>插件就可在<code>/var/lib/collectd/rrd/</code>目录下看到相应的统计数据</p>\n<p>日志存储在<code>/var/log/syslog</code></p>\n<h2 id=\"主要插件\"><a href=\"#主要插件\" class=\"headerlink\" title=\"主要插件\"></a>主要插件</h2><h3 id=\"virt\"><a href=\"#virt\" class=\"headerlink\" title=\"virt\"></a>virt</h3><h4 id=\"vcpu\"><a href=\"#vcpu\" class=\"headerlink\" title=\"vcpu\"></a>vcpu</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">get_vcpu_stats</span><span class=\"params\">(virDomainPtr domain, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> nr_virt_cpu)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> max_cpus = VIR_NODEINFO_MAXCPUS(nodeinfo);</span><br><span class=\"line\"></span><br><span class=\"line\">  virVcpuInfoPtr vinfo = <span class=\"built_in\">calloc</span>(nr_virt_cpu, <span class=\"keyword\">sizeof</span>(*vinfo));</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (vinfo == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    ERROR(PLUGIN_NAME <span class=\"string\">&quot; plugin: calloc failed.&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> cpu_map_len = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *cpumaps = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (extra_stats &amp; ex_stats_vcpupin) &#123;</span><br><span class=\"line\">    cpu_map_len = VIR_CPU_MAPLEN(max_cpus);</span><br><span class=\"line\">    cpumaps = <span class=\"built_in\">calloc</span>(nr_virt_cpu, cpu_map_len);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cpumaps == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">      ERROR(PLUGIN_NAME <span class=\"string\">&quot; plugin: calloc failed.&quot;</span>);</span><br><span class=\"line\">      sfree(vinfo);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> status =</span><br><span class=\"line\">      virDomainGetVcpus(domain, vinfo, nr_virt_cpu, cpumaps, cpu_map_len);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (status &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    ERROR(PLUGIN_NAME <span class=\"string\">&quot; plugin: virDomainGetVcpus failed with status %i.&quot;</span>,</span><br><span class=\"line\">          status);</span><br><span class=\"line\"></span><br><span class=\"line\">    virErrorPtr err = virGetLastError();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err-&gt;code == VIR_ERR_NO_SUPPORT) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (extra_stats &amp; ex_stats_vcpu)</span><br><span class=\"line\">        ERROR(PLUGIN_NAME</span><br><span class=\"line\">              <span class=\"string\">&quot; plugin: Disabled unsupported ExtraStats selector: vcpu&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (extra_stats &amp; ex_stats_vcpupin)</span><br><span class=\"line\">        ERROR(PLUGIN_NAME</span><br><span class=\"line\">              <span class=\"string\">&quot; plugin: Disabled unsupported ExtraStats selector: vcpupin&quot;</span>);</span><br><span class=\"line\">      extra_stats &amp;= ~(ex_stats_vcpu | ex_stats_vcpupin);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    sfree(cpumaps);</span><br><span class=\"line\">    sfree(vinfo);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nr_virt_cpu; ++i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (extra_stats &amp; ex_stats_vcpu)</span><br><span class=\"line\">      vcpu_submit(vinfo[i].cpuTime, domain, vinfo[i].number, <span class=\"string\">&quot;virt_vcpu&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (extra_stats &amp; ex_stats_vcpupin)</span><br><span class=\"line\">      vcpu_pin_submit(domain, max_cpus, i, cpumaps, cpu_map_len);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  sfree(cpumaps);</span><br><span class=\"line\">  sfree(vinfo);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">vcpu_submit</span><span class=\"params\">(<span class=\"keyword\">derive_t</span> value, virDomainPtr dom, <span class=\"keyword\">int</span> vcpu_nr,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *type)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> type_instance[DATA_MAX_NAME_LEN];</span><br><span class=\"line\"></span><br><span class=\"line\">  ssnprintf(type_instance, <span class=\"keyword\">sizeof</span>(type_instance), <span class=\"string\">&quot;%d&quot;</span>, vcpu_nr);</span><br><span class=\"line\">  submit(dom, type, type_instance, &amp;(<span class=\"keyword\">value_t</span>)&#123;.derive = value&#125;, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">submit</span><span class=\"params\">(virDomainPtr dom, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *type,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                   <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *type_instance, <span class=\"keyword\">value_t</span> *values,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                   <span class=\"keyword\">size_t</span> values_len)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">value_list_t</span> vl = VALUE_LIST_INIT;</span><br><span class=\"line\">  init_value_list(&amp;vl, dom);</span><br><span class=\"line\"></span><br><span class=\"line\">  vl.values = values;</span><br><span class=\"line\">  vl.values_len = values_len;</span><br><span class=\"line\"></span><br><span class=\"line\">  sstrncpy(vl.type, type, <span class=\"keyword\">sizeof</span>(vl.type));</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (type_instance != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    sstrncpy(vl.type_instance, type_instance, <span class=\"keyword\">sizeof</span>(vl.type_instance));</span><br><span class=\"line\"></span><br><span class=\"line\">  plugin_dispatch_values(&amp;vl);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>CPU时间是指中央处理器（CPU）用于执行特定进程或线程的时间量</p>\n<p>虚拟机使用的CPU时间除以宿主机的总CPU时间</p>\n<p>总CPU时间分为用户空间时间、内核空间时间、空闲时间等</p>\n<h3 id=\"cpu\"><a href=\"#cpu\" class=\"headerlink\" title=\"cpu\"></a>cpu</h3><h2 id=\"FAQ\"><a href=\"#FAQ\" class=\"headerlink\" title=\"FAQ\"></a>FAQ</h2><p>idle的时候cpu在做什么？</p>\n<ol>\n<li>节能：一些现代操作系统和处理器支持节能功能，当 CPU 处于空闲状态时，可以降低 CPU 的频率或进入低功耗模式，以节省能源和降低发热。</li>\n<li>调度决策：操作系统可以使用空闲时间来评估当前的任务队列，并决定下一个要执行的任务，以优化系统的性能和响应能力。</li>\n<li>维护任务：操作系统可以利用空闲时间来执行一些后台维护任务，如内存回收、文件系统清理等。</li>\n</ol>\n","raw":null,"categories":[{"name":"编程技术","path":"api/categories/编程技术.json"}],"tags":[{"name":"应用","path":"api/tags/应用.json"}]},{"title":"prometheus的使用","slug":"tools/prometheus","date":"2021-11-20T12:20:21.000Z","updated":"2024-06-30T10:35:56.312Z","comments":true,"path":"api/articles/tools/prometheus.json","excerpt":null,"keywords":"云计算","cover":"https://cdn.jsdelivr.net/gh/Longtao-W/pics@main/20211122/16375443451_yz1TgEsIb9qNtmv2O-SZsg.png","content":"<p>普罗米修斯(Prometheus)是一个SoundCloud公司开源的基于GO的监控系统，作者 Matt T.Proud 在2012年加入SoundCloud开发，2015年正式发布。</p>\n<p>prometheus架构如下</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://cdn.jsdelivr.net/gh/Longtao-W/pics@main/20211122/1637544429v2-0ff3a54dfa1284f61e124405dd25c9aa_1440w.jpg\" alt=\"img\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://cdn.jsdelivr.net/gh/Longtao-W/pics@main/20211122/16375453951.svg\" alt=\"1\"></p>\n<p>其中</p>\n<h3 id=\"Prometheus-Server\"><a href=\"#Prometheus-Server\" class=\"headerlink\" title=\"Prometheus Server\"></a>Prometheus Server</h3><p>用数据的采集和存储，PromQL查询，报警配置</p>\n<ol>\n<li>Retrieval</li>\n<li>TSDB</li>\n<li>HTTP server</li>\n</ol>\n<h4 id=\"Push-gateway\"><a href=\"#Push-gateway\" class=\"headerlink\" title=\"Push gateway\"></a>Push gateway</h4><p>用于批量，短期的监控数据的汇报总节点。</p>\n<h4 id=\"Exporters\"><a href=\"#Exporters\" class=\"headerlink\" title=\"Exporters\"></a>Exporters</h4><p>各种汇报数据的exporter，例如汇报机器数据的node_exporter，汇报MondogDB</p>\n<h4 id=\"Alertmanager\"><a href=\"#Alertmanager\" class=\"headerlink\" title=\"Alertmanager\"></a>Alertmanager</h4><p>用于高级通知管理</p>\n<h3 id=\"采集数据\"><a href=\"#采集数据\" class=\"headerlink\" title=\"采集数据\"></a>采集数据</h3><p>若要采集目标的监控数据(主机或服务)，需要在目标上安装采集组件(Exporter)，Exporter能采集目标监控数据，然后传输给Prometheus，Exporter会暴露一个http接口，Prometheus通过Pull周期性拉去数据，Prometheus 也提供push传输数据，可以将数据push到Push gateway, Prometheus 再通过Pull从Push Gateway拿数据</p>\n<h4 id=\"采集流程\"><a href=\"#采集流程\" class=\"headerlink\" title=\"采集流程\"></a>采集流程</h4><ol>\n<li>Prometheus server</li>\n</ol>\n","raw":null,"categories":[{"name":"tool","path":"api/categories/tool.json"}],"tags":[{"name":"tool","path":"api/tags/tool.json"}]},{"title":"Cobra Tutorial","slug":"language/golang/lib/cobra","date":"2021-10-31T12:20:21.000Z","updated":"2024-06-30T10:35:56.308Z","comments":true,"path":"api/articles/language/golang/lib/cobra.json","excerpt":null,"keywords":"云计算","cover":"https://cdn.jsdelivr.net/gh/Longtao-W/pics@main/20211104/163600258520200309153711.png","content":"<h2 id=\"cobra\"><a href=\"#cobra\" class=\"headerlink\" title=\"cobra\"></a>cobra</h2><p>cobra 是go的cli框架，包含cli库和生成基于cobra cli应用的命令行工具</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>子命令，如<code>app server</code>、<code>app sub</code>等</li>\n<li>完整兼容POSIX的flag，包括长命名和短命名</li>\n<li>子命令的嵌套（子命令）</li>\n<li>全局、本地、级联三种flag</li>\n<li>好用的工具命令，如<code>cobra init appname</code>初始化cli程序,<code>cobra add cmdname</code>为cli程序增加子命令</li>\n<li>智能提示</li>\n<li>生成命令help，以及为每个flag、cmd生成<code>-h</code>，<code>--help</code>帮助</li>\n<li>生成自动补全功能</li>\n<li>生成man帮助文档</li>\n<li>命令别名</li>\n<li>自定义帮助、用法</li>\n<li>为达到saas的12-factor 可选择viper</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><code>go get -u github.com/spf13/cobra/cobra</code>会自动安装最新版本库和命令行工具，国内下不下来可以手动下载放到对应的文件夹中，然后就可以在你的code里应用它<code>import &quot;github.com/spf13/cobra&quot;</code></p>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>cobra主要管理commands、args、flags，commands代表一个命令或动作，一般用动词命名，args代表输入的参数，一般用名词命名，flags是对commands的修饰，一般用形容词命名；好的cli应用应该学习成本低，用户容易理解 cli的含义，git的例子能很好的说明这一点: <code>git clone URL --bare</code> ，clone是commands是动词，URL是args是你的输入，bare是flag是形容词</p>\n<h3 id=\"commands\"><a href=\"#commands\" class=\"headerlink\" title=\"commands\"></a>commands</h3><p>commands是cli应用的核心，每次交互都包含在一个command中，command可以拥有可选的子命令（sub commands）</p>\n<h3 id=\"flags\"><a href=\"#flags\" class=\"headerlink\" title=\"flags\"></a>flags</h3><p>flag 是修饰command的一种方式，cobra支持完全兼容的POSIX flag以及go的 flag包，一个flag可以被定义成仅对当前命令生效或对当前及子孙命令生效（对于写代码时增加flag来说），flag功能由<a href=\"https://github.com/ogier/pflag\">pflag library</a>提供</p>\n<h2 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h2><p>虽然你可以自定义你自己的应用工程结构，但推荐你使用以下cobra-cli应用的典型结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">▾ appName&#x2F;</span><br><span class=\"line\">  ▾ cmd&#x2F;</span><br><span class=\"line\">      add.go</span><br><span class=\"line\">      your.go</span><br><span class=\"line\">      commands.go</span><br><span class=\"line\">      here.go</span><br><span class=\"line\">    main.go</span><br></pre></td></tr></table></figure>\n<p>在cobra应用中，main.go通常只提供初始化cobra的功能，like that</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;&#123;pathToYourApp&#125;/cmd&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  cmd.Execute()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用cobra生成工具\"><a href=\"#使用cobra生成工具\" class=\"headerlink\" title=\"使用cobra生成工具\"></a>使用cobra生成工具</h2><p>cobra提供了帮你生成模板的cli工具，有如下命令:</p>\n<h3 id=\"初始化应用init\"><a href=\"#初始化应用init\" class=\"headerlink\" title=\"初始化应用init\"></a>初始化应用init</h3><p><code>cobra init [name] [flags]</code>,name是你cobra应用的名字，<code>--pkg-name</code>pkg 的名字 flag可以选择<code>-a</code> 作者名，<code>-l</code>添加license,默认Apache2.0，<code>--viper</code>添加viper等功能，具体如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--pkg-name string   fully qualified pkg name</span><br><span class=\"line\">-a, --author string    author name for copyright attribution (default &quot;YOUR NAME&quot;)</span><br><span class=\"line\">    --config string    config file (default is $HOME&#x2F;.cobra.yaml)</span><br><span class=\"line\">-l, --license string   name of license for the project</span><br><span class=\"line\">    --viper            use Viper for configuration (default true)</span><br></pre></td></tr></table></figure>\n\n<p>初始化应用后一般<code>go mod init</code>初始化应用，golang基础，在此不赘述</p>\n<h3 id=\"添加commands\"><a href=\"#添加commands\" class=\"headerlink\" title=\"添加commands\"></a>添加commands</h3><p><code>cobra add [name] -p &#39;parentComand&#39;</code> <code>-p</code>可以为特定命令添加子命令，缺省为根命令</p>\n<h2 id=\"使用Cobra库\"><a href=\"#使用Cobra库\" class=\"headerlink\" title=\"使用Cobra库\"></a>使用Cobra库</h2><p>手动创建需要新建一个rootCmd文件,然后添加若干command</p>\n<h3 id=\"创建rootCmd\"><a href=\"#创建rootCmd\" class=\"headerlink\" title=\"创建rootCmd\"></a>创建rootCmd</h3><p>cobra不需要创建一个特定的实例，可以直接使用<code>&amp;cobra.Commaand</code>，如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> rootCmd = &amp;cobra.Command&#123;</span><br><span class=\"line\">  Use:   <span class=\"string\">&quot;hugo&quot;</span>, <span class=\"comment\">//command,代表命令</span></span><br><span class=\"line\">  Short: <span class=\"string\">&quot;Hugo is a very fast static site generator&quot;</span>, <span class=\"comment\">//对command的简短介绍</span></span><br><span class=\"line\">  Long: <span class=\"string\">`A Fast and Flexible Static Site Generator built with </span></span><br><span class=\"line\"><span class=\"string\">                love by spf13 and friends in Go.</span></span><br><span class=\"line\"><span class=\"string\">                Complete documentation is available at http://hugo.spf13.com`</span>, <span class=\"comment\">//对command的详细介绍</span></span><br><span class=\"line\">  Run: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(cmd *cobra.Command, args []<span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 命令实际要做的事情</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Execute</span><span class=\"params\">()</span></span> &#123; <span class=\"comment\">//启动</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> err := rootCmd.Execute(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Println(err)</span><br><span class=\"line\">    os.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你可以在init中定义flatgs以及处理配置，示例如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">  homedir <span class=\"string\">&quot;github.com/mitchellh/go-homedir&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;github.com/spf13/cobra&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;github.com/spf13/viper&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  cobra.OnInitialize(initConfig) <span class=\"comment\">//初始化配置</span></span><br><span class=\"line\">  rootCmd.PersistentFlags().StringVar(&amp;cfgFile, <span class=\"string\">&quot;config&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;config file (default is $HOME/.cobra.yaml)&quot;</span>)<span class=\"comment\">//配置</span></span><br><span class=\"line\">  rootCmd.PersistentFlags().StringVarP(&amp;projectBase, <span class=\"string\">&quot;projectbase&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;base project directory eg. github.com/spf13/&quot;</span>)</span><br><span class=\"line\">  rootCmd.PersistentFlags().StringP(<span class=\"string\">&quot;author&quot;</span>, <span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;YOUR NAME&quot;</span>, <span class=\"string\">&quot;Author name for copyright attribution&quot;</span>)</span><br><span class=\"line\">  rootCmd.PersistentFlags().StringVarP(&amp;userLicense, <span class=\"string\">&quot;license&quot;</span>, <span class=\"string\">&quot;l&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;Name of license for the project (can provide `licensetext` in config)&quot;</span>)</span><br><span class=\"line\">  rootCmd.PersistentFlags().Bool(<span class=\"string\">&quot;viper&quot;</span>, <span class=\"literal\">true</span>, <span class=\"string\">&quot;Use Viper for configuration&quot;</span>)</span><br><span class=\"line\">  viper.BindPFlag(<span class=\"string\">&quot;author&quot;</span>, rootCmd.PersistentFlags().Lookup(<span class=\"string\">&quot;author&quot;</span>))<span class=\"comment\">//绑定viper的标致到cobra</span></span><br><span class=\"line\">  viper.BindPFlag(<span class=\"string\">&quot;projectbase&quot;</span>, rootCmd.PersistentFlags().Lookup(<span class=\"string\">&quot;projectbase&quot;</span>))</span><br><span class=\"line\">  viper.BindPFlag(<span class=\"string\">&quot;useViper&quot;</span>, rootCmd.PersistentFlags().Lookup(<span class=\"string\">&quot;viper&quot;</span>))</span><br><span class=\"line\">  viper.SetDefault(<span class=\"string\">&quot;author&quot;</span>, <span class=\"string\">&quot;NAME HERE &lt;EMAIL ADDRESS&gt;&quot;</span>)</span><br><span class=\"line\">  viper.SetDefault(<span class=\"string\">&quot;license&quot;</span>, <span class=\"string\">&quot;apache&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">initConfig</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// viper读取配置文件</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> cfgFile != <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 从flag读取文件</span></span><br><span class=\"line\">    viper.SetConfigFile(cfgFile)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取主目录</span></span><br><span class=\"line\">    home, err := homedir.Dir()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      fmt.Println(err)</span><br><span class=\"line\">      os.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 查找文件.cobra</span></span><br><span class=\"line\">    viper.AddConfigPath(home)</span><br><span class=\"line\">    viper.SetConfigName(<span class=\"string\">&quot;.cobra&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err := viper.ReadInConfig(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Can&#x27;t read config:&quot;</span>, err)</span><br><span class=\"line\">    os.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加命令\"><a href=\"#添加命令\" class=\"headerlink\" title=\"添加命令\"></a>添加命令</h3><p>添加的命令可以创建在cmd目录下单独的go文件，比如创建一个version命令：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cmd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">&quot;github.com/spf13/cobra&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  rootCmd.AddCommand(versionCmd)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> versionCmd = &amp;cobra.Command&#123;</span><br><span class=\"line\">  Use:   <span class=\"string\">&quot;version&quot;</span>,</span><br><span class=\"line\">  Short: <span class=\"string\">&quot;Print the version number of Hugo&quot;</span>,</span><br><span class=\"line\">  Long:  <span class=\"string\">`All software has versions. This is Hugo&#x27;s`</span>,</span><br><span class=\"line\">  Run: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(cmd *cobra.Command, args []<span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Hugo Static Site Generator v0.9 -- HEAD&quot;</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用flag\"><a href=\"#使用flag\" class=\"headerlink\" title=\"使用flag\"></a>使用flag</h3><p>我们有两种</p>\n<h2 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h2><h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><ol>\n<li><code>go mod init yourpackage</code> 创建你自己的模块</li>\n<li><code>go get -u github.com/spf13/cobra/cobra</code> 加载依赖</li>\n</ol>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><ol>\n<li><code>cobra init ./ -a longtao -l GPL --viper</code> 初始化包(在当前目录初始化cobra，作者是longtao,许可是gpl，并使用viper配置)</li>\n<li><code>go build  -o ./ .</code> 编译测试一下是否正常使用</li>\n</ol>\n","raw":null,"categories":[{"name":"CS","path":"api/categories/CS.json"}],"tags":[{"name":"tool","path":"api/tags/tool.json"},{"name":"golang","path":"api/tags/golang.json"},{"name":"cli","path":"api/tags/cli.json"}]},{"title":"viper Tutorial","slug":"language/golang/lib/viper","date":"2021-10-31T12:20:21.000Z","updated":"2024-06-30T10:35:56.308Z","comments":true,"path":"api/articles/language/golang/lib/viper.json","excerpt":null,"keywords":"云计算","cover":"https://cdn.jsdelivr.net/gh/Longtao-W/pics@main/20211104/163600258520200309153711.png","content":"<h2 id=\"cobra\"><a href=\"#cobra\" class=\"headerlink\" title=\"cobra\"></a>cobra</h2><p>cobra 是go的cli框架，包含cli库和生成基于cobra cli应用的命令行工具</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>子命令，如<code>app server</code>、<code>app sub</code>等</li>\n<li>完整兼容POSIX的flag，包括长命名和短命名</li>\n<li>子命令的嵌套（子命令）</li>\n<li>全局、本地、级联三种flag</li>\n<li>好用的工具命令，如<code>cobra init appname</code>初始化cli程序,<code>cobra add cmdname</code>为cli程序增加子命令</li>\n<li>智能提示</li>\n<li>生成命令help，以及为每个flag、cmd生成<code>-h</code>，<code>--help</code>帮助</li>\n<li>生成自动补全功能</li>\n<li>生成man帮助文档</li>\n<li>命令别名</li>\n<li>自定义帮助、用法</li>\n<li>为达到saas的12-factor 可选择viper</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><code>go get -u github.com/spf13/cobra/cobra</code>会自动安装最新版本库和命令行工具，国内下不下来可以手动下载放到对应的文件夹中，然后就可以在你的code里应用它<code>import &quot;github.com/spf13/cobra&quot;</code></p>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>cobra主要管理commands、args、flags，commands代表一个命令或动作，一般用动词命名，args代表输入的参数，一般用名词命名，flags是对commands的修饰，一般用形容词命名；好的cli应用应该学习成本低，用户容易理解 cli的含义，git的例子能很好的说明这一点: <code>git clone URL --bare</code> ，clone是commands是动词，URL是args是你的输入，bare是flag是形容词</p>\n<h3 id=\"commands\"><a href=\"#commands\" class=\"headerlink\" title=\"commands\"></a>commands</h3><p>commands是cli应用的核心，每次交互都包含在一个command中，command可以拥有可选的子命令（sub commands）</p>\n<h3 id=\"flags\"><a href=\"#flags\" class=\"headerlink\" title=\"flags\"></a>flags</h3><p>flag 是修饰command的一种方式，cobra支持完全兼容的POSIX flag以及go的 flag包，一个flag可以被定义成仅对当前命令生效或对当前及子孙命令生效（对于写代码时增加flag来说），flag功能由<a href=\"https://github.com/ogier/pflag\">pflag library</a>提供</p>\n<h2 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h2><p>虽然你可以自定义你自己的应用工程结构，但推荐你使用以下cobra-cli应用的典型结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">▾ appName&#x2F;</span><br><span class=\"line\">  ▾ cmd&#x2F;</span><br><span class=\"line\">      add.go</span><br><span class=\"line\">      your.go</span><br><span class=\"line\">      commands.go</span><br><span class=\"line\">      here.go</span><br><span class=\"line\">    main.go</span><br></pre></td></tr></table></figure>\n<p>在cobra应用中，main.go通常只提供初始化cobra的功能，like that</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;&#123;pathToYourApp&#125;/cmd&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  cmd.Execute()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用cobra生成工具\"><a href=\"#使用cobra生成工具\" class=\"headerlink\" title=\"使用cobra生成工具\"></a>使用cobra生成工具</h2><p>cobra提供了帮你生成模板的cli工具，有如下命令:</p>\n<h3 id=\"初始化应用init\"><a href=\"#初始化应用init\" class=\"headerlink\" title=\"初始化应用init\"></a>初始化应用init</h3><p><code>cobra init [name] [flags]</code>,name是你cobra应用的名字，<code>--pkg-name</code>pkg 的名字 flag可以选择<code>-a</code> 作者名，<code>-l</code>添加license,默认Apache2.0，<code>--viper</code>添加viper等功能，具体如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--pkg-name string   fully qualified pkg name</span><br><span class=\"line\">-a, --author string    author name for copyright attribution (default &quot;YOUR NAME&quot;)</span><br><span class=\"line\">    --config string    config file (default is $HOME&#x2F;.cobra.yaml)</span><br><span class=\"line\">-l, --license string   name of license for the project</span><br><span class=\"line\">    --viper            use Viper for configuration (default true)</span><br></pre></td></tr></table></figure>\n\n<p>初始化应用后一般<code>go mod init</code>初始化应用，golang基础，在此不赘述</p>\n<h3 id=\"添加commands\"><a href=\"#添加commands\" class=\"headerlink\" title=\"添加commands\"></a>添加commands</h3><p><code>cobra add [name] -p &#39;parentComand&#39;</code> <code>-p</code>可以为特定命令添加子命令，缺省为根命令</p>\n<h2 id=\"使用Cobra库\"><a href=\"#使用Cobra库\" class=\"headerlink\" title=\"使用Cobra库\"></a>使用Cobra库</h2><p>手动创建需要新建一个rootCmd文件,然后添加若干command</p>\n<h3 id=\"创建rootCmd\"><a href=\"#创建rootCmd\" class=\"headerlink\" title=\"创建rootCmd\"></a>创建rootCmd</h3><p>cobra不需要创建一个特定的实例，可以直接使用<code>&amp;cobra.Commaand</code>，如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> rootCmd = &amp;cobra.Command&#123;</span><br><span class=\"line\">  Use:   <span class=\"string\">&quot;hugo&quot;</span>, <span class=\"comment\">//command,代表命令</span></span><br><span class=\"line\">  Short: <span class=\"string\">&quot;Hugo is a very fast static site generator&quot;</span>, <span class=\"comment\">//对command的简短介绍</span></span><br><span class=\"line\">  Long: <span class=\"string\">`A Fast and Flexible Static Site Generator built with </span></span><br><span class=\"line\"><span class=\"string\">                love by spf13 and friends in Go.</span></span><br><span class=\"line\"><span class=\"string\">                Complete documentation is available at http://hugo.spf13.com`</span>, <span class=\"comment\">//对command的详细介绍</span></span><br><span class=\"line\">  Run: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(cmd *cobra.Command, args []<span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 命令实际要做的事情</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Execute</span><span class=\"params\">()</span></span> &#123; <span class=\"comment\">//启动</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> err := rootCmd.Execute(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Println(err)</span><br><span class=\"line\">    os.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你可以在init中定义flatgs以及处理配置，示例如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">  homedir <span class=\"string\">&quot;github.com/mitchellh/go-homedir&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;github.com/spf13/cobra&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;github.com/spf13/viper&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  cobra.OnInitialize(initConfig) <span class=\"comment\">//初始化配置</span></span><br><span class=\"line\">  rootCmd.PersistentFlags().StringVar(&amp;cfgFile, <span class=\"string\">&quot;config&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;config file (default is $HOME/.cobra.yaml)&quot;</span>)<span class=\"comment\">//配置</span></span><br><span class=\"line\">  rootCmd.PersistentFlags().StringVarP(&amp;projectBase, <span class=\"string\">&quot;projectbase&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;base project directory eg. github.com/spf13/&quot;</span>)</span><br><span class=\"line\">  rootCmd.PersistentFlags().StringP(<span class=\"string\">&quot;author&quot;</span>, <span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;YOUR NAME&quot;</span>, <span class=\"string\">&quot;Author name for copyright attribution&quot;</span>)</span><br><span class=\"line\">  rootCmd.PersistentFlags().StringVarP(&amp;userLicense, <span class=\"string\">&quot;license&quot;</span>, <span class=\"string\">&quot;l&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;Name of license for the project (can provide `licensetext` in config)&quot;</span>)</span><br><span class=\"line\">  rootCmd.PersistentFlags().Bool(<span class=\"string\">&quot;viper&quot;</span>, <span class=\"literal\">true</span>, <span class=\"string\">&quot;Use Viper for configuration&quot;</span>)</span><br><span class=\"line\">  viper.BindPFlag(<span class=\"string\">&quot;author&quot;</span>, rootCmd.PersistentFlags().Lookup(<span class=\"string\">&quot;author&quot;</span>))<span class=\"comment\">//绑定viper的标致到cobra</span></span><br><span class=\"line\">  viper.BindPFlag(<span class=\"string\">&quot;projectbase&quot;</span>, rootCmd.PersistentFlags().Lookup(<span class=\"string\">&quot;projectbase&quot;</span>))</span><br><span class=\"line\">  viper.BindPFlag(<span class=\"string\">&quot;useViper&quot;</span>, rootCmd.PersistentFlags().Lookup(<span class=\"string\">&quot;viper&quot;</span>))</span><br><span class=\"line\">  viper.SetDefault(<span class=\"string\">&quot;author&quot;</span>, <span class=\"string\">&quot;NAME HERE &lt;EMAIL ADDRESS&gt;&quot;</span>)</span><br><span class=\"line\">  viper.SetDefault(<span class=\"string\">&quot;license&quot;</span>, <span class=\"string\">&quot;apache&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">initConfig</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// viper读取配置文件</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> cfgFile != <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 从flag读取文件</span></span><br><span class=\"line\">    viper.SetConfigFile(cfgFile)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取主目录</span></span><br><span class=\"line\">    home, err := homedir.Dir()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      fmt.Println(err)</span><br><span class=\"line\">      os.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 查找文件.cobra</span></span><br><span class=\"line\">    viper.AddConfigPath(home)</span><br><span class=\"line\">    viper.SetConfigName(<span class=\"string\">&quot;.cobra&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err := viper.ReadInConfig(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Can&#x27;t read config:&quot;</span>, err)</span><br><span class=\"line\">    os.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加命令\"><a href=\"#添加命令\" class=\"headerlink\" title=\"添加命令\"></a>添加命令</h3><p>添加的命令可以创建在cmd目录下单独的go文件，比如创建一个version命令：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cmd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">&quot;github.com/spf13/cobra&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  rootCmd.AddCommand(versionCmd)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> versionCmd = &amp;cobra.Command&#123;</span><br><span class=\"line\">  Use:   <span class=\"string\">&quot;version&quot;</span>,</span><br><span class=\"line\">  Short: <span class=\"string\">&quot;Print the version number of Hugo&quot;</span>,</span><br><span class=\"line\">  Long:  <span class=\"string\">`All software has versions. This is Hugo&#x27;s`</span>,</span><br><span class=\"line\">  Run: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(cmd *cobra.Command, args []<span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Hugo Static Site Generator v0.9 -- HEAD&quot;</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用flag\"><a href=\"#使用flag\" class=\"headerlink\" title=\"使用flag\"></a>使用flag</h3><p>我们有两种</p>\n","raw":null,"categories":[{"name":"CS","path":"api/categories/CS.json"}],"tags":[{"name":"tool","path":"api/tags/tool.json"},{"name":"golang","path":"api/tags/golang.json"},{"name":"cli","path":"api/tags/cli.json"}]},{"title":"GarbledCircuit","slug":"greatprinciple/garbledcircuit","date":"2021-10-17T15:20:21.000Z","updated":"2024-06-30T10:35:56.304Z","comments":true,"path":"api/articles/greatprinciple/garbledcircuit.json","excerpt":null,"keywords":"云计算","cover":"https://cdn.jsdelivr.net/gh/Longtao-W/pics@main/20211025/1635133529hacker-1944688_960_720.jpg","content":"<h1 id=\"Garbled-Circuit\"><a href=\"#Garbled-Circuit\" class=\"headerlink\" title=\"Garbled Circuit\"></a>Garbled Circuit</h1><h2 id=\"零碎知识\"><a href=\"#零碎知识\" class=\"headerlink\" title=\"零碎知识\"></a>零碎知识</h2><p><strong>定律</strong>:是由实验得出的基本结论，由定律进行数学推导可以得到一些物理上的结论或者定理</p>\n<p><strong>定理</strong>: 由公理，原理，定律经过数学推导得出的结论</p>\n<p><strong>公理</strong>: 是没有经过证明，但被当作不证自明的一个命题</p>\n<p><strong>信息守恒定律</strong>: 物理学的绝对性定律,量子力学基石(幺正性:波函数归一化,全空间粒子总概率为1),指孤立物理系统中信息守恒(定律,不一定正确,如黑洞佯谬的挑战)</p>\n<p><strong>黑洞无毛</strong>: 黑洞只有质量、角动量以及电荷三个不能变为电磁辐射的守恒量，其他的信息全都丧失</p>\n<p><strong>黑洞佯谬</strong>: 广义相对论中对黑洞的计算得出黑洞无毛,黑洞层面信息不再守恒,这也是广义相对论和量子理论矛盾之处</p>\n<p><strong>同态</strong>：抽象代数中，同态是两个代数结构（例如群、环、或者向量空间）之间的保持结构不变的映射</p>\n<p><strong>同态加密</strong>: 对经过同态加密的数据进行处理得到一个输出，将这一输出进行解密，其结果与用同一方法处理未加密的原始数据得到的输出结果是一样的</p>\n<p><strong>可信计算(Trusted Computing，TC)</strong>: 可信目的是保证系统和应用的完整性等，从而确定系统或软件运行在期望的可信状态。可信是安全的必要不充分条件,可信计算分为外包计算和多方计算,外包计算是甲方拥有数据和计算方法,使用乙方的算力获取结果,安全常用同态加密</p>\n<p><strong>差分隐私(differential privacy)</strong>: 一种数据共享手段,为了应对差分攻击而生,原理就是给查询结果加噪声</p>\n<p><strong>多方安全计算（Secure Multi-Party Computation）</strong>：主要是针对无可信第三方的情况下，如何安全地计算一个约定函数的问题；安全多方计算（  Secure  Multi-Party  Computation，MPC）于1986  年由姚期智院士提出。安全多方计算协议允许多个数据所有者在互不信任的情况下进行协同计算，输出计算结果，并保证任何一方均无法得到除应得的计算结果之外的其他任何信息。换句话说，MPC技术可以获取数据使用价值，却不泄露原始数据内容</p>\n<p><strong>信息论安全</strong>：一个安全多方计算协议，如果对于拥有无限计算能力攻击者而言是安全的，则称作是信息论安全的或无条件安全的</p>\n<p><strong>密码学安全</strong>: 如果对于拥有多项式计算能力的攻击者是安全的，则称为是密码学安全的或条件安全的。在条件安全模型下，当且仅当恶意参与者的人数少于总人数的一半时，安全的方案才存在</p>\n<p><strong>敌手模型</strong>：</p>\n<p>半诚实（Semi-Honest）模型：假设参与计算的各方都是半诚实的，即参与方可以保留交互时得到的信息。对于想要协作完成计算并得到正确结果的参与方来说，这样的模型符合实际情况。恶意（Malicious）模型、诚实模型不符合实际情况</p>\n<p><strong>多项式时间</strong>：在计算复杂度理论中，指的是一个问题的计算时间不大于问题大小的多项式倍数，可以在机器上以多项式时间求解的问题被称为P问题，可以在多项式时间验证答案的问题被称为NP，数学家有时把“如多项式时间长的算法”视为快速计算，相对应的是超多项式时间</p>\n<p>密钥共享：密钥分享的基本思路是将每个数字拆散成多个数，并将这些数分发到多个参与方，如算工资，设置一个最大数值范围，每个人给别人一个数字，可以提前超支出，但是经过n次分发后进行相加</p>\n<p>随机预言机Random OracleL：如果x和H(x)已经在表里记录过，就输出H(x)如果没有关于x的记录，则RO完全随机地在值域中选取一个0,1字符串（或者从其他希望映射到的元素集合中完全随机的选取）当作H(x)，把这个和x一起记录在表里，然后输出这个H(x)。</p>\n<h2 id=\"OT协议\"><a href=\"#OT协议\" class=\"headerlink\" title=\"OT协议\"></a>OT协议</h2><p><strong>1-out-of-2 OT</strong></p>\n<p>消息提供方Alice有两个消息M0和M1，只想提供给Bob其中一个，并且不会泄露另一个</p>\n<p>消息接收方Bob想要获取其中一个消息(假设为M1),但不想让Alice知道自己想获取的是哪一个</p>\n<h4 id=\"流程演示\"><a href=\"#流程演示\" class=\"headerlink\" title=\"流程演示\"></a>流程演示</h4><p>1-2OT假设Alice有两个消息M0、M1,Bob想获取M1</p>\n<p>假设M1、M0长度相同，要求随机数r长度和两者相同</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\"> participant A as Alice(数据提供方，拥有消息M0和M1) </span><br><span class=\"line\"> participant B as Bob(数据请求方，想要获取M1)</span><br><span class=\"line\"> A -&gt;&gt; A: Alice分别产生两个密钥对rsa0,rsa1</span><br><span class=\"line\"> A -&gt;&gt; B : 发送给Bob rsa0-pub,rsa1-pub公钥</span><br><span class=\"line\"> B -&gt;&gt; B : 生成一个随机数r</span><br><span class=\"line\"> B -&gt;&gt; B : Bob想要获取M1,使用rsa1-pub加密r成rsa1-context</span><br><span class=\"line\"> B -&gt;&gt; A : Bob将rsa1-context发送给Alice</span><br><span class=\"line\"> A-&gt;&gt;A : Alice用rsa0-pri,rsa1-pri分别解密rsa1-context得到r&#39;和r</span><br><span class=\"line\"> A-&gt;&gt;A: Alice用r&#39;与M0做xor得到xor(r&#39;,M0)、xor(r&#39;,M0),r与M1得到xor(r,M1)</span><br><span class=\"line\"> A -&gt;&gt;B : Alice把xor(r&#39;,M0)、xor(r,M1)发送给Bob</span><br><span class=\"line\"> B -&gt;&gt;B: xor(xor(r,M1),r)得到消息M1</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<div class=\"mermaid\">sequenceDiagram\n    participant A as Alice(数据提供方，拥有消息M0和M1) \n    participant B as Bob(数据请求方，想要获取M1)\n    A -&gt;&gt; A: Alice分别产生两个密钥对rsa0,rsa1\n    A -&gt;&gt; B : 发送给Bob rsa0-pub,rsa1-pub公钥\n    B -&gt;&gt; B : 生成一个随机数r\n    B -&gt;&gt; B : Bob想要获取M1,使用rsa1-pub加密r成rsa1-context\n    B -&gt;&gt; A : Bob将rsa1-context发送给Alice\n    A-&gt;&gt;A : Alice用rsa0-pri,rsa1-pri分别解密rsa1-context得到r&#39;和r\n    A-&gt;&gt;A: Alice用r&#39;与M0做xor得到xor(r&#39;,M0)、xor(r&#39;,M0),r与M1得到xor(r,M1)\n    A -&gt;&gt;B : Alice把xor(r&#39;,M0)、xor(r,M1)发送给Bob\n    B -&gt;&gt;B: xor(xor(r,M1),r)得到消息M1</div>\n\n<h2 id=\"混淆电路\"><a href=\"#混淆电路\" class=\"headerlink\" title=\"混淆电路\"></a>混淆电路</h2><p>所有可计算的函数问题都可转换为不同的电路，加法电路、乘法电路、移位电路、选择电路等。而电路本质上由门（gate）组成，逻辑门包括与门、非门、或门、与非门等。混淆电路把这些门的真值表进行加密和打乱来掩盖原本的逻辑信息信息。</p>\n<p>基本步骤</p>\n<ol>\n<li>生成：Alice生成混淆电路</li>\n<li>传输：Bob获取Alice的输入和混淆电路，基于OT协议</li>\n<li>计算：Bob计算电路的到混淆结果，发送给Alice，Alice根据混淆结果得到最终结果发送给Bob</li>\n</ol>\n<p>下面我们单看XOR门的混淆电路过程（可逆运算不能达到隐私计算效果）</p>\n<p>XOR的真值表为</p>\n<table>\n<thead>\n<tr>\n<th>Alice</th>\n<th>Bob</th>\n<th>out</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<p>Alice首先使用字符串替换真值表，然后使用输入作为对称加密密钥加密输出</p>\n<table>\n<thead>\n<tr>\n<th>Alice</th>\n<th>Bob</th>\n<th>out</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a1</td>\n<td>b1</td>\n<td>ENCa1b1(r0)</td>\n</tr>\n<tr>\n<td>a1</td>\n<td>b0</td>\n<td>ENCa1b0(r1)</td>\n</tr>\n<tr>\n<td>a0</td>\n<td>b1</td>\n<td>ENCa0b1(r1)</td>\n</tr>\n<tr>\n<td>a0</td>\n<td>b0</td>\n<td>ENCa0b0(r0)</td>\n</tr>\n</tbody></table>\n<p><strong>数据传递</strong></p>\n<ol>\n<li>Alice把自己的输入(假设为a1)和输出(ENCa1b1(r0)、ENCa1b0(r1)、  ENCa0b1(r1)、ENCa0b0(r0))发送给发送给Bob</li>\n<li>Bob通过不经意传输获取自己的输出对应的字符串（假设是b0）</li>\n</ol>\n<p>评估：对于单个逻辑门，显然没有达到隐私计算的目的，混淆电路一般用于不可逆的计算！</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://cdn.jsdelivr.net/gh/Longtao-W/pics@main/20211018/16345319921634531766163453174816345291911634526937v2-b70574979c325cdaa52eef57c68eb610_b.png\" alt=\"img\"></p>\n <iframe  \n height=850 \n width=90% \n src=\"https://longtao.fun/ppt/yaoGC.html\"  \n frameborder=0  \n allowfullscreen>\n </iframe>\n","raw":null,"categories":[{"name":"编程技术","path":"api/categories/编程技术.json"}],"tags":[{"name":"Garbled-Circuit","path":"api/tags/Garbled-Circuit.json"}]},{"title":"linux的boot目录","slug":"systemstructure/linux/boot","date":"2021-09-25T12:13:31.000Z","updated":"2024-06-30T10:35:56.308Z","comments":true,"path":"api/articles/systemstructure/linux/boot.json","excerpt":null,"keywords":"云计算","cover":"https://cdn.jsdelivr.net/gh/Longtao-W/pics@main/20211025/16351392001-642-png_6_0_0_0_0_0_0_1258.74_1781.819-1259-0-755-1259.jpg","content":"<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://cdn.jsdelivr.net/gh/Longtao-W/pics@main/20211025/16351392001-642-png_6_0_0_0_0_0_0_1258.74_1781.819-1259-0-755-1259.jpg\" alt=\"See the source image\"></p>\n<p>1.查看当前运行的linux内核编译参数</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">两个方法，proc要求在内核编译时增减相应的选项才会生成，很多系统没有/proc/config.gz，第二种方法，一般</span></span><br><span class=\"line\">zcat /proc/config.gz</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或</span></span><br><span class=\"line\">cat /boot/config-$(uname -r)</span><br></pre></td></tr></table></figure>\n\n","raw":null,"categories":[{"name":"编程技术","path":"api/categories/编程技术.json"}],"tags":[{"name":"编程原理","path":"api/tags/编程原理.json"},{"name":"linux","path":"api/tags/linux.json"}]}]}