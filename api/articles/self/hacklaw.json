{"title":"极简的极客法则","slug":"self/hacklaw","date":"2021-08-09T15:20:21.000Z","updated":"2024-06-30T10:35:56.308Z","comments":true,"path":"api/articles/self/hacklaw.json","excerpt":null,"covers":null,"content":"<p>[toc]</p>\n<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>原文是<a href=\"https://github.com/dwmkerr/hacker-laws\">hacker-laws</a> ，作者做了翻译、归纳、整理、夹带私货；<br>阅读hacker laws 有助于coder 更好的开发； here we go!</p>\n<h2 id=\"定律\"><a href=\"#定律\" class=\"headerlink\" title=\"定律\"></a>定律</h2><h3 id=\"90-9-1-法则-90–9–1-Principle-or-1-Rule\"><a href=\"#90-9-1-法则-90–9–1-Principle-or-1-Rule\" class=\"headerlink\" title=\"90-9-1 法则 (90–9–1 Principle or 1% Rule)\"></a>90-9-1 法则 (90–9–1 Principle or 1% Rule)</h3><p>在诸如维基这样的互联网社区中，90% 的用户只看内容并不参与互动，9% 的用户会参与讨论，而只有 1% 的用户会创造内容。</p>\n<h3 id=\"阿姆达尔定律-Amdahl’s-Law\"><a href=\"#阿姆达尔定律-Amdahl’s-Law\" class=\"headerlink\" title=\"阿姆达尔定律 (Amdahl’s Law)\"></a>阿姆达尔定律 (Amdahl’s Law)</h3><p>并行计算中，有些部分可以被多核心并行处理，有些部分只能串行处理，增加核心对速度的提升的收益会边际递减</p>\n<h3 id=\"破窗效应-The-Broken-Windows-Theory\"><a href=\"#破窗效应-The-Broken-Windows-Theory\" class=\"headerlink\" title=\"破窗效应 (The Broken Windows Theory)\"></a>破窗效应 (The Broken Windows Theory)</h3><p>在破窗理论中认为，恶化若不修复，会导致进一步更严重的恶化参见：</p>\n<h3 id=\"布鲁克斯法则-Brooks’s-Law\"><a href=\"#布鲁克斯法则-Brooks’s-Law\" class=\"headerlink\" title=\"布鲁克斯法则 (Brooks’s Law)\"></a>布鲁克斯法则 (Brooks’s Law)</h3><p>软件开发后期，添加人力只会使项目开发得更慢。因为有些事情无法分割，切增加沟通成本（和阿姆达尔有点像）<br>《人月神话》大篇幅在讲这个</p>\n<h3 id=\"CAP-定理-CAP-Theorem-or-Brewer’s-Theorem\"><a href=\"#CAP-定理-CAP-Theorem-or-Brewer’s-Theorem\" class=\"headerlink\" title=\"CAP 定理 (CAP Theorem or Brewer’s Theorem)\"></a>CAP 定理 (CAP Theorem or Brewer’s Theorem)</h3><p>CAP 定理由 Eric Brewer 所定义，它指出对于分布式数据存储来说，不可能同时满足以下三点，可以有侧重，例如金融交易系统的强一致性，淘宝的可用性等：</p>\n<ul>\n<li>一致性 (Consistency)：每个终端都会接收到 最新的数据，或者返回错误。</li>\n<li>可用性 (Availability): 每个终端都会接收到一个 非错误的响应，但不能保证该数据是 最新的数据。</li>\n<li>分区容错性 (Partition Tolerance)：当节点之间任意数量的网络请求失败时，系统能按预期继续运行（脑裂后还可以保证使用）。</li>\n</ul>\n<h3 id=\"康威定律-Conway’s-Law\"><a href=\"#康威定律-Conway’s-Law\" class=\"headerlink\" title=\"康威定律 (Conway’s Law)\"></a>康威定律 (Conway’s Law)</h3><p>如果一个组织被分散成许多小而无联系的单元，那么它开发的软件也是小而分散的。组织架构会体现在软件架构上（分形）</p>\n<h3 id=\"坎宁汉姆定律-Cunningham’s-Law\"><a href=\"#坎宁汉姆定律-Cunningham’s-Law\" class=\"headerlink\" title=\"坎宁汉姆定律 (Cunningham’s Law)\"></a>坎宁汉姆定律 (Cunningham’s Law)</h3><p>在网络上想得到正确答案的最好方法不是提问题，而是发布一个错误的答案，引起辩论（不建议这么做，现在网上已经一堆的错误回答）</p>\n<h3 id=\"邓巴数字-Dunbar’s-Number\"><a href=\"#邓巴数字-Dunbar’s-Number\" class=\"headerlink\" title=\"邓巴数字 (Dunbar’s Number)\"></a>邓巴数字 (Dunbar’s Number)</h3><p>邓巴数字是对一个人能够保持稳定社会关系的人数的认知极限——在这种关系中，邓巴数字的估计值一般在 100 至 250 之间。所以有些以扁平化为珍宝的公司在扩张时管理会有问题，对我们个人的启发是，可以交一两个社交牛的朋友，可以交换新事物。</p>\n<h3 id=\"邓宁-克鲁格效应-The-Dunning-Kruger-Effect\"><a href=\"#邓宁-克鲁格效应-The-Dunning-Kruger-Effect\" class=\"headerlink\" title=\"邓宁-克鲁格效应 (The Dunning-Kruger Effect)\"></a>邓宁-克鲁格效应 (The Dunning-Kruger Effect)</h3><p>无能的人往往不会意识到自己的无能。而得出正确答案所需要的技能，正是你认识到何为正确答案所需要的技能。虚幻的优越性产自无知</p>\n<h3 id=\"费茨法则-Fitts’s-Law\"><a href=\"#费茨法则-Fitts’s-Law\" class=\"headerlink\" title=\"费茨法则 (Fitts’s Law)\"></a>费茨法则 (Fitts’s Law)</h3><p>该法则指出，移动到目标区域所需的时间是到目标的距离除以目标宽度的函数。<br>费茨法则决定了在设计 UX 或 UI 时，交互元素应该尽可能大，而用户注意力区域和交互元素之间的距离应该尽可能小。这会对设计产生影响，例如将相近的任务进行归类分组等。</p>\n<h3 id=\"盖尔定律-Gall’s-Law\"><a href=\"#盖尔定律-Gall’s-Law\" class=\"headerlink\" title=\"盖尔定律 (Gall’s Law)\"></a>盖尔定律 (Gall’s Law)</h3><p>完整的复杂系统不是设计成的，而是一步步的修补和更改变成现在的样子。</p>\n<h3 id=\"古德哈特定律-Goodhart’s-Law\"><a href=\"#古德哈特定律-Goodhart’s-Law\" class=\"headerlink\" title=\"古德哈特定律 (Goodhart’s Law)\"></a>古德哈特定律 (Goodhart’s Law)</h3><p>当一个措施本身成为目标时，它就不再是一个好的措施，像为了kpi而kpi，在方法中迷失目的</p>\n<h3 id=\"汉隆的剃刀-Hanlon’s-Razor\"><a href=\"#汉隆的剃刀-Hanlon’s-Razor\" class=\"headerlink\" title=\"汉隆的剃刀 (Hanlon’s Razor)\"></a>汉隆的剃刀 (Hanlon’s Razor)</h3><p>能解释为愚蠢的，就不要解释为恶意的</p>\n<h3 id=\"席克定律-Hick’s-Law-or-Hick-Hyman-Law\"><a href=\"#席克定律-Hick’s-Law-or-Hick-Hyman-Law\" class=\"headerlink\" title=\"席克定律 (Hick’s Law or Hick-Hyman Law)\"></a>席克定律 (Hick’s Law or Hick-Hyman Law)</h3><p>决策时间和可供选择的选项数量呈对数增长关系。</p>\n<h3 id=\"侯世达定律-Hofstadter’s-Law\"><a href=\"#侯世达定律-Hofstadter’s-Law\" class=\"headerlink\" title=\"侯世达定律 (Hofstadter’s Law)\"></a>侯世达定律 (Hofstadter’s Law)</h3><p>结果往往低于目标，即使考虑到了这个点。</p>\n<h3 id=\"哈特伯定律-Hutber’s-Law\"><a href=\"#哈特伯定律-Hutber’s-Law\" class=\"headerlink\" title=\"哈特伯定律 (Hutber’s Law)\"></a>哈特伯定律 (Hutber’s Law)</h3><p>对一个系统的改进会导致其他部分的恶化；或者它会将其他的恶化隐藏起来，并导致系统整体状态的退化。</p>\n<h3 id=\"技术成熟度曲线-The-Hype-Cycle-or-Amara’s-Law\"><a href=\"#技术成熟度曲线-The-Hype-Cycle-or-Amara’s-Law\" class=\"headerlink\" title=\"技术成熟度曲线 (The Hype Cycle or Amara’s Law)\"></a>技术成熟度曲线 (The Hype Cycle or Amara’s Law)</h3><p>人有动物性-短时。我们倾向于过高估计技术在短期内的影响，并低估长期效应。</p>\n<h3 id=\"隐式接口定律-Hyrum’s-Law-or-The-Law-of-Implicit-Interfaces\"><a href=\"#隐式接口定律-Hyrum’s-Law-or-The-Law-of-Implicit-Interfaces\" class=\"headerlink\" title=\"隐式接口定律 (Hyrum’s Law or The Law of Implicit Interfaces)\"></a>隐式接口定律 (Hyrum’s Law or The Law of Implicit Interfaces)</h3><p>当你的 API 有足够多的用户时，API 的所有行为最终都会被其他人所依赖，大家不会一直看文档，很多公司都在取消文档工程师，转而提升用户使用体验。</p>\n<h3 id=\"柯林汉定律-Kernighan’s-Law\"><a href=\"#柯林汉定律-Kernighan’s-Law\" class=\"headerlink\" title=\"柯林汉定律 (Kernighan’s Law)\"></a>柯林汉定律 (Kernighan’s Law)</h3><p>调试在一开始就比编写程序困难一倍。因此，按照定义，如果你的代码写得非常巧妙，那么你就没有足够的能力来调试它。</p>\n<h3 id=\"林纳斯定律-Linus’s-Law\"><a href=\"#林纳斯定律-Linus’s-Law\" class=\"headerlink\" title=\"林纳斯定律 (Linus’s Law)\"></a>林纳斯定律 (Linus’s Law)</h3><p>简单地说，能够看到问题的人越多，有人解决过相关的问题或事情的可能性就越高。</p>\n<h3 id=\"梅特卡夫定律-Metcalfe’s-Law\"><a href=\"#梅特卡夫定律-Metcalfe’s-Law\" class=\"headerlink\" title=\"梅特卡夫定律 (Metcalfe’s Law)\"></a>梅特卡夫定律 (Metcalfe’s Law)</h3><p>在网络理论中，系统的价值约等于系统用户数的平方，人的作用很大。</p>\n<h3 id=\"摩尔定律-Moore’s-Law\"><a href=\"#摩尔定律-Moore’s-Law\" class=\"headerlink\" title=\"摩尔定律 (Moore’s Law)\"></a>摩尔定律 (Moore’s Law)</h3><p>集成电路中的晶体管数量大约每两年翻一番。价格不变，芯片性能两年一番。</p>\n<h3 id=\"墨菲定律-Murphy’s-Law-Sod’s-Law\"><a href=\"#墨菲定律-Murphy’s-Law-Sod’s-Law\" class=\"headerlink\" title=\"墨菲定律 (Murphy’s Law / Sod’s Law)\"></a>墨菲定律 (Murphy’s Law / Sod’s Law)</h3><p>凡是可能出错的事就一定会出错。</p>\n<h3 id=\"奥卡姆剃刀-Occam’s-Razor\"><a href=\"#奥卡姆剃刀-Occam’s-Razor\" class=\"headerlink\" title=\"奥卡姆剃刀 (Occam’s Razor)\"></a>奥卡姆剃刀 (Occam’s Razor)</h3><p>如无必要，勿增实体。</p>\n<h3 id=\"帕金森定理-Parkinson’s-Law\"><a href=\"#帕金森定理-Parkinson’s-Law\" class=\"headerlink\" title=\"帕金森定理 (Parkinson’s Law)\"></a>帕金森定理 (Parkinson’s Law)</h3><p>在工作能够完成的时限内，工作量会一直增加，直到所有可用时间都被填满为止，所以别卷了，工作是做不完的。</p>\n<h3 id=\"过早优化效应-Premature-Optimization-Effect\"><a href=\"#过早优化效应-Premature-Optimization-Effect\" class=\"headerlink\" title=\"过早优化效应 (Premature Optimization Effect)\"></a>过早优化效应 (Premature Optimization Effect)</h3><p>过早优化是万恶之源。</p>\n<h3 id=\"普特定律-Putt’s-Law\"><a href=\"#普特定律-Putt’s-Law\" class=\"headerlink\" title=\"普特定律 (Putt’s Law)\"></a>普特定律 (Putt’s Law)</h3><p>技术由两类人主导，一类是纯粹的管理人员， 一类是纯粹的技术人员。</p>\n<h3 id=\"里德定律-Reed’s-Law\"><a href=\"#里德定律-Reed’s-Law\" class=\"headerlink\" title=\"里德定律 (Reed’s Law)\"></a>里德定律 (Reed’s Law)</h3><p>大型网络，尤其是社交网络的效用会随着网络的大小呈指数级扩增，规模效应</p>\n<h3 id=\"复杂性守恒定律-The-Law-of-Conservation-of-Complexity-or-Tesler’s-Law\"><a href=\"#复杂性守恒定律-The-Law-of-Conservation-of-Complexity-or-Tesler’s-Law\" class=\"headerlink\" title=\"复杂性守恒定律 (The Law of Conservation of Complexity or Tesler’s Law)\"></a>复杂性守恒定律 (The Law of Conservation of Complexity or Tesler’s Law)</h3><p>系统中存在着一定程度的复杂性，并且不能减少。</p>\n<h3 id=\"得墨忒耳定律-The-Law-of-Demeter\"><a href=\"#得墨忒耳定律-The-Law-of-Demeter\" class=\"headerlink\" title=\"得墨忒耳定律 (The Law of Demeter)\"></a>得墨忒耳定律 (The Law of Demeter)</h3><p>得墨忒耳定律又称最少知识原则，是一条与面向对象语言有关的软件设计原则，只和已知的打交道。</p>\n<h3 id=\"抽象泄漏定律-The-Law-of-Leaky-Abstractions\"><a href=\"#抽象泄漏定律-The-Law-of-Leaky-Abstractions\" class=\"headerlink\" title=\"抽象泄漏定律 (The Law of Leaky Abstractions)\"></a>抽象泄漏定律 (The Law of Leaky Abstractions)</h3><p>在某种程度上，所有非平凡的抽象都是有泄漏的。<br>过度依赖抽象，加上对底层过程的理解不足，实际上使得问题在某些情况下更加复杂。</p>\n<h3 id=\"帕金森琐碎定理-The-Law-of-Triviality\"><a href=\"#帕金森琐碎定理-The-Law-of-Triviality\" class=\"headerlink\" title=\"帕金森琐碎定理 (The Law of Triviality)\"></a>帕金森琐碎定理 (The Law of Triviality)</h3><p>群体将给予更多的时间和注意力来处理琐碎的问题，而不是用来处理严肃而实质性的问题。</p>\n<h3 id=\"Unix-哲学-The-Unix-Philosophy\"><a href=\"#Unix-哲学-The-Unix-Philosophy\" class=\"headerlink\" title=\"Unix 哲学 (The Unix Philosophy)\"></a>Unix 哲学 (The Unix Philosophy)</h3><p>软件组件应该很小，并专注于做一件特定的事情。将小而简单以及定义良好的单元组合在一起，而不是使用大而复杂的多用途程序，可以更轻松地构建系统。</p>\n<h3 id=\"Spotify-模型-The-Spotify-Model\"><a href=\"#Spotify-模型-The-Spotify-Model\" class=\"headerlink\" title=\"Spotify 模型 (The Spotify Model)\"></a>Spotify 模型 (The Spotify Model)</h3><p>团队围绕功能而非技术进行组织。</p>\n<h3 id=\"沃德勒定律-Wadler’s-Law\"><a href=\"#沃德勒定律-Wadler’s-Law\" class=\"headerlink\" title=\"沃德勒定律 (Wadler’s Law)\"></a>沃德勒定律 (Wadler’s Law)</h3><p>任何语言设计中，讨论下面列表中某个要素所花费的总时间与其位置成正比。</p>\n<ol>\n<li>语义 (Semantics)</li>\n<li>语法 (Syntax)</li>\n<li>词法 (Lexical syntax)</li>\n<li>注释语法 (Lexical syntax of comments)<br>简而言之，在语义上花费一个小时，就要在注释语法上花费八个小时</li>\n</ol>\n<h3 id=\"惠顿定律-Wheaton’s-Law\"><a href=\"#惠顿定律-Wheaton’s-Law\" class=\"headerlink\" title=\"惠顿定律 (Wheaton’s Law)\"></a>惠顿定律 (Wheaton’s Law)</h3><p>不要像个傻子一样。</p>\n<h2 id=\"原则\"><a href=\"#原则\" class=\"headerlink\" title=\"原则\"></a>原则</h2><p>原则通常是与设计相关的准则。</p>\n<h3 id=\"乔治·伯克斯定律-All-Models-Are-Wrong-or-George-Box’s-Law\"><a href=\"#乔治·伯克斯定律-All-Models-Are-Wrong-or-George-Box’s-Law\" class=\"headerlink\" title=\"乔治·伯克斯定律 (All Models Are Wrong or George Box’s Law)\"></a>乔治·伯克斯定律 (All Models Are Wrong or George Box’s Law)</h3><p>这一原则表明，所有的系统模型都是有缺陷的，但只要它们没有太多缺陷，那便有可能是有用的。这一原则源于统计学，同时也适用于科学和计算模型。</p>\n<h3 id=\"切斯特森围栏-Chesterson’s-Fence\"><a href=\"#切斯特森围栏-Chesterson’s-Fence\" class=\"headerlink\" title=\"切斯特森围栏 (Chesterson’s Fence)\"></a>切斯特森围栏 (Chesterson’s Fence)</h3><p>在了解现有情况背后的原因之前，不应该进行改进。</p>\n<h3 id=\"死海效应-The-Dead-Sea-Effect\"><a href=\"#死海效应-The-Dead-Sea-Effect\" class=\"headerlink\" title=\"死海效应 (The Dead Sea Effect)\"></a>死海效应 (The Dead Sea Effect)</h3><p>死海效应表明，在任何一个组织中，工程师的技能、才华和效能往往与他们在公司的时间呈反比。</p>\n<h3 id=\"呆伯特法则-The-Dilbert-Principle\"><a href=\"#呆伯特法则-The-Dilbert-Principle\" class=\"headerlink\" title=\"呆伯特法则 (The Dilbert Principle)\"></a>呆伯特法则 (The Dilbert Principle)</h3><p>公司会倾向于系统地将工作能力差的员工提升到管理层，以使他们脱离工作流程（在国内目前没有）。</p>\n<h3 id=\"帕累托法则-The-Pareto-Principle-or-The-80-20-Rule\"><a href=\"#帕累托法则-The-Pareto-Principle-or-The-80-20-Rule\" class=\"headerlink\" title=\"帕累托法则 (The Pareto Principle or The 80/20 Rule)\"></a>帕累托法则 (The Pareto Principle or The 80/20 Rule)</h3><p>生活中大多数事情不是均匀分布的。<br>这个原则也被称为<strong>二八法则</strong>，<strong>重要的少数法则</strong>和<strong>因素稀疏原则</strong>。</p>\n<h3 id=\"舍基原理-The-Shirky-Principle\"><a href=\"#舍基原理-The-Shirky-Principle\" class=\"headerlink\" title=\"舍基原理 (The Shirky Principle)\"></a>舍基原理 (The Shirky Principle)</h3><p>各机构会努力保留他们能够解决的问题。<br>当一个人不理解自己的工作就能够获得酬劳时，那么他就很难再去了解这份工作了！</p>\n<h3 id=\"彼得原理-The-Peter-Principle\"><a href=\"#彼得原理-The-Peter-Principle\" class=\"headerlink\" title=\"彼得原理 (The Peter Principle)\"></a>彼得原理 (The Peter Principle)</h3><p>在等级制度中，人往往会被提升到他们的“无法胜任的水平。</p>\n<h3 id=\"鲁棒性原则-The-Robustness-Principle-or-Postel’s-Law\"><a href=\"#鲁棒性原则-The-Robustness-Principle-or-Postel’s-Law\" class=\"headerlink\" title=\"鲁棒性原则 (The Robustness Principle or Postel’s Law)\"></a>鲁棒性原则 (The Robustness Principle or Postel’s Law)</h3><p>在自己所做的事情上要保守, 在接受别人的事情上要自由。</p>\n<h3 id=\"SOLID\"><a href=\"#SOLID\" class=\"headerlink\" title=\"SOLID\"></a>SOLID</h3><ul>\n<li>S：单一功能原则：有且有一个单一的功能，并且该功能应该由这个类完全封装起来</li>\n<li>O：开闭原则：对于扩展是开放的，但是对于修改是封闭的</li>\n<li>L：里氏替换原则：子类可以扩展父类的功能，但不能改变父类原有的功能</li>\n<li>I：接口隔离原则：建立单一接口，不要建立庞大臃肿的接口</li>\n<li>D：依赖反转原则 ：不要太多耦合<br>这些是 <a href=\"https://github.com/nusr/hacker-laws-zh#todo\">Object-Oriented Programming</a> 的关键原则。诸如此类的设计原则能够帮助开发人员构建更易于维护的系统。</li>\n</ul>\n<h3 id=\"不要重复你自己原则-The-DRY-Principle\"><a href=\"#不要重复你自己原则-The-DRY-Principle\" class=\"headerlink\" title=\"不要重复你自己原则 (The DRY Principle)\"></a>不要重复你自己原则 (The DRY Principle)</h3><p>系统中，每一块知识都必须是单一、明确而权威的。</p>\n<h3 id=\"KISS-原则-The-KISS-Principle\"><a href=\"#KISS-原则-The-KISS-Principle\" class=\"headerlink\" title=\"KISS 原则 (The KISS Principle)\"></a>KISS 原则 (The KISS Principle)</h3><p>保持简单和直白。</p>\n<h3 id=\"你不需要它原则-YAGNI\"><a href=\"#你不需要它原则-YAGNI\" class=\"headerlink\" title=\"你不需要它原则 (YAGNI)\"></a>你不需要它原则 (YAGNI)</h3><p>只有当你需要某些东西的时候，才去实现它们，而不是在你预见的时候。如无必要，勿增实体</p>\n<h3 id=\"分布式计算的谬论-The-Fallacies-of-Distributed-Computing\"><a href=\"#分布式计算的谬论-The-Fallacies-of-Distributed-Computing\" class=\"headerlink\" title=\"分布式计算的谬论 (The Fallacies of Distributed Computing)\"></a>分布式计算的谬论 (The Fallacies of Distributed Computing)</h3><p>不要做以下假设</p>\n<ul>\n<li>网络可靠</li>\n<li>延迟为零</li>\n<li>带宽无限</li>\n<li>网络安全</li>\n<li>拓扑恒定</li>\n<li>单一管理员</li>\n<li>运输成本为零</li>\n<li>网络为同构的</li>\n</ul>\n","more":"<p>[toc]</p>\n<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>原文是<a href=\"https://github.com/dwmkerr/hacker-laws\">hacker-laws</a> ，作者做了翻译、归纳、整理、夹带私货；<br>阅读hacker laws 有助于coder 更好的开发； here we go!</p>\n<h2 id=\"定律\"><a href=\"#定律\" class=\"headerlink\" title=\"定律\"></a>定律</h2><h3 id=\"90-9-1-法则-90–9–1-Principle-or-1-Rule\"><a href=\"#90-9-1-法则-90–9–1-Principle-or-1-Rule\" class=\"headerlink\" title=\"90-9-1 法则 (90–9–1 Principle or 1% Rule)\"></a>90-9-1 法则 (90–9–1 Principle or 1% Rule)</h3><p>在诸如维基这样的互联网社区中，90% 的用户只看内容并不参与互动，9% 的用户会参与讨论，而只有 1% 的用户会创造内容。</p>\n<h3 id=\"阿姆达尔定律-Amdahl’s-Law\"><a href=\"#阿姆达尔定律-Amdahl’s-Law\" class=\"headerlink\" title=\"阿姆达尔定律 (Amdahl’s Law)\"></a>阿姆达尔定律 (Amdahl’s Law)</h3><p>并行计算中，有些部分可以被多核心并行处理，有些部分只能串行处理，增加核心对速度的提升的收益会边际递减</p>\n<h3 id=\"破窗效应-The-Broken-Windows-Theory\"><a href=\"#破窗效应-The-Broken-Windows-Theory\" class=\"headerlink\" title=\"破窗效应 (The Broken Windows Theory)\"></a>破窗效应 (The Broken Windows Theory)</h3><p>在破窗理论中认为，恶化若不修复，会导致进一步更严重的恶化参见：</p>\n<h3 id=\"布鲁克斯法则-Brooks’s-Law\"><a href=\"#布鲁克斯法则-Brooks’s-Law\" class=\"headerlink\" title=\"布鲁克斯法则 (Brooks’s Law)\"></a>布鲁克斯法则 (Brooks’s Law)</h3><p>软件开发后期，添加人力只会使项目开发得更慢。因为有些事情无法分割，切增加沟通成本（和阿姆达尔有点像）<br>《人月神话》大篇幅在讲这个</p>\n<h3 id=\"CAP-定理-CAP-Theorem-or-Brewer’s-Theorem\"><a href=\"#CAP-定理-CAP-Theorem-or-Brewer’s-Theorem\" class=\"headerlink\" title=\"CAP 定理 (CAP Theorem or Brewer’s Theorem)\"></a>CAP 定理 (CAP Theorem or Brewer’s Theorem)</h3><p>CAP 定理由 Eric Brewer 所定义，它指出对于分布式数据存储来说，不可能同时满足以下三点，可以有侧重，例如金融交易系统的强一致性，淘宝的可用性等：</p>\n<ul>\n<li>一致性 (Consistency)：每个终端都会接收到 最新的数据，或者返回错误。</li>\n<li>可用性 (Availability): 每个终端都会接收到一个 非错误的响应，但不能保证该数据是 最新的数据。</li>\n<li>分区容错性 (Partition Tolerance)：当节点之间任意数量的网络请求失败时，系统能按预期继续运行（脑裂后还可以保证使用）。</li>\n</ul>\n<h3 id=\"康威定律-Conway’s-Law\"><a href=\"#康威定律-Conway’s-Law\" class=\"headerlink\" title=\"康威定律 (Conway’s Law)\"></a>康威定律 (Conway’s Law)</h3><p>如果一个组织被分散成许多小而无联系的单元，那么它开发的软件也是小而分散的。组织架构会体现在软件架构上（分形）</p>\n<h3 id=\"坎宁汉姆定律-Cunningham’s-Law\"><a href=\"#坎宁汉姆定律-Cunningham’s-Law\" class=\"headerlink\" title=\"坎宁汉姆定律 (Cunningham’s Law)\"></a>坎宁汉姆定律 (Cunningham’s Law)</h3><p>在网络上想得到正确答案的最好方法不是提问题，而是发布一个错误的答案，引起辩论（不建议这么做，现在网上已经一堆的错误回答）</p>\n<h3 id=\"邓巴数字-Dunbar’s-Number\"><a href=\"#邓巴数字-Dunbar’s-Number\" class=\"headerlink\" title=\"邓巴数字 (Dunbar’s Number)\"></a>邓巴数字 (Dunbar’s Number)</h3><p>邓巴数字是对一个人能够保持稳定社会关系的人数的认知极限——在这种关系中，邓巴数字的估计值一般在 100 至 250 之间。所以有些以扁平化为珍宝的公司在扩张时管理会有问题，对我们个人的启发是，可以交一两个社交牛的朋友，可以交换新事物。</p>\n<h3 id=\"邓宁-克鲁格效应-The-Dunning-Kruger-Effect\"><a href=\"#邓宁-克鲁格效应-The-Dunning-Kruger-Effect\" class=\"headerlink\" title=\"邓宁-克鲁格效应 (The Dunning-Kruger Effect)\"></a>邓宁-克鲁格效应 (The Dunning-Kruger Effect)</h3><p>无能的人往往不会意识到自己的无能。而得出正确答案所需要的技能，正是你认识到何为正确答案所需要的技能。虚幻的优越性产自无知</p>\n<h3 id=\"费茨法则-Fitts’s-Law\"><a href=\"#费茨法则-Fitts’s-Law\" class=\"headerlink\" title=\"费茨法则 (Fitts’s Law)\"></a>费茨法则 (Fitts’s Law)</h3><p>该法则指出，移动到目标区域所需的时间是到目标的距离除以目标宽度的函数。<br>费茨法则决定了在设计 UX 或 UI 时，交互元素应该尽可能大，而用户注意力区域和交互元素之间的距离应该尽可能小。这会对设计产生影响，例如将相近的任务进行归类分组等。</p>\n<h3 id=\"盖尔定律-Gall’s-Law\"><a href=\"#盖尔定律-Gall’s-Law\" class=\"headerlink\" title=\"盖尔定律 (Gall’s Law)\"></a>盖尔定律 (Gall’s Law)</h3><p>完整的复杂系统不是设计成的，而是一步步的修补和更改变成现在的样子。</p>\n<h3 id=\"古德哈特定律-Goodhart’s-Law\"><a href=\"#古德哈特定律-Goodhart’s-Law\" class=\"headerlink\" title=\"古德哈特定律 (Goodhart’s Law)\"></a>古德哈特定律 (Goodhart’s Law)</h3><p>当一个措施本身成为目标时，它就不再是一个好的措施，像为了kpi而kpi，在方法中迷失目的</p>\n<h3 id=\"汉隆的剃刀-Hanlon’s-Razor\"><a href=\"#汉隆的剃刀-Hanlon’s-Razor\" class=\"headerlink\" title=\"汉隆的剃刀 (Hanlon’s Razor)\"></a>汉隆的剃刀 (Hanlon’s Razor)</h3><p>能解释为愚蠢的，就不要解释为恶意的</p>\n<h3 id=\"席克定律-Hick’s-Law-or-Hick-Hyman-Law\"><a href=\"#席克定律-Hick’s-Law-or-Hick-Hyman-Law\" class=\"headerlink\" title=\"席克定律 (Hick’s Law or Hick-Hyman Law)\"></a>席克定律 (Hick’s Law or Hick-Hyman Law)</h3><p>决策时间和可供选择的选项数量呈对数增长关系。</p>\n<h3 id=\"侯世达定律-Hofstadter’s-Law\"><a href=\"#侯世达定律-Hofstadter’s-Law\" class=\"headerlink\" title=\"侯世达定律 (Hofstadter’s Law)\"></a>侯世达定律 (Hofstadter’s Law)</h3><p>结果往往低于目标，即使考虑到了这个点。</p>\n<h3 id=\"哈特伯定律-Hutber’s-Law\"><a href=\"#哈特伯定律-Hutber’s-Law\" class=\"headerlink\" title=\"哈特伯定律 (Hutber’s Law)\"></a>哈特伯定律 (Hutber’s Law)</h3><p>对一个系统的改进会导致其他部分的恶化；或者它会将其他的恶化隐藏起来，并导致系统整体状态的退化。</p>\n<h3 id=\"技术成熟度曲线-The-Hype-Cycle-or-Amara’s-Law\"><a href=\"#技术成熟度曲线-The-Hype-Cycle-or-Amara’s-Law\" class=\"headerlink\" title=\"技术成熟度曲线 (The Hype Cycle or Amara’s Law)\"></a>技术成熟度曲线 (The Hype Cycle or Amara’s Law)</h3><p>人有动物性-短时。我们倾向于过高估计技术在短期内的影响，并低估长期效应。</p>\n<h3 id=\"隐式接口定律-Hyrum’s-Law-or-The-Law-of-Implicit-Interfaces\"><a href=\"#隐式接口定律-Hyrum’s-Law-or-The-Law-of-Implicit-Interfaces\" class=\"headerlink\" title=\"隐式接口定律 (Hyrum’s Law or The Law of Implicit Interfaces)\"></a>隐式接口定律 (Hyrum’s Law or The Law of Implicit Interfaces)</h3><p>当你的 API 有足够多的用户时，API 的所有行为最终都会被其他人所依赖，大家不会一直看文档，很多公司都在取消文档工程师，转而提升用户使用体验。</p>\n<h3 id=\"柯林汉定律-Kernighan’s-Law\"><a href=\"#柯林汉定律-Kernighan’s-Law\" class=\"headerlink\" title=\"柯林汉定律 (Kernighan’s Law)\"></a>柯林汉定律 (Kernighan’s Law)</h3><p>调试在一开始就比编写程序困难一倍。因此，按照定义，如果你的代码写得非常巧妙，那么你就没有足够的能力来调试它。</p>\n<h3 id=\"林纳斯定律-Linus’s-Law\"><a href=\"#林纳斯定律-Linus’s-Law\" class=\"headerlink\" title=\"林纳斯定律 (Linus’s Law)\"></a>林纳斯定律 (Linus’s Law)</h3><p>简单地说，能够看到问题的人越多，有人解决过相关的问题或事情的可能性就越高。</p>\n<h3 id=\"梅特卡夫定律-Metcalfe’s-Law\"><a href=\"#梅特卡夫定律-Metcalfe’s-Law\" class=\"headerlink\" title=\"梅特卡夫定律 (Metcalfe’s Law)\"></a>梅特卡夫定律 (Metcalfe’s Law)</h3><p>在网络理论中，系统的价值约等于系统用户数的平方，人的作用很大。</p>\n<h3 id=\"摩尔定律-Moore’s-Law\"><a href=\"#摩尔定律-Moore’s-Law\" class=\"headerlink\" title=\"摩尔定律 (Moore’s Law)\"></a>摩尔定律 (Moore’s Law)</h3><p>集成电路中的晶体管数量大约每两年翻一番。价格不变，芯片性能两年一番。</p>\n<h3 id=\"墨菲定律-Murphy’s-Law-Sod’s-Law\"><a href=\"#墨菲定律-Murphy’s-Law-Sod’s-Law\" class=\"headerlink\" title=\"墨菲定律 (Murphy’s Law / Sod’s Law)\"></a>墨菲定律 (Murphy’s Law / Sod’s Law)</h3><p>凡是可能出错的事就一定会出错。</p>\n<h3 id=\"奥卡姆剃刀-Occam’s-Razor\"><a href=\"#奥卡姆剃刀-Occam’s-Razor\" class=\"headerlink\" title=\"奥卡姆剃刀 (Occam’s Razor)\"></a>奥卡姆剃刀 (Occam’s Razor)</h3><p>如无必要，勿增实体。</p>\n<h3 id=\"帕金森定理-Parkinson’s-Law\"><a href=\"#帕金森定理-Parkinson’s-Law\" class=\"headerlink\" title=\"帕金森定理 (Parkinson’s Law)\"></a>帕金森定理 (Parkinson’s Law)</h3><p>在工作能够完成的时限内，工作量会一直增加，直到所有可用时间都被填满为止，所以别卷了，工作是做不完的。</p>\n<h3 id=\"过早优化效应-Premature-Optimization-Effect\"><a href=\"#过早优化效应-Premature-Optimization-Effect\" class=\"headerlink\" title=\"过早优化效应 (Premature Optimization Effect)\"></a>过早优化效应 (Premature Optimization Effect)</h3><p>过早优化是万恶之源。</p>\n<h3 id=\"普特定律-Putt’s-Law\"><a href=\"#普特定律-Putt’s-Law\" class=\"headerlink\" title=\"普特定律 (Putt’s Law)\"></a>普特定律 (Putt’s Law)</h3><p>技术由两类人主导，一类是纯粹的管理人员， 一类是纯粹的技术人员。</p>\n<h3 id=\"里德定律-Reed’s-Law\"><a href=\"#里德定律-Reed’s-Law\" class=\"headerlink\" title=\"里德定律 (Reed’s Law)\"></a>里德定律 (Reed’s Law)</h3><p>大型网络，尤其是社交网络的效用会随着网络的大小呈指数级扩增，规模效应</p>\n<h3 id=\"复杂性守恒定律-The-Law-of-Conservation-of-Complexity-or-Tesler’s-Law\"><a href=\"#复杂性守恒定律-The-Law-of-Conservation-of-Complexity-or-Tesler’s-Law\" class=\"headerlink\" title=\"复杂性守恒定律 (The Law of Conservation of Complexity or Tesler’s Law)\"></a>复杂性守恒定律 (The Law of Conservation of Complexity or Tesler’s Law)</h3><p>系统中存在着一定程度的复杂性，并且不能减少。</p>\n<h3 id=\"得墨忒耳定律-The-Law-of-Demeter\"><a href=\"#得墨忒耳定律-The-Law-of-Demeter\" class=\"headerlink\" title=\"得墨忒耳定律 (The Law of Demeter)\"></a>得墨忒耳定律 (The Law of Demeter)</h3><p>得墨忒耳定律又称最少知识原则，是一条与面向对象语言有关的软件设计原则，只和已知的打交道。</p>\n<h3 id=\"抽象泄漏定律-The-Law-of-Leaky-Abstractions\"><a href=\"#抽象泄漏定律-The-Law-of-Leaky-Abstractions\" class=\"headerlink\" title=\"抽象泄漏定律 (The Law of Leaky Abstractions)\"></a>抽象泄漏定律 (The Law of Leaky Abstractions)</h3><p>在某种程度上，所有非平凡的抽象都是有泄漏的。<br>过度依赖抽象，加上对底层过程的理解不足，实际上使得问题在某些情况下更加复杂。</p>\n<h3 id=\"帕金森琐碎定理-The-Law-of-Triviality\"><a href=\"#帕金森琐碎定理-The-Law-of-Triviality\" class=\"headerlink\" title=\"帕金森琐碎定理 (The Law of Triviality)\"></a>帕金森琐碎定理 (The Law of Triviality)</h3><p>群体将给予更多的时间和注意力来处理琐碎的问题，而不是用来处理严肃而实质性的问题。</p>\n<h3 id=\"Unix-哲学-The-Unix-Philosophy\"><a href=\"#Unix-哲学-The-Unix-Philosophy\" class=\"headerlink\" title=\"Unix 哲学 (The Unix Philosophy)\"></a>Unix 哲学 (The Unix Philosophy)</h3><p>软件组件应该很小，并专注于做一件特定的事情。将小而简单以及定义良好的单元组合在一起，而不是使用大而复杂的多用途程序，可以更轻松地构建系统。</p>\n<h3 id=\"Spotify-模型-The-Spotify-Model\"><a href=\"#Spotify-模型-The-Spotify-Model\" class=\"headerlink\" title=\"Spotify 模型 (The Spotify Model)\"></a>Spotify 模型 (The Spotify Model)</h3><p>团队围绕功能而非技术进行组织。</p>\n<h3 id=\"沃德勒定律-Wadler’s-Law\"><a href=\"#沃德勒定律-Wadler’s-Law\" class=\"headerlink\" title=\"沃德勒定律 (Wadler’s Law)\"></a>沃德勒定律 (Wadler’s Law)</h3><p>任何语言设计中，讨论下面列表中某个要素所花费的总时间与其位置成正比。</p>\n<ol>\n<li>语义 (Semantics)</li>\n<li>语法 (Syntax)</li>\n<li>词法 (Lexical syntax)</li>\n<li>注释语法 (Lexical syntax of comments)<br>简而言之，在语义上花费一个小时，就要在注释语法上花费八个小时</li>\n</ol>\n<h3 id=\"惠顿定律-Wheaton’s-Law\"><a href=\"#惠顿定律-Wheaton’s-Law\" class=\"headerlink\" title=\"惠顿定律 (Wheaton’s Law)\"></a>惠顿定律 (Wheaton’s Law)</h3><p>不要像个傻子一样。</p>\n<h2 id=\"原则\"><a href=\"#原则\" class=\"headerlink\" title=\"原则\"></a>原则</h2><p>原则通常是与设计相关的准则。</p>\n<h3 id=\"乔治·伯克斯定律-All-Models-Are-Wrong-or-George-Box’s-Law\"><a href=\"#乔治·伯克斯定律-All-Models-Are-Wrong-or-George-Box’s-Law\" class=\"headerlink\" title=\"乔治·伯克斯定律 (All Models Are Wrong or George Box’s Law)\"></a>乔治·伯克斯定律 (All Models Are Wrong or George Box’s Law)</h3><p>这一原则表明，所有的系统模型都是有缺陷的，但只要它们没有太多缺陷，那便有可能是有用的。这一原则源于统计学，同时也适用于科学和计算模型。</p>\n<h3 id=\"切斯特森围栏-Chesterson’s-Fence\"><a href=\"#切斯特森围栏-Chesterson’s-Fence\" class=\"headerlink\" title=\"切斯特森围栏 (Chesterson’s Fence)\"></a>切斯特森围栏 (Chesterson’s Fence)</h3><p>在了解现有情况背后的原因之前，不应该进行改进。</p>\n<h3 id=\"死海效应-The-Dead-Sea-Effect\"><a href=\"#死海效应-The-Dead-Sea-Effect\" class=\"headerlink\" title=\"死海效应 (The Dead Sea Effect)\"></a>死海效应 (The Dead Sea Effect)</h3><p>死海效应表明，在任何一个组织中，工程师的技能、才华和效能往往与他们在公司的时间呈反比。</p>\n<h3 id=\"呆伯特法则-The-Dilbert-Principle\"><a href=\"#呆伯特法则-The-Dilbert-Principle\" class=\"headerlink\" title=\"呆伯特法则 (The Dilbert Principle)\"></a>呆伯特法则 (The Dilbert Principle)</h3><p>公司会倾向于系统地将工作能力差的员工提升到管理层，以使他们脱离工作流程（在国内目前没有）。</p>\n<h3 id=\"帕累托法则-The-Pareto-Principle-or-The-80-20-Rule\"><a href=\"#帕累托法则-The-Pareto-Principle-or-The-80-20-Rule\" class=\"headerlink\" title=\"帕累托法则 (The Pareto Principle or The 80/20 Rule)\"></a>帕累托法则 (The Pareto Principle or The 80/20 Rule)</h3><p>生活中大多数事情不是均匀分布的。<br>这个原则也被称为<strong>二八法则</strong>，<strong>重要的少数法则</strong>和<strong>因素稀疏原则</strong>。</p>\n<h3 id=\"舍基原理-The-Shirky-Principle\"><a href=\"#舍基原理-The-Shirky-Principle\" class=\"headerlink\" title=\"舍基原理 (The Shirky Principle)\"></a>舍基原理 (The Shirky Principle)</h3><p>各机构会努力保留他们能够解决的问题。<br>当一个人不理解自己的工作就能够获得酬劳时，那么他就很难再去了解这份工作了！</p>\n<h3 id=\"彼得原理-The-Peter-Principle\"><a href=\"#彼得原理-The-Peter-Principle\" class=\"headerlink\" title=\"彼得原理 (The Peter Principle)\"></a>彼得原理 (The Peter Principle)</h3><p>在等级制度中，人往往会被提升到他们的“无法胜任的水平。</p>\n<h3 id=\"鲁棒性原则-The-Robustness-Principle-or-Postel’s-Law\"><a href=\"#鲁棒性原则-The-Robustness-Principle-or-Postel’s-Law\" class=\"headerlink\" title=\"鲁棒性原则 (The Robustness Principle or Postel’s Law)\"></a>鲁棒性原则 (The Robustness Principle or Postel’s Law)</h3><p>在自己所做的事情上要保守, 在接受别人的事情上要自由。</p>\n<h3 id=\"SOLID\"><a href=\"#SOLID\" class=\"headerlink\" title=\"SOLID\"></a>SOLID</h3><ul>\n<li>S：单一功能原则：有且有一个单一的功能，并且该功能应该由这个类完全封装起来</li>\n<li>O：开闭原则：对于扩展是开放的，但是对于修改是封闭的</li>\n<li>L：里氏替换原则：子类可以扩展父类的功能，但不能改变父类原有的功能</li>\n<li>I：接口隔离原则：建立单一接口，不要建立庞大臃肿的接口</li>\n<li>D：依赖反转原则 ：不要太多耦合<br>这些是 <a href=\"https://github.com/nusr/hacker-laws-zh#todo\">Object-Oriented Programming</a> 的关键原则。诸如此类的设计原则能够帮助开发人员构建更易于维护的系统。</li>\n</ul>\n<h3 id=\"不要重复你自己原则-The-DRY-Principle\"><a href=\"#不要重复你自己原则-The-DRY-Principle\" class=\"headerlink\" title=\"不要重复你自己原则 (The DRY Principle)\"></a>不要重复你自己原则 (The DRY Principle)</h3><p>系统中，每一块知识都必须是单一、明确而权威的。</p>\n<h3 id=\"KISS-原则-The-KISS-Principle\"><a href=\"#KISS-原则-The-KISS-Principle\" class=\"headerlink\" title=\"KISS 原则 (The KISS Principle)\"></a>KISS 原则 (The KISS Principle)</h3><p>保持简单和直白。</p>\n<h3 id=\"你不需要它原则-YAGNI\"><a href=\"#你不需要它原则-YAGNI\" class=\"headerlink\" title=\"你不需要它原则 (YAGNI)\"></a>你不需要它原则 (YAGNI)</h3><p>只有当你需要某些东西的时候，才去实现它们，而不是在你预见的时候。如无必要，勿增实体</p>\n<h3 id=\"分布式计算的谬论-The-Fallacies-of-Distributed-Computing\"><a href=\"#分布式计算的谬论-The-Fallacies-of-Distributed-Computing\" class=\"headerlink\" title=\"分布式计算的谬论 (The Fallacies of Distributed Computing)\"></a>分布式计算的谬论 (The Fallacies of Distributed Computing)</h3><p>不要做以下假设</p>\n<ul>\n<li>网络可靠</li>\n<li>延迟为零</li>\n<li>带宽无限</li>\n<li>网络安全</li>\n<li>拓扑恒定</li>\n<li>单一管理员</li>\n<li>运输成本为零</li>\n<li>网络为同构的</li>\n</ul>\n","categories":[{"name":"编程技术","path":"api/categories/编程技术.json"}],"tags":[{"name":"编程思想","path":"api/tags/编程思想.json"},{"name":"编程哲学","path":"api/tags/编程哲学.json"}]}