{"title":"代码整洁之道","slug":"self/cleancode","date":"2021-03-23T15:24:21.000Z","updated":"2024-06-30T10:35:56.308Z","comments":true,"path":"api/articles/self/cleancode.json","excerpt":null,"covers":null,"content":"<h2 id=\"必要性\"><a href=\"#必要性\" class=\"headerlink\" title=\"必要性\"></a>必要性</h2><ol>\n<li> 要有代码，大胆写，<em>Imperfect</em> code is <em>Better Than</em> Perfect </li>\n<li> 现在就做，later equals never，Now is better than never</li>\n<li> 从开始就不要为了一时便利去破坏代码整洁</li>\n<li> 坚持同一规范</li>\n<li> 隔离与性能的权衡</li>\n</ol>\n<h2 id=\"什么是代码整洁\"><a href=\"#什么是代码整洁\" class=\"headerlink\" title=\"什么是代码整洁\"></a>什么是代码整洁</h2><p>应当有单元测试以及验收测试，使用有意义的命名，只提供一种做某一件事的途径（而非多种），尽量少的依赖关系，清晰并且尽量少的API</p>\n<ol>\n<li> 能通过所有测试</li>\n<li> 没有重复代码</li>\n<li> 体现系统全部设计理念</li>\n<li> 包括尽量少的实体，例如，类、方法、函数等</li>\n<li> 让读的过程轻松，即便会让写的过程更难</li>\n<li> 让营地比你来的时候 更干净</li>\n</ol>\n<h3 id=\"细节\"><a href=\"#细节\" class=\"headerlink\" title=\"细节\"></a>细节</h3><ol>\n<li> 名副其实</li>\n<li> 避免歧义，O I等，避免废话</li>\n<li> 使用可搜索的名称</li>\n<li> 类名不应当是动词</li>\n<li> 方法名应当是动词或动词短语</li>\n<li> 宁可明确，毋为好玩（生活和思想需要务虚，但code要务实）</li>\n<li> 避免双关语，一词一意</li>\n<li> 每个概念一个单词，一意一词</li>\n<li> 使用算法名、计算机术语、模式名、数学术语命名</li>\n<li> 使用所在领域命名</li>\n<li> 函数就该小</li>\n<li> 函数式编程，尽量少用副作用编程</li>\n<li> 做好隔离（抽象、封装、逻辑与业务隔离，实现与使用隔离）</li>\n<li> 函数应该做好一件事，只做一件事</li>\n<li> 函数参数越少越好，最好没有</li>\n<li> 抽离try catch代码块</li>\n<li> 相关联的函数应该放在一起，调用者尽可能放在被调用者上面</li>\n<li>tdd 规则<ol>\n<li> 在能产生不能通过的单元测试之前，不可编写生成代码</li>\n<li> 只允许编写刚好无法通过的代码</li>\n<li> 只可编写刚好足以通过当前失败测试的生成代码</li>\n</ol>\n</li>\n</ol>\n","more":"<h2 id=\"必要性\"><a href=\"#必要性\" class=\"headerlink\" title=\"必要性\"></a>必要性</h2><ol>\n<li> 要有代码，大胆写，<em>Imperfect</em> code is <em>Better Than</em> Perfect </li>\n<li> 现在就做，later equals never，Now is better than never</li>\n<li> 从开始就不要为了一时便利去破坏代码整洁</li>\n<li> 坚持同一规范</li>\n<li> 隔离与性能的权衡</li>\n</ol>\n<h2 id=\"什么是代码整洁\"><a href=\"#什么是代码整洁\" class=\"headerlink\" title=\"什么是代码整洁\"></a>什么是代码整洁</h2><p>应当有单元测试以及验收测试，使用有意义的命名，只提供一种做某一件事的途径（而非多种），尽量少的依赖关系，清晰并且尽量少的API</p>\n<ol>\n<li> 能通过所有测试</li>\n<li> 没有重复代码</li>\n<li> 体现系统全部设计理念</li>\n<li> 包括尽量少的实体，例如，类、方法、函数等</li>\n<li> 让读的过程轻松，即便会让写的过程更难</li>\n<li> 让营地比你来的时候 更干净</li>\n</ol>\n<h3 id=\"细节\"><a href=\"#细节\" class=\"headerlink\" title=\"细节\"></a>细节</h3><ol>\n<li> 名副其实</li>\n<li> 避免歧义，O I等，避免废话</li>\n<li> 使用可搜索的名称</li>\n<li> 类名不应当是动词</li>\n<li> 方法名应当是动词或动词短语</li>\n<li> 宁可明确，毋为好玩（生活和思想需要务虚，但code要务实）</li>\n<li> 避免双关语，一词一意</li>\n<li> 每个概念一个单词，一意一词</li>\n<li> 使用算法名、计算机术语、模式名、数学术语命名</li>\n<li> 使用所在领域命名</li>\n<li> 函数就该小</li>\n<li> 函数式编程，尽量少用副作用编程</li>\n<li> 做好隔离（抽象、封装、逻辑与业务隔离，实现与使用隔离）</li>\n<li> 函数应该做好一件事，只做一件事</li>\n<li> 函数参数越少越好，最好没有</li>\n<li> 抽离try catch代码块</li>\n<li> 相关联的函数应该放在一起，调用者尽可能放在被调用者上面</li>\n<li>tdd 规则<ol>\n<li> 在能产生不能通过的单元测试之前，不可编写生成代码</li>\n<li> 只允许编写刚好无法通过的代码</li>\n<li> 只可编写刚好足以通过当前失败测试的生成代码</li>\n</ol>\n</li>\n</ol>\n","categories":[{"name":"编程技术","path":"api/categories/编程技术.json"}],"tags":[{"name":"编程思想","path":"api/tags/编程思想.json"},{"name":"编程哲学","path":"api/tags/编程哲学.json"}]}