{"title":"go的内置包","slug":"language/golang/built-inpackage","date":"2019-07-19T14:20:21.000Z","updated":"2024-06-30T10:35:56.308Z","comments":true,"path":"api/articles/language/golang/built-inpackage.json","excerpt":null,"covers":null,"content":"<h2 id=\"库与包\"><a href=\"#库与包\" class=\"headerlink\" title=\"库与包\"></a>库与包</h2><h4 id=\"archive\"><a href=\"#archive\" class=\"headerlink\" title=\"archive\"></a>archive</h4><h5 id=\"tar包：负责打包、解包-注意tar不负责压缩和解压\"><a href=\"#tar包：负责打包、解包-注意tar不负责压缩和解压\" class=\"headerlink\" title=\"tar包：负责打包、解包,注意tar不负责压缩和解压\"></a>tar包：负责打包、解包,注意tar不负责压缩和解压</h5><p>打包实现原理</p>\n<p>先创建一个文件x.tar，然后向x.tar写入tar头部信息。打开要被tar的文件，向x.tar写入头部信息，然后向x.tar写入文件信息。重复第二步直到所有文件都被写入到x.tar中，关闭x.tar，整个过程就这样完成了</p>\n<p>解包实现原理</p>\n<p>先打开tar文件，然后从这个tar头部中循环读取存储在这个归档文件内的文件头信息，从这个文件头里读取文件名，以这个文件名创建文件，然后向这个文件里写入数据</p>\n<h5 id=\"zip包：打包、解包，并进行压缩\"><a href=\"#zip包：打包、解包，并进行压缩\" class=\"headerlink\" title=\"zip包：打包、解包，并进行压缩\"></a>zip包：打包、解包，并进行压缩</h5><p>压缩实现原理</p>\n<p>工具类：bufio、bytes、string、path、strconv、io/ioutils等，没有领域知识，比较简单</p>\n<p>系统包：os、net、sync、fmt</p>\n<h2 id=\"linux-说明\"><a href=\"#linux-说明\" class=\"headerlink\" title=\"linux 说明\"></a>linux 说明</h2><h4 id=\"linux文件头信息-标志\"><a href=\"#linux文件头信息-标志\" class=\"headerlink\" title=\"linux文件头信息(标志)\"></a>linux文件头信息(标志)</h4><p>使用file命令可以查看文件类型</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# file test ./test/1</span><br><span class=\"line\">test:     directory</span><br><span class=\"line\">./test/1: ASCII text</span><br></pre></td></tr></table></figure>\n\n\n\n","more":"<h2 id=\"库与包\"><a href=\"#库与包\" class=\"headerlink\" title=\"库与包\"></a>库与包</h2><h4 id=\"archive\"><a href=\"#archive\" class=\"headerlink\" title=\"archive\"></a>archive</h4><h5 id=\"tar包：负责打包、解包-注意tar不负责压缩和解压\"><a href=\"#tar包：负责打包、解包-注意tar不负责压缩和解压\" class=\"headerlink\" title=\"tar包：负责打包、解包,注意tar不负责压缩和解压\"></a>tar包：负责打包、解包,注意tar不负责压缩和解压</h5><p>打包实现原理</p>\n<p>先创建一个文件x.tar，然后向x.tar写入tar头部信息。打开要被tar的文件，向x.tar写入头部信息，然后向x.tar写入文件信息。重复第二步直到所有文件都被写入到x.tar中，关闭x.tar，整个过程就这样完成了</p>\n<p>解包实现原理</p>\n<p>先打开tar文件，然后从这个tar头部中循环读取存储在这个归档文件内的文件头信息，从这个文件头里读取文件名，以这个文件名创建文件，然后向这个文件里写入数据</p>\n<h5 id=\"zip包：打包、解包，并进行压缩\"><a href=\"#zip包：打包、解包，并进行压缩\" class=\"headerlink\" title=\"zip包：打包、解包，并进行压缩\"></a>zip包：打包、解包，并进行压缩</h5><p>压缩实现原理</p>\n<p>工具类：bufio、bytes、string、path、strconv、io/ioutils等，没有领域知识，比较简单</p>\n<p>系统包：os、net、sync、fmt</p>\n<h2 id=\"linux-说明\"><a href=\"#linux-说明\" class=\"headerlink\" title=\"linux 说明\"></a>linux 说明</h2><h4 id=\"linux文件头信息-标志\"><a href=\"#linux文件头信息-标志\" class=\"headerlink\" title=\"linux文件头信息(标志)\"></a>linux文件头信息(标志)</h4><p>使用file命令可以查看文件类型</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# file test ./test/1</span><br><span class=\"line\">test:     directory</span><br><span class=\"line\">./test/1: ASCII text</span><br></pre></td></tr></table></figure>\n\n\n\n","categories":[{"name":"编程技术","path":"api/categories/编程技术.json"}],"tags":[{"name":"编程原理","path":"api/tags/编程原理.json"},{"name":"golang","path":"api/tags/golang.json"}]}