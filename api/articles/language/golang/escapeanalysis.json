{"title":"go逃逸分析","slug":"language/golang/escapeanalysis","date":"2021-05-08T13:20:21.000Z","updated":"2024-06-30T10:35:56.308Z","comments":true,"path":"api/articles/language/golang/escapeanalysis.json","excerpt":null,"covers":null,"content":"<p>[toc]</p>\n<h2 id=\"go逃逸分析\"><a href=\"#go逃逸分析\" class=\"headerlink\" title=\"go逃逸分析\"></a>go逃逸分析</h2><h3 id=\"什么是逃逸\"><a href=\"#什么是逃逸\" class=\"headerlink\" title=\"什么是逃逸\"></a>什么是逃逸</h3><p>内存从栈逃逸到堆中，会增大GC的压力</p>\n<h3 id=\"为什么要做逃逸分析\"><a href=\"#为什么要做逃逸分析\" class=\"headerlink\" title=\"为什么要做逃逸分析\"></a>为什么要做逃逸分析</h3><p>申请到栈内存性能好，不会引起GC，函数返回直接释放</p>\n<p>申请到堆内存会导致gc，引起性能问题</p>\n<p>如何分配：</p>\n<ol>\n<li>如果函数外部没有引用，则优先放到栈中；</li>\n<li>如果函数外部存在引用，则必定放到堆中；</li>\n</ol>\n<p>常见的三种逃逸</p>\n<h3 id=\"指针逃逸\"><a href=\"#指针逃逸\" class=\"headerlink\" title=\"指针逃逸\"></a>指针逃逸</h3><p>函数返回局部变量的指针导致指针逃逸</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pointerEscapeFunc</span><span class=\"params\">()</span> *<span class=\"title\">int</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> v <span class=\"keyword\">int</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;v</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    pointerEscapeFunc()<span class=\"comment\">//v会被分配到堆上</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">host$</span><span class=\"bash\"> go build -gcflags <span class=\"string\">&#x27;-m -l&#x27;</span> tem.go <span class=\"comment\">#-m打印信息，-l忽略inline信息</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> command-line-arguments</span></span><br><span class=\"line\">./tem.go:3:6: moved to heap: v #可见v被分配到了堆上</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"栈空间不足\"><a href=\"#栈空间不足\" class=\"headerlink\" title=\"栈空间不足\"></a>栈空间不足</h3><p>go的goroutine初始栈大小为2KB，go可以增大栈大小，但不可超过系统栈限制(使用<code>ulimit -s</code>查看)，超过一定大小的变量将会逃逸到堆上，不同go版本大小限制不同</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">stackSpaceExhausted</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    v := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>,<span class=\"number\">0</span>,<span class=\"number\">10000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    stackSpaceExhausted()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">host$</span><span class=\"bash\"> go build -gcflags <span class=\"string\">&#x27;-m -l&#x27;</span> tem.go</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> command-line-arguments</span></span><br><span class=\"line\">./tem.go:3:11: make([]int, 0, 10000) escapes to heap # 可见逃逸到了堆上，go1.15</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"闭包引用\"><a href=\"#闭包引用\" class=\"headerlink\" title=\"闭包引用\"></a>闭包引用</h3><p>函数类型也分两种，一种是函数字面量类型（未命名类型,func literal），另一种是函数命名类型。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">outer</span><span class=\"params\">()</span> <span class=\"title\">func</span><span class=\"params\">()</span> <span class=\"title\">int</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a <span class=\"keyword\">int</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">int</span></span>&#123;</span><br><span class=\"line\">        a++</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    inner := outer()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(inner())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">host$</span><span class=\"bash\"> go build -gcflags <span class=\"string\">&#x27;-m -l&#x27;</span> tem.go</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> command-line-arguments</span></span><br><span class=\"line\">./tem.go:3:6: moved to heap: a</span><br><span class=\"line\">./tem.go:4:9: func literal escapes to heap</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态类型\"><a href=\"#动态类型\" class=\"headerlink\" title=\"动态类型\"></a>动态类型</h3><p>对象大小不确定或作为不确定大小的参数时发生逃逸</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a <span class=\"keyword\">int</span></span><br><span class=\"line\">    fmt.Println(a)<span class=\"comment\">//fmt.Println的入参是...interface&#123;&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">host$</span><span class=\"bash\"> go build -gcflags <span class=\"string\">&#x27;-m -l&#x27;</span> tem.go</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> command-line-arguments</span></span><br><span class=\"line\">./tem.go:7:13: main ... argument does not escape</span><br><span class=\"line\">./tem.go:7:13: a escapes to heap</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"逃逸分析使用\"><a href=\"#逃逸分析使用\" class=\"headerlink\" title=\"逃逸分析使用\"></a>逃逸分析使用</h3><p>传值会拷贝对象，增加对象拷贝开销(听君一席话，胜似一席话)，只读切内存小的结构体使用可以提高性能</p>\n<p>传指针会导致内存逃逸到堆中，增加垃圾回收(GC)负担,对象需要频繁创建删除时，GC开销会特别大，影响性能，但在需要修改对象值、内存占用大的结构体中，传指针性能更好</p>\n","more":"<p>[toc]</p>\n<h2 id=\"go逃逸分析\"><a href=\"#go逃逸分析\" class=\"headerlink\" title=\"go逃逸分析\"></a>go逃逸分析</h2><h3 id=\"什么是逃逸\"><a href=\"#什么是逃逸\" class=\"headerlink\" title=\"什么是逃逸\"></a>什么是逃逸</h3><p>内存从栈逃逸到堆中，会增大GC的压力</p>\n<h3 id=\"为什么要做逃逸分析\"><a href=\"#为什么要做逃逸分析\" class=\"headerlink\" title=\"为什么要做逃逸分析\"></a>为什么要做逃逸分析</h3><p>申请到栈内存性能好，不会引起GC，函数返回直接释放</p>\n<p>申请到堆内存会导致gc，引起性能问题</p>\n<p>如何分配：</p>\n<ol>\n<li>如果函数外部没有引用，则优先放到栈中；</li>\n<li>如果函数外部存在引用，则必定放到堆中；</li>\n</ol>\n<p>常见的三种逃逸</p>\n<h3 id=\"指针逃逸\"><a href=\"#指针逃逸\" class=\"headerlink\" title=\"指针逃逸\"></a>指针逃逸</h3><p>函数返回局部变量的指针导致指针逃逸</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pointerEscapeFunc</span><span class=\"params\">()</span> *<span class=\"title\">int</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> v <span class=\"keyword\">int</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;v</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    pointerEscapeFunc()<span class=\"comment\">//v会被分配到堆上</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">host$</span><span class=\"bash\"> go build -gcflags <span class=\"string\">&#x27;-m -l&#x27;</span> tem.go <span class=\"comment\">#-m打印信息，-l忽略inline信息</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> command-line-arguments</span></span><br><span class=\"line\">./tem.go:3:6: moved to heap: v #可见v被分配到了堆上</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"栈空间不足\"><a href=\"#栈空间不足\" class=\"headerlink\" title=\"栈空间不足\"></a>栈空间不足</h3><p>go的goroutine初始栈大小为2KB，go可以增大栈大小，但不可超过系统栈限制(使用<code>ulimit -s</code>查看)，超过一定大小的变量将会逃逸到堆上，不同go版本大小限制不同</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">stackSpaceExhausted</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    v := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>,<span class=\"number\">0</span>,<span class=\"number\">10000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    stackSpaceExhausted()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">host$</span><span class=\"bash\"> go build -gcflags <span class=\"string\">&#x27;-m -l&#x27;</span> tem.go</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> command-line-arguments</span></span><br><span class=\"line\">./tem.go:3:11: make([]int, 0, 10000) escapes to heap # 可见逃逸到了堆上，go1.15</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"闭包引用\"><a href=\"#闭包引用\" class=\"headerlink\" title=\"闭包引用\"></a>闭包引用</h3><p>函数类型也分两种，一种是函数字面量类型（未命名类型,func literal），另一种是函数命名类型。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">outer</span><span class=\"params\">()</span> <span class=\"title\">func</span><span class=\"params\">()</span> <span class=\"title\">int</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a <span class=\"keyword\">int</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">int</span></span>&#123;</span><br><span class=\"line\">        a++</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    inner := outer()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(inner())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">host$</span><span class=\"bash\"> go build -gcflags <span class=\"string\">&#x27;-m -l&#x27;</span> tem.go</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> command-line-arguments</span></span><br><span class=\"line\">./tem.go:3:6: moved to heap: a</span><br><span class=\"line\">./tem.go:4:9: func literal escapes to heap</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态类型\"><a href=\"#动态类型\" class=\"headerlink\" title=\"动态类型\"></a>动态类型</h3><p>对象大小不确定或作为不确定大小的参数时发生逃逸</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a <span class=\"keyword\">int</span></span><br><span class=\"line\">    fmt.Println(a)<span class=\"comment\">//fmt.Println的入参是...interface&#123;&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">host$</span><span class=\"bash\"> go build -gcflags <span class=\"string\">&#x27;-m -l&#x27;</span> tem.go</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> command-line-arguments</span></span><br><span class=\"line\">./tem.go:7:13: main ... argument does not escape</span><br><span class=\"line\">./tem.go:7:13: a escapes to heap</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"逃逸分析使用\"><a href=\"#逃逸分析使用\" class=\"headerlink\" title=\"逃逸分析使用\"></a>逃逸分析使用</h3><p>传值会拷贝对象，增加对象拷贝开销(听君一席话，胜似一席话)，只读切内存小的结构体使用可以提高性能</p>\n<p>传指针会导致内存逃逸到堆中，增加垃圾回收(GC)负担,对象需要频繁创建删除时，GC开销会特别大，影响性能，但在需要修改对象值、内存占用大的结构体中，传指针性能更好</p>\n","categories":[{"name":"编程技术","path":"api/categories/编程技术.json"}],"tags":[{"name":"编程原理","path":"api/tags/编程原理.json"},{"name":"golang","path":"api/tags/golang.json"}]}