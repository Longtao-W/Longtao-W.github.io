{"title":"Cobra Tutorial","slug":"language/golang/lib/cobra","date":"2021-10-31T12:20:21.000Z","updated":"2024-06-30T10:35:56.308Z","comments":true,"path":"api/articles/language/golang/lib/cobra.json","excerpt":null,"covers":null,"content":"<h2 id=\"cobra\"><a href=\"#cobra\" class=\"headerlink\" title=\"cobra\"></a>cobra</h2><p>cobra 是go的cli框架，包含cli库和生成基于cobra cli应用的命令行工具</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>子命令，如<code>app server</code>、<code>app sub</code>等</li>\n<li>完整兼容POSIX的flag，包括长命名和短命名</li>\n<li>子命令的嵌套（子命令）</li>\n<li>全局、本地、级联三种flag</li>\n<li>好用的工具命令，如<code>cobra init appname</code>初始化cli程序,<code>cobra add cmdname</code>为cli程序增加子命令</li>\n<li>智能提示</li>\n<li>生成命令help，以及为每个flag、cmd生成<code>-h</code>，<code>--help</code>帮助</li>\n<li>生成自动补全功能</li>\n<li>生成man帮助文档</li>\n<li>命令别名</li>\n<li>自定义帮助、用法</li>\n<li>为达到saas的12-factor 可选择viper</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><code>go get -u github.com/spf13/cobra/cobra</code>会自动安装最新版本库和命令行工具，国内下不下来可以手动下载放到对应的文件夹中，然后就可以在你的code里应用它<code>import &quot;github.com/spf13/cobra&quot;</code></p>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>cobra主要管理commands、args、flags，commands代表一个命令或动作，一般用动词命名，args代表输入的参数，一般用名词命名，flags是对commands的修饰，一般用形容词命名；好的cli应用应该学习成本低，用户容易理解 cli的含义，git的例子能很好的说明这一点: <code>git clone URL --bare</code> ，clone是commands是动词，URL是args是你的输入，bare是flag是形容词</p>\n<h3 id=\"commands\"><a href=\"#commands\" class=\"headerlink\" title=\"commands\"></a>commands</h3><p>commands是cli应用的核心，每次交互都包含在一个command中，command可以拥有可选的子命令（sub commands）</p>\n<h3 id=\"flags\"><a href=\"#flags\" class=\"headerlink\" title=\"flags\"></a>flags</h3><p>flag 是修饰command的一种方式，cobra支持完全兼容的POSIX flag以及go的 flag包，一个flag可以被定义成仅对当前命令生效或对当前及子孙命令生效（对于写代码时增加flag来说），flag功能由<a href=\"https://github.com/ogier/pflag\">pflag library</a>提供</p>\n<h2 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h2><p>虽然你可以自定义你自己的应用工程结构，但推荐你使用以下cobra-cli应用的典型结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">▾ appName&#x2F;</span><br><span class=\"line\">  ▾ cmd&#x2F;</span><br><span class=\"line\">      add.go</span><br><span class=\"line\">      your.go</span><br><span class=\"line\">      commands.go</span><br><span class=\"line\">      here.go</span><br><span class=\"line\">    main.go</span><br></pre></td></tr></table></figure>\n<p>在cobra应用中，main.go通常只提供初始化cobra的功能，like that</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;&#123;pathToYourApp&#125;/cmd&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  cmd.Execute()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用cobra生成工具\"><a href=\"#使用cobra生成工具\" class=\"headerlink\" title=\"使用cobra生成工具\"></a>使用cobra生成工具</h2><p>cobra提供了帮你生成模板的cli工具，有如下命令:</p>\n<h3 id=\"初始化应用init\"><a href=\"#初始化应用init\" class=\"headerlink\" title=\"初始化应用init\"></a>初始化应用init</h3><p><code>cobra init [name] [flags]</code>,name是你cobra应用的名字，<code>--pkg-name</code>pkg 的名字 flag可以选择<code>-a</code> 作者名，<code>-l</code>添加license,默认Apache2.0，<code>--viper</code>添加viper等功能，具体如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--pkg-name string   fully qualified pkg name</span><br><span class=\"line\">-a, --author string    author name for copyright attribution (default &quot;YOUR NAME&quot;)</span><br><span class=\"line\">    --config string    config file (default is $HOME&#x2F;.cobra.yaml)</span><br><span class=\"line\">-l, --license string   name of license for the project</span><br><span class=\"line\">    --viper            use Viper for configuration (default true)</span><br></pre></td></tr></table></figure>\n\n<p>初始化应用后一般<code>go mod init</code>初始化应用，golang基础，在此不赘述</p>\n<h3 id=\"添加commands\"><a href=\"#添加commands\" class=\"headerlink\" title=\"添加commands\"></a>添加commands</h3><p><code>cobra add [name] -p &#39;parentComand&#39;</code> <code>-p</code>可以为特定命令添加子命令，缺省为根命令</p>\n<h2 id=\"使用Cobra库\"><a href=\"#使用Cobra库\" class=\"headerlink\" title=\"使用Cobra库\"></a>使用Cobra库</h2><p>手动创建需要新建一个rootCmd文件,然后添加若干command</p>\n<h3 id=\"创建rootCmd\"><a href=\"#创建rootCmd\" class=\"headerlink\" title=\"创建rootCmd\"></a>创建rootCmd</h3><p>cobra不需要创建一个特定的实例，可以直接使用<code>&amp;cobra.Commaand</code>，如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> rootCmd = &amp;cobra.Command&#123;</span><br><span class=\"line\">  Use:   <span class=\"string\">&quot;hugo&quot;</span>, <span class=\"comment\">//command,代表命令</span></span><br><span class=\"line\">  Short: <span class=\"string\">&quot;Hugo is a very fast static site generator&quot;</span>, <span class=\"comment\">//对command的简短介绍</span></span><br><span class=\"line\">  Long: <span class=\"string\">`A Fast and Flexible Static Site Generator built with </span></span><br><span class=\"line\"><span class=\"string\">                love by spf13 and friends in Go.</span></span><br><span class=\"line\"><span class=\"string\">                Complete documentation is available at http://hugo.spf13.com`</span>, <span class=\"comment\">//对command的详细介绍</span></span><br><span class=\"line\">  Run: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(cmd *cobra.Command, args []<span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 命令实际要做的事情</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Execute</span><span class=\"params\">()</span></span> &#123; <span class=\"comment\">//启动</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> err := rootCmd.Execute(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Println(err)</span><br><span class=\"line\">    os.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你可以在init中定义flatgs以及处理配置，示例如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">  homedir <span class=\"string\">&quot;github.com/mitchellh/go-homedir&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;github.com/spf13/cobra&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;github.com/spf13/viper&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  cobra.OnInitialize(initConfig) <span class=\"comment\">//初始化配置</span></span><br><span class=\"line\">  rootCmd.PersistentFlags().StringVar(&amp;cfgFile, <span class=\"string\">&quot;config&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;config file (default is $HOME/.cobra.yaml)&quot;</span>)<span class=\"comment\">//配置</span></span><br><span class=\"line\">  rootCmd.PersistentFlags().StringVarP(&amp;projectBase, <span class=\"string\">&quot;projectbase&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;base project directory eg. github.com/spf13/&quot;</span>)</span><br><span class=\"line\">  rootCmd.PersistentFlags().StringP(<span class=\"string\">&quot;author&quot;</span>, <span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;YOUR NAME&quot;</span>, <span class=\"string\">&quot;Author name for copyright attribution&quot;</span>)</span><br><span class=\"line\">  rootCmd.PersistentFlags().StringVarP(&amp;userLicense, <span class=\"string\">&quot;license&quot;</span>, <span class=\"string\">&quot;l&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;Name of license for the project (can provide `licensetext` in config)&quot;</span>)</span><br><span class=\"line\">  rootCmd.PersistentFlags().Bool(<span class=\"string\">&quot;viper&quot;</span>, <span class=\"literal\">true</span>, <span class=\"string\">&quot;Use Viper for configuration&quot;</span>)</span><br><span class=\"line\">  viper.BindPFlag(<span class=\"string\">&quot;author&quot;</span>, rootCmd.PersistentFlags().Lookup(<span class=\"string\">&quot;author&quot;</span>))<span class=\"comment\">//绑定viper的标致到cobra</span></span><br><span class=\"line\">  viper.BindPFlag(<span class=\"string\">&quot;projectbase&quot;</span>, rootCmd.PersistentFlags().Lookup(<span class=\"string\">&quot;projectbase&quot;</span>))</span><br><span class=\"line\">  viper.BindPFlag(<span class=\"string\">&quot;useViper&quot;</span>, rootCmd.PersistentFlags().Lookup(<span class=\"string\">&quot;viper&quot;</span>))</span><br><span class=\"line\">  viper.SetDefault(<span class=\"string\">&quot;author&quot;</span>, <span class=\"string\">&quot;NAME HERE &lt;EMAIL ADDRESS&gt;&quot;</span>)</span><br><span class=\"line\">  viper.SetDefault(<span class=\"string\">&quot;license&quot;</span>, <span class=\"string\">&quot;apache&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">initConfig</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// viper读取配置文件</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> cfgFile != <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 从flag读取文件</span></span><br><span class=\"line\">    viper.SetConfigFile(cfgFile)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取主目录</span></span><br><span class=\"line\">    home, err := homedir.Dir()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      fmt.Println(err)</span><br><span class=\"line\">      os.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 查找文件.cobra</span></span><br><span class=\"line\">    viper.AddConfigPath(home)</span><br><span class=\"line\">    viper.SetConfigName(<span class=\"string\">&quot;.cobra&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err := viper.ReadInConfig(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Can&#x27;t read config:&quot;</span>, err)</span><br><span class=\"line\">    os.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加命令\"><a href=\"#添加命令\" class=\"headerlink\" title=\"添加命令\"></a>添加命令</h3><p>添加的命令可以创建在cmd目录下单独的go文件，比如创建一个version命令：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cmd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">&quot;github.com/spf13/cobra&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  rootCmd.AddCommand(versionCmd)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> versionCmd = &amp;cobra.Command&#123;</span><br><span class=\"line\">  Use:   <span class=\"string\">&quot;version&quot;</span>,</span><br><span class=\"line\">  Short: <span class=\"string\">&quot;Print the version number of Hugo&quot;</span>,</span><br><span class=\"line\">  Long:  <span class=\"string\">`All software has versions. This is Hugo&#x27;s`</span>,</span><br><span class=\"line\">  Run: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(cmd *cobra.Command, args []<span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Hugo Static Site Generator v0.9 -- HEAD&quot;</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用flag\"><a href=\"#使用flag\" class=\"headerlink\" title=\"使用flag\"></a>使用flag</h3><p>我们有两种</p>\n<h2 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h2><h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><ol>\n<li><code>go mod init yourpackage</code> 创建你自己的模块</li>\n<li><code>go get -u github.com/spf13/cobra/cobra</code> 加载依赖</li>\n</ol>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><ol>\n<li><code>cobra init ./ -a longtao -l GPL --viper</code> 初始化包(在当前目录初始化cobra，作者是longtao,许可是gpl，并使用viper配置)</li>\n<li><code>go build  -o ./ .</code> 编译测试一下是否正常使用</li>\n</ol>\n","more":"<h2 id=\"cobra\"><a href=\"#cobra\" class=\"headerlink\" title=\"cobra\"></a>cobra</h2><p>cobra 是go的cli框架，包含cli库和生成基于cobra cli应用的命令行工具</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>子命令，如<code>app server</code>、<code>app sub</code>等</li>\n<li>完整兼容POSIX的flag，包括长命名和短命名</li>\n<li>子命令的嵌套（子命令）</li>\n<li>全局、本地、级联三种flag</li>\n<li>好用的工具命令，如<code>cobra init appname</code>初始化cli程序,<code>cobra add cmdname</code>为cli程序增加子命令</li>\n<li>智能提示</li>\n<li>生成命令help，以及为每个flag、cmd生成<code>-h</code>，<code>--help</code>帮助</li>\n<li>生成自动补全功能</li>\n<li>生成man帮助文档</li>\n<li>命令别名</li>\n<li>自定义帮助、用法</li>\n<li>为达到saas的12-factor 可选择viper</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><code>go get -u github.com/spf13/cobra/cobra</code>会自动安装最新版本库和命令行工具，国内下不下来可以手动下载放到对应的文件夹中，然后就可以在你的code里应用它<code>import &quot;github.com/spf13/cobra&quot;</code></p>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>cobra主要管理commands、args、flags，commands代表一个命令或动作，一般用动词命名，args代表输入的参数，一般用名词命名，flags是对commands的修饰，一般用形容词命名；好的cli应用应该学习成本低，用户容易理解 cli的含义，git的例子能很好的说明这一点: <code>git clone URL --bare</code> ，clone是commands是动词，URL是args是你的输入，bare是flag是形容词</p>\n<h3 id=\"commands\"><a href=\"#commands\" class=\"headerlink\" title=\"commands\"></a>commands</h3><p>commands是cli应用的核心，每次交互都包含在一个command中，command可以拥有可选的子命令（sub commands）</p>\n<h3 id=\"flags\"><a href=\"#flags\" class=\"headerlink\" title=\"flags\"></a>flags</h3><p>flag 是修饰command的一种方式，cobra支持完全兼容的POSIX flag以及go的 flag包，一个flag可以被定义成仅对当前命令生效或对当前及子孙命令生效（对于写代码时增加flag来说），flag功能由<a href=\"https://github.com/ogier/pflag\">pflag library</a>提供</p>\n<h2 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h2><p>虽然你可以自定义你自己的应用工程结构，但推荐你使用以下cobra-cli应用的典型结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">▾ appName&#x2F;</span><br><span class=\"line\">  ▾ cmd&#x2F;</span><br><span class=\"line\">      add.go</span><br><span class=\"line\">      your.go</span><br><span class=\"line\">      commands.go</span><br><span class=\"line\">      here.go</span><br><span class=\"line\">    main.go</span><br></pre></td></tr></table></figure>\n<p>在cobra应用中，main.go通常只提供初始化cobra的功能，like that</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;&#123;pathToYourApp&#125;/cmd&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  cmd.Execute()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用cobra生成工具\"><a href=\"#使用cobra生成工具\" class=\"headerlink\" title=\"使用cobra生成工具\"></a>使用cobra生成工具</h2><p>cobra提供了帮你生成模板的cli工具，有如下命令:</p>\n<h3 id=\"初始化应用init\"><a href=\"#初始化应用init\" class=\"headerlink\" title=\"初始化应用init\"></a>初始化应用init</h3><p><code>cobra init [name] [flags]</code>,name是你cobra应用的名字，<code>--pkg-name</code>pkg 的名字 flag可以选择<code>-a</code> 作者名，<code>-l</code>添加license,默认Apache2.0，<code>--viper</code>添加viper等功能，具体如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--pkg-name string   fully qualified pkg name</span><br><span class=\"line\">-a, --author string    author name for copyright attribution (default &quot;YOUR NAME&quot;)</span><br><span class=\"line\">    --config string    config file (default is $HOME&#x2F;.cobra.yaml)</span><br><span class=\"line\">-l, --license string   name of license for the project</span><br><span class=\"line\">    --viper            use Viper for configuration (default true)</span><br></pre></td></tr></table></figure>\n\n<p>初始化应用后一般<code>go mod init</code>初始化应用，golang基础，在此不赘述</p>\n<h3 id=\"添加commands\"><a href=\"#添加commands\" class=\"headerlink\" title=\"添加commands\"></a>添加commands</h3><p><code>cobra add [name] -p &#39;parentComand&#39;</code> <code>-p</code>可以为特定命令添加子命令，缺省为根命令</p>\n<h2 id=\"使用Cobra库\"><a href=\"#使用Cobra库\" class=\"headerlink\" title=\"使用Cobra库\"></a>使用Cobra库</h2><p>手动创建需要新建一个rootCmd文件,然后添加若干command</p>\n<h3 id=\"创建rootCmd\"><a href=\"#创建rootCmd\" class=\"headerlink\" title=\"创建rootCmd\"></a>创建rootCmd</h3><p>cobra不需要创建一个特定的实例，可以直接使用<code>&amp;cobra.Commaand</code>，如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> rootCmd = &amp;cobra.Command&#123;</span><br><span class=\"line\">  Use:   <span class=\"string\">&quot;hugo&quot;</span>, <span class=\"comment\">//command,代表命令</span></span><br><span class=\"line\">  Short: <span class=\"string\">&quot;Hugo is a very fast static site generator&quot;</span>, <span class=\"comment\">//对command的简短介绍</span></span><br><span class=\"line\">  Long: <span class=\"string\">`A Fast and Flexible Static Site Generator built with </span></span><br><span class=\"line\"><span class=\"string\">                love by spf13 and friends in Go.</span></span><br><span class=\"line\"><span class=\"string\">                Complete documentation is available at http://hugo.spf13.com`</span>, <span class=\"comment\">//对command的详细介绍</span></span><br><span class=\"line\">  Run: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(cmd *cobra.Command, args []<span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 命令实际要做的事情</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Execute</span><span class=\"params\">()</span></span> &#123; <span class=\"comment\">//启动</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> err := rootCmd.Execute(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Println(err)</span><br><span class=\"line\">    os.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你可以在init中定义flatgs以及处理配置，示例如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">  homedir <span class=\"string\">&quot;github.com/mitchellh/go-homedir&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;github.com/spf13/cobra&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;github.com/spf13/viper&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  cobra.OnInitialize(initConfig) <span class=\"comment\">//初始化配置</span></span><br><span class=\"line\">  rootCmd.PersistentFlags().StringVar(&amp;cfgFile, <span class=\"string\">&quot;config&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;config file (default is $HOME/.cobra.yaml)&quot;</span>)<span class=\"comment\">//配置</span></span><br><span class=\"line\">  rootCmd.PersistentFlags().StringVarP(&amp;projectBase, <span class=\"string\">&quot;projectbase&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;base project directory eg. github.com/spf13/&quot;</span>)</span><br><span class=\"line\">  rootCmd.PersistentFlags().StringP(<span class=\"string\">&quot;author&quot;</span>, <span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;YOUR NAME&quot;</span>, <span class=\"string\">&quot;Author name for copyright attribution&quot;</span>)</span><br><span class=\"line\">  rootCmd.PersistentFlags().StringVarP(&amp;userLicense, <span class=\"string\">&quot;license&quot;</span>, <span class=\"string\">&quot;l&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;Name of license for the project (can provide `licensetext` in config)&quot;</span>)</span><br><span class=\"line\">  rootCmd.PersistentFlags().Bool(<span class=\"string\">&quot;viper&quot;</span>, <span class=\"literal\">true</span>, <span class=\"string\">&quot;Use Viper for configuration&quot;</span>)</span><br><span class=\"line\">  viper.BindPFlag(<span class=\"string\">&quot;author&quot;</span>, rootCmd.PersistentFlags().Lookup(<span class=\"string\">&quot;author&quot;</span>))<span class=\"comment\">//绑定viper的标致到cobra</span></span><br><span class=\"line\">  viper.BindPFlag(<span class=\"string\">&quot;projectbase&quot;</span>, rootCmd.PersistentFlags().Lookup(<span class=\"string\">&quot;projectbase&quot;</span>))</span><br><span class=\"line\">  viper.BindPFlag(<span class=\"string\">&quot;useViper&quot;</span>, rootCmd.PersistentFlags().Lookup(<span class=\"string\">&quot;viper&quot;</span>))</span><br><span class=\"line\">  viper.SetDefault(<span class=\"string\">&quot;author&quot;</span>, <span class=\"string\">&quot;NAME HERE &lt;EMAIL ADDRESS&gt;&quot;</span>)</span><br><span class=\"line\">  viper.SetDefault(<span class=\"string\">&quot;license&quot;</span>, <span class=\"string\">&quot;apache&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">initConfig</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// viper读取配置文件</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> cfgFile != <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 从flag读取文件</span></span><br><span class=\"line\">    viper.SetConfigFile(cfgFile)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取主目录</span></span><br><span class=\"line\">    home, err := homedir.Dir()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      fmt.Println(err)</span><br><span class=\"line\">      os.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 查找文件.cobra</span></span><br><span class=\"line\">    viper.AddConfigPath(home)</span><br><span class=\"line\">    viper.SetConfigName(<span class=\"string\">&quot;.cobra&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err := viper.ReadInConfig(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Can&#x27;t read config:&quot;</span>, err)</span><br><span class=\"line\">    os.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加命令\"><a href=\"#添加命令\" class=\"headerlink\" title=\"添加命令\"></a>添加命令</h3><p>添加的命令可以创建在cmd目录下单独的go文件，比如创建一个version命令：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cmd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">&quot;github.com/spf13/cobra&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  rootCmd.AddCommand(versionCmd)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> versionCmd = &amp;cobra.Command&#123;</span><br><span class=\"line\">  Use:   <span class=\"string\">&quot;version&quot;</span>,</span><br><span class=\"line\">  Short: <span class=\"string\">&quot;Print the version number of Hugo&quot;</span>,</span><br><span class=\"line\">  Long:  <span class=\"string\">`All software has versions. This is Hugo&#x27;s`</span>,</span><br><span class=\"line\">  Run: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(cmd *cobra.Command, args []<span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Hugo Static Site Generator v0.9 -- HEAD&quot;</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用flag\"><a href=\"#使用flag\" class=\"headerlink\" title=\"使用flag\"></a>使用flag</h3><p>我们有两种</p>\n<h2 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h2><h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><ol>\n<li><code>go mod init yourpackage</code> 创建你自己的模块</li>\n<li><code>go get -u github.com/spf13/cobra/cobra</code> 加载依赖</li>\n</ol>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><ol>\n<li><code>cobra init ./ -a longtao -l GPL --viper</code> 初始化包(在当前目录初始化cobra，作者是longtao,许可是gpl，并使用viper配置)</li>\n<li><code>go build  -o ./ .</code> 编译测试一下是否正常使用</li>\n</ol>\n","categories":[{"name":"CS","path":"api/categories/CS.json"}],"tags":[{"name":"tool","path":"api/tags/tool.json"},{"name":"golang","path":"api/tags/golang.json"},{"name":"cli","path":"api/tags/cli.json"}]}