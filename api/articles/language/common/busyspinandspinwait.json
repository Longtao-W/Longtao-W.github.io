{"title":"自旋锁与忙等待","slug":"language/common/busyspinandspinwait","date":"2019-09-09T15:20:21.000Z","updated":"2024-06-30T10:35:56.304Z","comments":true,"path":"api/articles/language/common/busyspinandspinwait.json","excerpt":null,"covers":null,"content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>Busy Spin<br>忙碌的旋转<br>A technique which is used in a way that it loop is running until other thread have to complete his work.<br>一种技术，其使用方式是循环运行，直到其他线程必须完成他的工作。<br>Spin Wait<br>旋转等待<br>A spin wait that you have to wait until condition for thread is true.<br>一种旋转等待，您必须等待，直到线程的条件为真。<br>Spin Loop<br>自旋回路<br>Spin loop is also similar to both of above busy spin and wait spin. It means that threads have to wait for other thread for completing his work.<br>自旋环也类似于上述两种繁忙的自旋和等待自旋。这意味着线程必须等待其他线程完成他的工作。</p>\n<h2 id=\"暴论\"><a href=\"#暴论\" class=\"headerlink\" title=\"暴论\"></a>暴论</h2><p>我们常常听到自旋锁、忙等待、Spin Wait、Spin Loop 、Busy Wait、busy-waiting、busy-looping、 spinning等术语，其实他们都是一个东西。<br>维基百科这么描述<code>busy-waiting, busy-looping or spinning is a technique in which a repeatedly checks to see if a condition is true, such as whether keyboard input or a lock is available</code></p>\n<p>通俗来说就是在循环中判断（等待），不过正确实现自旋锁是很难的，这是因为可能有碰撞产生（例如锁竞争时同时访问锁）。不过我们可以使用一些支持原子操作的语句实现。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><h4 id=\"CAS-compare-and-swap-算法\"><a href=\"#CAS-compare-and-swap-算法\" class=\"headerlink\" title=\"CAS(compare and swap)算法\"></a>CAS(compare and swap)算法</h4><p>比较并交换(compare and swap, CAS)，是原子操作的一无锁算法。无锁编程使用，一般用于实现乐观锁，自旋锁</p>\n<p>缺点:ABA问题、循环时间长开销大、只能保证一个共享变量的原子操作</p>\n<p>java中实现自旋锁</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">spinLock</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//java 泛型；调用CAS库AtomicReference泛型类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AtomicReference&lt;Thread&gt; cas = <span class=\"keyword\">new</span> AtomicReference&lt;Thread&gt;();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Thread current = Thread.currentThread();</span><br><span class=\"line\">        <span class=\"comment\">// 利用CAS(Compare And Swap)</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!cas.compareAndSet(<span class=\"keyword\">null</span>, current)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// DO nothing</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">unlock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Thread current = Thread.currentThread();</span><br><span class=\"line\">        cas.compareAndSet(current, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>golang</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> spinLock <span class=\"keyword\">uint32</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(sl *spinLock)</span> <span class=\"title\">Lock</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> !atomic.CompareAndSwapUint32((*<span class=\"keyword\">uint32</span>)(sl), <span class=\"number\">0</span>, <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        runtime.Gosched()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(sl *spinLock)</span> <span class=\"title\">Unlock</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    atomic.StoreUint32((*<span class=\"keyword\">uint32</span>)(sl), <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewSpinLock</span><span class=\"params\">()</span> <span class=\"title\">sync</span>.<span class=\"title\">Locker</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lock spinLock</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;lock</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>Busy Spin<br>忙碌的旋转<br>A technique which is used in a way that it loop is running until other thread have to complete his work.<br>一种技术，其使用方式是循环运行，直到其他线程必须完成他的工作。<br>Spin Wait<br>旋转等待<br>A spin wait that you have to wait until condition for thread is true.<br>一种旋转等待，您必须等待，直到线程的条件为真。<br>Spin Loop<br>自旋回路<br>Spin loop is also similar to both of above busy spin and wait spin. It means that threads have to wait for other thread for completing his work.<br>自旋环也类似于上述两种繁忙的自旋和等待自旋。这意味着线程必须等待其他线程完成他的工作。</p>\n<h2 id=\"暴论\"><a href=\"#暴论\" class=\"headerlink\" title=\"暴论\"></a>暴论</h2><p>我们常常听到自旋锁、忙等待、Spin Wait、Spin Loop 、Busy Wait、busy-waiting、busy-looping、 spinning等术语，其实他们都是一个东西。<br>维基百科这么描述<code>busy-waiting, busy-looping or spinning is a technique in which a repeatedly checks to see if a condition is true, such as whether keyboard input or a lock is available</code></p>\n<p>通俗来说就是在循环中判断（等待），不过正确实现自旋锁是很难的，这是因为可能有碰撞产生（例如锁竞争时同时访问锁）。不过我们可以使用一些支持原子操作的语句实现。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><h4 id=\"CAS-compare-and-swap-算法\"><a href=\"#CAS-compare-and-swap-算法\" class=\"headerlink\" title=\"CAS(compare and swap)算法\"></a>CAS(compare and swap)算法</h4><p>比较并交换(compare and swap, CAS)，是原子操作的一无锁算法。无锁编程使用，一般用于实现乐观锁，自旋锁</p>\n<p>缺点:ABA问题、循环时间长开销大、只能保证一个共享变量的原子操作</p>\n<p>java中实现自旋锁</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">spinLock</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//java 泛型；调用CAS库AtomicReference泛型类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AtomicReference&lt;Thread&gt; cas = <span class=\"keyword\">new</span> AtomicReference&lt;Thread&gt;();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Thread current = Thread.currentThread();</span><br><span class=\"line\">        <span class=\"comment\">// 利用CAS(Compare And Swap)</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!cas.compareAndSet(<span class=\"keyword\">null</span>, current)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// DO nothing</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">unlock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Thread current = Thread.currentThread();</span><br><span class=\"line\">        cas.compareAndSet(current, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>golang</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> spinLock <span class=\"keyword\">uint32</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(sl *spinLock)</span> <span class=\"title\">Lock</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> !atomic.CompareAndSwapUint32((*<span class=\"keyword\">uint32</span>)(sl), <span class=\"number\">0</span>, <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        runtime.Gosched()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(sl *spinLock)</span> <span class=\"title\">Unlock</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    atomic.StoreUint32((*<span class=\"keyword\">uint32</span>)(sl), <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewSpinLock</span><span class=\"params\">()</span> <span class=\"title\">sync</span>.<span class=\"title\">Locker</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lock spinLock</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;lock</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":[{"name":"编程技术","path":"api/categories/编程技术.json"}],"tags":[{"name":"编程原理","path":"api/tags/编程原理.json"}]}