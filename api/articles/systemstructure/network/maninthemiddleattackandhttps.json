{"title":"中间人攻击与HTTPS","slug":"systemstructure/network/maninthemiddleattackandhttps","date":"2021-04-15T15:20:21.000Z","updated":"2024-06-30T10:35:56.308Z","comments":true,"path":"api/articles/systemstructure/network/maninthemiddleattackandhttps.json","excerpt":null,"covers":null,"content":"<p>[toc]</p>\n<h2 id=\"HTTP协议\"><a href=\"#HTTP协议\" class=\"headerlink\" title=\"HTTP协议\"></a>HTTP协议</h2><p>HTTP(hypertext transfer protocol )协议是一种七层协议，是万维网通信的基石，通常使用tcp协议(HTTP3使用quic(udp))，默认端口80</p>\n<h3 id=\"请求方法\"><a href=\"#请求方法\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h3><p>GET、HEAD：获取资源</p>\n<p>POST：上传资源</p>\n<p>PUT：修改资源</p>\n<p>DELETE：删除资源</p>\n<p>TRACE：回显请求</p>\n<p>OPTIONS：回复资源所有可用方法</p>\n<p>CONNECT：留给SSL加密使用</p>\n<h3 id=\"幂等性\"><a href=\"#幂等性\" class=\"headerlink\" title=\"幂等性\"></a>幂等性</h3><p>在函数式编程中，幂等函数是对任何值x具有f（f（x））= f（x）属性的函数，在编程领域，则意为同一个系统，使用同样的条件，一次请求和重复的多次请求对系统资源的影响是一致的</p>\n<p>GET、HEAD、PUT、DELETE、OPTIONS、TRACE都是幂等的，而GET、HEAD、OPTIONS、TRACE一般来说没有副作用。</p>\n<h3 id=\"状态码\"><a href=\"#状态码\" class=\"headerlink\" title=\"状态码\"></a>状态码</h3><ul>\n<li>1xx消息：请求已被服务器接收，继续处理</li>\n<li>2xx成功：请求成功</li>\n<li>3xx重定向：重定向</li>\n<li>4xx请求错误：客户端错误</li>\n<li>5xx服务器错误：服务器错误</li>\n</ul>\n<h3 id=\"HTTP-keeep-alive\"><a href=\"#HTTP-keeep-alive\" class=\"headerlink\" title=\"HTTP keeep-alive\"></a>HTTP keeep-alive</h3><p>HTTP1.1加入</p>\n<p>优点：同时打开的TCP链接少了、降低延时</p>\n<p>缺点：请求后保持链接，可能会影响性能</p>\n<h2 id=\"HTTPS\"><a href=\"#HTTPS\" class=\"headerlink\" title=\"HTTPS\"></a>HTTPS</h2><p>HTTPS(hypertext transfer protocol secure)是使用HTTP通信，使用SSL/TLS加密数据包，默认端口443</p>\n<h3 id=\"传输过程\"><a href=\"#传输过程\" class=\"headerlink\" title=\"传输过程\"></a>传输过程</h3><p>证书验证阶段：</p>\n<ol>\n<li>浏览器发起HTTPS请求</li>\n<li>服务端返回HTTPS证书和SSL非对称加密公钥</li>\n<li>浏览器，验证HTTPS证书合法性，合法就生成随机数</li>\n</ol>\n<p>传输阶段：</p>\n<ol>\n<li>浏览器通过SSL公钥加密随机数，传输到服务端</li>\n<li>服务端通过SSL私钥解密，通过随机数构造对称加密(TLS)，通过TLS传输</li>\n</ol>\n<h4 id=\"如何验证证书合法性\"><a href=\"#如何验证证书合法性\" class=\"headerlink\" title=\"如何验证证书合法性\"></a>如何验证证书合法性</h4><p>证书包含：公钥、持有者信息、证书机构信息(CA)、数字签名和算法、有效期等</p>\n<p>证书签发：</p>\n<ol>\n<li>CA把各种信息打包通过计算得到hash值</li>\n<li>CA使用私钥对hash值加密生成证书签名</li>\n<li>将证书签名加到文件证书上，形成数字证书</li>\n</ol>\n<p>证书校验：</p>\n<ol>\n<li>浏览器通过同样hash算法得到hash值</li>\n<li>浏览器用公钥对CA数字签名解密与自己算的hash值比较，若相同就是可信的</li>\n</ol>\n<p>证书信任链：通过当前证书-中间证书-根证书逐级担保信任</p>\n<h2 id=\"中间人攻击\"><a href=\"#中间人攻击\" class=\"headerlink\" title=\"中间人攻击\"></a>中间人攻击</h2><p>A与C进行通信时，需要经过B进行传输，B获取了A和C的通话信息，B分别伪装成A和C通信，伪装成C和A通信</p>\n<h3 id=\"非对称加密场景\"><a href=\"#非对称加密场景\" class=\"headerlink\" title=\"非对称加密场景\"></a>非对称加密场景</h3><p>A发送公钥给C时，B作为中间人攻击，B也生成公私钥，B将自己的公钥发给C和C通信，B通过A发送的公钥和A通信</p>\n<h3 id=\"HTTPS中的中间人攻击\"><a href=\"#HTTPS中的中间人攻击\" class=\"headerlink\" title=\"HTTPS中的中间人攻击\"></a>HTTPS中的中间人攻击</h3><p>在缺少证书验证环节时，可以进行HTTPS中间人攻击，具体流程如下</p>\n<ol>\n<li>A与C进行通信时，本地请求劫持，B成为中间人</li>\n<li>B返回自己伪造的证书给A，B与C通信</li>\n<li>A不会验证证书，直接创建随机数，与B进行通信</li>\n<li>B与C按照正常流程进行通信</li>\n</ol>\n","more":"<p>[toc]</p>\n<h2 id=\"HTTP协议\"><a href=\"#HTTP协议\" class=\"headerlink\" title=\"HTTP协议\"></a>HTTP协议</h2><p>HTTP(hypertext transfer protocol )协议是一种七层协议，是万维网通信的基石，通常使用tcp协议(HTTP3使用quic(udp))，默认端口80</p>\n<h3 id=\"请求方法\"><a href=\"#请求方法\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h3><p>GET、HEAD：获取资源</p>\n<p>POST：上传资源</p>\n<p>PUT：修改资源</p>\n<p>DELETE：删除资源</p>\n<p>TRACE：回显请求</p>\n<p>OPTIONS：回复资源所有可用方法</p>\n<p>CONNECT：留给SSL加密使用</p>\n<h3 id=\"幂等性\"><a href=\"#幂等性\" class=\"headerlink\" title=\"幂等性\"></a>幂等性</h3><p>在函数式编程中，幂等函数是对任何值x具有f（f（x））= f（x）属性的函数，在编程领域，则意为同一个系统，使用同样的条件，一次请求和重复的多次请求对系统资源的影响是一致的</p>\n<p>GET、HEAD、PUT、DELETE、OPTIONS、TRACE都是幂等的，而GET、HEAD、OPTIONS、TRACE一般来说没有副作用。</p>\n<h3 id=\"状态码\"><a href=\"#状态码\" class=\"headerlink\" title=\"状态码\"></a>状态码</h3><ul>\n<li>1xx消息：请求已被服务器接收，继续处理</li>\n<li>2xx成功：请求成功</li>\n<li>3xx重定向：重定向</li>\n<li>4xx请求错误：客户端错误</li>\n<li>5xx服务器错误：服务器错误</li>\n</ul>\n<h3 id=\"HTTP-keeep-alive\"><a href=\"#HTTP-keeep-alive\" class=\"headerlink\" title=\"HTTP keeep-alive\"></a>HTTP keeep-alive</h3><p>HTTP1.1加入</p>\n<p>优点：同时打开的TCP链接少了、降低延时</p>\n<p>缺点：请求后保持链接，可能会影响性能</p>\n<h2 id=\"HTTPS\"><a href=\"#HTTPS\" class=\"headerlink\" title=\"HTTPS\"></a>HTTPS</h2><p>HTTPS(hypertext transfer protocol secure)是使用HTTP通信，使用SSL/TLS加密数据包，默认端口443</p>\n<h3 id=\"传输过程\"><a href=\"#传输过程\" class=\"headerlink\" title=\"传输过程\"></a>传输过程</h3><p>证书验证阶段：</p>\n<ol>\n<li>浏览器发起HTTPS请求</li>\n<li>服务端返回HTTPS证书和SSL非对称加密公钥</li>\n<li>浏览器，验证HTTPS证书合法性，合法就生成随机数</li>\n</ol>\n<p>传输阶段：</p>\n<ol>\n<li>浏览器通过SSL公钥加密随机数，传输到服务端</li>\n<li>服务端通过SSL私钥解密，通过随机数构造对称加密(TLS)，通过TLS传输</li>\n</ol>\n<h4 id=\"如何验证证书合法性\"><a href=\"#如何验证证书合法性\" class=\"headerlink\" title=\"如何验证证书合法性\"></a>如何验证证书合法性</h4><p>证书包含：公钥、持有者信息、证书机构信息(CA)、数字签名和算法、有效期等</p>\n<p>证书签发：</p>\n<ol>\n<li>CA把各种信息打包通过计算得到hash值</li>\n<li>CA使用私钥对hash值加密生成证书签名</li>\n<li>将证书签名加到文件证书上，形成数字证书</li>\n</ol>\n<p>证书校验：</p>\n<ol>\n<li>浏览器通过同样hash算法得到hash值</li>\n<li>浏览器用公钥对CA数字签名解密与自己算的hash值比较，若相同就是可信的</li>\n</ol>\n<p>证书信任链：通过当前证书-中间证书-根证书逐级担保信任</p>\n<h2 id=\"中间人攻击\"><a href=\"#中间人攻击\" class=\"headerlink\" title=\"中间人攻击\"></a>中间人攻击</h2><p>A与C进行通信时，需要经过B进行传输，B获取了A和C的通话信息，B分别伪装成A和C通信，伪装成C和A通信</p>\n<h3 id=\"非对称加密场景\"><a href=\"#非对称加密场景\" class=\"headerlink\" title=\"非对称加密场景\"></a>非对称加密场景</h3><p>A发送公钥给C时，B作为中间人攻击，B也生成公私钥，B将自己的公钥发给C和C通信，B通过A发送的公钥和A通信</p>\n<h3 id=\"HTTPS中的中间人攻击\"><a href=\"#HTTPS中的中间人攻击\" class=\"headerlink\" title=\"HTTPS中的中间人攻击\"></a>HTTPS中的中间人攻击</h3><p>在缺少证书验证环节时，可以进行HTTPS中间人攻击，具体流程如下</p>\n<ol>\n<li>A与C进行通信时，本地请求劫持，B成为中间人</li>\n<li>B返回自己伪造的证书给A，B与C通信</li>\n<li>A不会验证证书，直接创建随机数，与B进行通信</li>\n<li>B与C按照正常流程进行通信</li>\n</ol>\n","categories":[{"name":"编程技术","path":"api/categories/编程技术.json"}],"tags":[{"name":"编程原理","path":"api/tags/编程原理.json"},{"name":"网络","path":"api/tags/网络.json"}]}