{"title":"Linux瓶颈分析","slug":"systemstructure/linux/linuxperformanceanalysis","date":"2021-05-05T15:20:21.000Z","updated":"2024-06-30T10:35:56.308Z","comments":true,"path":"api/articles/systemstructure/linux/linuxperformanceanalysis.json","excerpt":null,"covers":["https://cdn.jsdelivr.net/gh/Longtao-W/pics@main/20211025/1635139608R-C.d63f9367c74e1dca73ffbcae473118fa?rik=c734OLrGXr8BPg&riu=http://www.brendangregg.com/Perf/linux_observability_tools.png&ehk=nHWnEkal2z+T0vbSwBOdhejyU03bFpVvmJxFTX6A9tA=&risl=&pid=ImgRaw&r=0"],"content":"<h3 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h3><p>性能优化一项最重要的步骤就是寻找到系统的瓶颈</p>\n<h5 id=\"粗略分析\"><a href=\"#粗略分析\" class=\"headerlink\" title=\"粗略分析\"></a>粗略分析</h5><p>系统响应慢，一般的瓶颈在IO、CPU、内存还有应用。</p>\n<p>使用top查看</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[root@172-20-59-60 apt_ui]# top</span><br><span class=\"line\">top - 15:59:31 up 6 days,  1:10,  3 users,  load average: 0.00, 0.01, 0.05</span><br><span class=\"line\">Tasks: 144 total,   1 running, 142 sleeping,   0 stopped,   1 zombie</span><br><span class=\"line\"><span class=\"meta\">%</span><span class=\"bash\">Cpu(s):  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span></span><br><span class=\"line\">KiB Mem :  8009636 total,  5126364 free,  2307032 used,   576240 buff/cache</span><br><span class=\"line\">KiB Swap:        0 total,        0 free,        0 used.  5396772 avail Mem</span><br><span class=\"line\"></span><br><span class=\"line\">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND</span><br><span class=\"line\"> 9307 root      20   0  620968  28320   6064 S   0.0  0.4   3:39.37 python3</span><br><span class=\"line\">  861 root      20   0  567404  16752   5992 S   0.0  0.2   0:57.56 tuned</span><br><span class=\"line\">  651 root      20   0   21684   1324    988 S   0.0  0.0   0:47.08 irqbalance</span><br><span class=\"line\">  662 avahi     20   0   55952   2392   1920 S   0.0  0.0   0:35.02 avahi-daemon</span><br><span class=\"line\">  809 root      20   0  113440  12796    308 S   0.0  0.2   0:24.29 dhclient</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li> 输入M，进程列表按内存使用大小降序排序，便于我们观察最大内存使用者使用有问题</li>\n<li> 输入P，进程列表按CPU使用大小降序排序，便于我们观察最耗CPU资源</li>\n<li> 100.0 id 空闲CPU时间百分比，如果这个值过低，表明系统CPU存在瓶颈</li>\n<li> 0.0 wa 等待I/O的CPU时间百分比，如果这个值过高，表明IO存在瓶颈</li>\n</ol>\n<h5 id=\"内存瓶颈\"><a href=\"#内存瓶颈\" class=\"headerlink\" title=\"内存瓶颈\"></a>内存瓶颈</h5><p>一般使用free工具</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[root@172-20-59-60 apt_ui]# free</span><br><span class=\"line\">              total        used        free      shared  buff/cache   available</span><br><span class=\"line\">Mem:        8009636     2306408     5126984       25144      576244     5397396</span><br><span class=\"line\">Swap:             0           0           0</span><br></pre></td></tr></table></figure>\n\n<p>缺省时free的单位为KB</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>total</td>\n<td>总物理内存大小</td>\n</tr>\n<tr>\n<td>used</td>\n<td>已使用物理内存大小</td>\n</tr>\n<tr>\n<td>free</td>\n<td>未分配物理内存大小</td>\n</tr>\n<tr>\n<td>shared</td>\n<td>共享的物理内存大小</td>\n</tr>\n<tr>\n<td>buff/cache</td>\n<td>为了提高系统的读写速度（包含磁盘块的读写，文件的读写等），操作系统将部分内存作为缓存使用，该数值为缓存占用的物理内存大小</td>\n</tr>\n<tr>\n<td>available</td>\n<td>可用的物理内存大小</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>total</td>\n<td>Swap 分区的总大小</td>\n</tr>\n<tr>\n<td>used</td>\n<td>已使用的 Swap 分区大小</td>\n</tr>\n<tr>\n<td>free</td>\n<td>未使用的 Swap 分区大小</td>\n</tr>\n</tbody></table>\n<p>根据上表，在不考虑 Swap 分区的情况下，内存计算如下：<br>总内存大小：Mem.total = Mem.used + Mem.free + Mem.shared + Mem.buff/cache<br>理论上实际可用内存大小：Mem.actual = Mem.total - Mem.used - Mem.shared = Mem.free + Mem.buff/cache</p>\n<p>在考虑 Swap 分区的情况下，内存计算如下：<br>总内存大小：Mem.total = Mem.used + Mem.free + Mem.shared + Mem.buff/cache<br>理论上实际可用内存大小：Mem.actual = Mem.total - Mem.used - Mem.shared + Swap.free = Mem.free + Mem.buff/cache + Swap.free</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>PageCache.size</td>\n<td>可以回收的 PageCache 大小，计算公式见上图</td>\n</tr>\n<tr>\n<td>SlabCache.size</td>\n<td>可以回收的 SlabCache 大小 ，计算公式见上图</td>\n</tr>\n<tr>\n<td>WaterMark.low</td>\n<td>支持系统使用的最低水位线，计算公式见上图</td>\n</tr>\n</tbody></table>\n<p>Mem.available = Mem.free + PageCache.size + SlabCache.size - WaterMark.low</p>\n<p>进一步的监视内存使用情况，可使用vmstat工具，可实时动态监视操作系统的内存和虚拟内存的动态变化使用情况</p>\n<p>vmstat [delay] [count] </p>\n<ul>\n<li>  delay是两次输出之间的延迟时间；</li>\n<li>  count是指按照这个时间间隔统计的次数。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[root@172-20-59-60 apt_ui]# vmstat 1 3</span><br><span class=\"line\">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class=\"line\"> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</span><br><span class=\"line\"> 1  0      0 5126380   2068 574208    0    0     0    22    4    8  0  0 100  0  0</span><br><span class=\"line\"> 0  0      0 5126488   2068 574208    0    0     0     0  422   53  0  0 100  0  0</span><br><span class=\"line\"> 0  0      0 5126488   2068 574208    0    0     0     0  392   49  0  0 100  0  0</span><br></pre></td></tr></table></figure>\n\n<p>Procs（进程）:</p>\n<ul>\n<li>  r: 运行队列中进程数量</li>\n<li>  b: 等待IO的进程数量</li>\n</ul>\n<p>Memory（内存）:</p>\n<ul>\n<li>  swpd: 使用虚拟内存大小</li>\n<li>  free: 可用内存大小</li>\n<li>  buff: 用作缓冲的内存大小</li>\n<li>  cache: 用作缓存的内存大小</li>\n</ul>\n<p>Swap:</p>\n<ul>\n<li>  si: 每秒从交换区写到内存的大小</li>\n<li>  so: 每秒写入交换区的内存大小</li>\n</ul>\n<p>IO：（现在的Linux版本块的大小为1024bytes）</p>\n<ul>\n<li>  bi: 每秒读取的块数</li>\n<li>  bo: 每秒写入的块数</li>\n</ul>\n<p>system：</p>\n<ul>\n<li>  in: 每秒中断数，包括时钟中断</li>\n<li>  cs: 每秒上下文切换数</li>\n</ul>\n<p>CPU（以百分比表示）</p>\n<ul>\n<li>  us: 用户进程执行时间(user time)</li>\n<li>  sy: 系统进程执行时间(system time)</li>\n<li>  id: 空闲时间(包括IO等待时间)</li>\n<li>  wa: 等待IO时间</li>\n</ul>\n<p>内存测试工具我们使用Stream，基准测试，注意数据仅在相同软件相同版本有比较价值</p>\n<h5 id=\"IO瓶颈\"><a href=\"#IO瓶颈\" class=\"headerlink\" title=\"IO瓶颈\"></a>IO瓶颈</h5><p>如果IO存在性能瓶颈，top工具中的%wa会偏高</p>\n<p>可使用iostat 进一步分析</p>\n<p>iostat　[paras] [delay] [count] </p>\n<ul>\n<li>  -c显示CPU使用情况</li>\n<li>  -d 显示磁盘使用情况</li>\n<li>  -k 以 KB 为单位显示</li>\n<li>  -m 以 M 为单位显示</li>\n<li>  -N 显示磁盘阵列(LVM) 信息</li>\n<li>  -p[磁盘] 显示磁盘和分区的情况</li>\n<li>  -t 显示终端和CPU的信息</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@172-20-59-60 apt_ui]# iostat 3 3</span><br><span class=\"line\">Linux 3.10.0-693.el7.x86_64 (172-20-59-60)      12/31/2020      _x86_64_        (8 CPU)</span><br><span class=\"line\"></span><br><span class=\"line\">avg-cpu:  %user   %nice %system %iowait  %steal   %idle</span><br><span class=\"line\">           0.03    0.00    0.02    0.02    0.00   99.93</span><br><span class=\"line\"></span><br><span class=\"line\">Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn</span><br><span class=\"line\">vda               0.08         0.59         0.88     308042     462261</span><br><span class=\"line\">vdb               0.52         0.01       176.61       6256   92643328</span><br><span class=\"line\"></span><br><span class=\"line\">avg-cpu:  %user   %nice %system %iowait  %steal   %idle</span><br><span class=\"line\">           0.04    0.00    0.00    0.00    0.00   99.96</span><br><span class=\"line\"></span><br><span class=\"line\">Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn</span><br><span class=\"line\">vda               0.00         0.00         0.00          0          0</span><br><span class=\"line\">vdb               0.00         0.00         0.00          0          0</span><br><span class=\"line\"></span><br><span class=\"line\">avg-cpu:  %user   %nice %system %iowait  %steal   %idle</span><br><span class=\"line\">           0.00    0.00    0.00    0.00    0.00  100.00</span><br><span class=\"line\"></span><br><span class=\"line\">Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn</span><br><span class=\"line\">vda               0.00         0.00         0.00          0          0</span><br><span class=\"line\">vdb               0.00         0.00         0.00          0          0</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>  %user：CPU处在用户模式下的时间百分比。</li>\n<li>  %nice：CPU处在带NICE值的用户模式下的时间百分比。</li>\n<li>  %system：CPU处在系统模式下的时间百分比。</li>\n<li>  %iowait：CPU等待输入输出完成时间的百分比。</li>\n<li>  %steal：管理程序维护另一个虚拟处理器时，虚拟CPU的无意识等待时间百分比。</li>\n<li>  %idle：CPU空闲时间百分比。</li>\n<li>  rrqm/s: 每秒进行 merge 的读操作数目。即 rmerge/s</li>\n<li>  wrqm/s: 每秒进行 merge 的写操作数目。即 wmerge/s</li>\n<li>  r/s: 每秒完成的读 I/O 设备次数。即 rio/s</li>\n<li>  w/s: 每秒完成的写 I/O 设备次数。即 wio/s</li>\n<li>  rsec/s: 每秒读扇区数。即 rsect/s</li>\n<li>  wsec/s: 每秒写扇区数。即 wsect/s</li>\n<li>  rkB/s: 每秒读K字节数。是 rsect/s 的一半，因为每扇区大小为512字节。</li>\n<li>  wkB/s: 每秒写K字节数。是 wsect/s 的一半。</li>\n<li>  avgrq-sz: 平均每次设备I/O操作的数据大小 (扇区)。</li>\n<li>  avgqu-sz: 平均I/O队列长度。</li>\n<li>  await: 平均每次设备I/O操作的等待时间 (毫秒)。</li>\n<li>  svctm: 平均每次设备I/O操作的服务时间 (毫秒)。</li>\n<li>  %util: 一秒中有百分之多少的时间用于 I/O 操作，即被io消耗的cpu百分比</li>\n</ul>\n<p>磁盘测试工具我们一般使用iperf3，注意数据仅在相同软件相同版本有比较价值</p>\n<h3 id=\"性能测试工具\"><a href=\"#性能测试工具\" class=\"headerlink\" title=\"性能测试工具\"></a>性能测试工具</h3><p><img src= \"/img/loading.gif\" data-lazy-src=\"https://cdn.jsdelivr.net/gh/Longtao-W/pics@main/20211025/1635139608R-C.d63f9367c74e1dca73ffbcae473118fa?rik=c734OLrGXr8BPg&riu=http://www.brendangregg.com/Perf/linux_observability_tools.png&ehk=nHWnEkal2z+T0vbSwBOdhejyU03bFpVvmJxFTX6A9tA=&risl=&pid=ImgRaw&r=0\" alt=\"See the source image\"></p>\n","more":"<h3 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h3><p>性能优化一项最重要的步骤就是寻找到系统的瓶颈</p>\n<h5 id=\"粗略分析\"><a href=\"#粗略分析\" class=\"headerlink\" title=\"粗略分析\"></a>粗略分析</h5><p>系统响应慢，一般的瓶颈在IO、CPU、内存还有应用。</p>\n<p>使用top查看</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[root@172-20-59-60 apt_ui]# top</span><br><span class=\"line\">top - 15:59:31 up 6 days,  1:10,  3 users,  load average: 0.00, 0.01, 0.05</span><br><span class=\"line\">Tasks: 144 total,   1 running, 142 sleeping,   0 stopped,   1 zombie</span><br><span class=\"line\"><span class=\"meta\">%</span><span class=\"bash\">Cpu(s):  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span></span><br><span class=\"line\">KiB Mem :  8009636 total,  5126364 free,  2307032 used,   576240 buff/cache</span><br><span class=\"line\">KiB Swap:        0 total,        0 free,        0 used.  5396772 avail Mem</span><br><span class=\"line\"></span><br><span class=\"line\">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND</span><br><span class=\"line\"> 9307 root      20   0  620968  28320   6064 S   0.0  0.4   3:39.37 python3</span><br><span class=\"line\">  861 root      20   0  567404  16752   5992 S   0.0  0.2   0:57.56 tuned</span><br><span class=\"line\">  651 root      20   0   21684   1324    988 S   0.0  0.0   0:47.08 irqbalance</span><br><span class=\"line\">  662 avahi     20   0   55952   2392   1920 S   0.0  0.0   0:35.02 avahi-daemon</span><br><span class=\"line\">  809 root      20   0  113440  12796    308 S   0.0  0.2   0:24.29 dhclient</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li> 输入M，进程列表按内存使用大小降序排序，便于我们观察最大内存使用者使用有问题</li>\n<li> 输入P，进程列表按CPU使用大小降序排序，便于我们观察最耗CPU资源</li>\n<li> 100.0 id 空闲CPU时间百分比，如果这个值过低，表明系统CPU存在瓶颈</li>\n<li> 0.0 wa 等待I/O的CPU时间百分比，如果这个值过高，表明IO存在瓶颈</li>\n</ol>\n<h5 id=\"内存瓶颈\"><a href=\"#内存瓶颈\" class=\"headerlink\" title=\"内存瓶颈\"></a>内存瓶颈</h5><p>一般使用free工具</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[root@172-20-59-60 apt_ui]# free</span><br><span class=\"line\">              total        used        free      shared  buff/cache   available</span><br><span class=\"line\">Mem:        8009636     2306408     5126984       25144      576244     5397396</span><br><span class=\"line\">Swap:             0           0           0</span><br></pre></td></tr></table></figure>\n\n<p>缺省时free的单位为KB</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>total</td>\n<td>总物理内存大小</td>\n</tr>\n<tr>\n<td>used</td>\n<td>已使用物理内存大小</td>\n</tr>\n<tr>\n<td>free</td>\n<td>未分配物理内存大小</td>\n</tr>\n<tr>\n<td>shared</td>\n<td>共享的物理内存大小</td>\n</tr>\n<tr>\n<td>buff/cache</td>\n<td>为了提高系统的读写速度（包含磁盘块的读写，文件的读写等），操作系统将部分内存作为缓存使用，该数值为缓存占用的物理内存大小</td>\n</tr>\n<tr>\n<td>available</td>\n<td>可用的物理内存大小</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>total</td>\n<td>Swap 分区的总大小</td>\n</tr>\n<tr>\n<td>used</td>\n<td>已使用的 Swap 分区大小</td>\n</tr>\n<tr>\n<td>free</td>\n<td>未使用的 Swap 分区大小</td>\n</tr>\n</tbody></table>\n<p>根据上表，在不考虑 Swap 分区的情况下，内存计算如下：<br>总内存大小：Mem.total = Mem.used + Mem.free + Mem.shared + Mem.buff/cache<br>理论上实际可用内存大小：Mem.actual = Mem.total - Mem.used - Mem.shared = Mem.free + Mem.buff/cache</p>\n<p>在考虑 Swap 分区的情况下，内存计算如下：<br>总内存大小：Mem.total = Mem.used + Mem.free + Mem.shared + Mem.buff/cache<br>理论上实际可用内存大小：Mem.actual = Mem.total - Mem.used - Mem.shared + Swap.free = Mem.free + Mem.buff/cache + Swap.free</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>PageCache.size</td>\n<td>可以回收的 PageCache 大小，计算公式见上图</td>\n</tr>\n<tr>\n<td>SlabCache.size</td>\n<td>可以回收的 SlabCache 大小 ，计算公式见上图</td>\n</tr>\n<tr>\n<td>WaterMark.low</td>\n<td>支持系统使用的最低水位线，计算公式见上图</td>\n</tr>\n</tbody></table>\n<p>Mem.available = Mem.free + PageCache.size + SlabCache.size - WaterMark.low</p>\n<p>进一步的监视内存使用情况，可使用vmstat工具，可实时动态监视操作系统的内存和虚拟内存的动态变化使用情况</p>\n<p>vmstat [delay] [count] </p>\n<ul>\n<li>  delay是两次输出之间的延迟时间；</li>\n<li>  count是指按照这个时间间隔统计的次数。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[root@172-20-59-60 apt_ui]# vmstat 1 3</span><br><span class=\"line\">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class=\"line\"> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</span><br><span class=\"line\"> 1  0      0 5126380   2068 574208    0    0     0    22    4    8  0  0 100  0  0</span><br><span class=\"line\"> 0  0      0 5126488   2068 574208    0    0     0     0  422   53  0  0 100  0  0</span><br><span class=\"line\"> 0  0      0 5126488   2068 574208    0    0     0     0  392   49  0  0 100  0  0</span><br></pre></td></tr></table></figure>\n\n<p>Procs（进程）:</p>\n<ul>\n<li>  r: 运行队列中进程数量</li>\n<li>  b: 等待IO的进程数量</li>\n</ul>\n<p>Memory（内存）:</p>\n<ul>\n<li>  swpd: 使用虚拟内存大小</li>\n<li>  free: 可用内存大小</li>\n<li>  buff: 用作缓冲的内存大小</li>\n<li>  cache: 用作缓存的内存大小</li>\n</ul>\n<p>Swap:</p>\n<ul>\n<li>  si: 每秒从交换区写到内存的大小</li>\n<li>  so: 每秒写入交换区的内存大小</li>\n</ul>\n<p>IO：（现在的Linux版本块的大小为1024bytes）</p>\n<ul>\n<li>  bi: 每秒读取的块数</li>\n<li>  bo: 每秒写入的块数</li>\n</ul>\n<p>system：</p>\n<ul>\n<li>  in: 每秒中断数，包括时钟中断</li>\n<li>  cs: 每秒上下文切换数</li>\n</ul>\n<p>CPU（以百分比表示）</p>\n<ul>\n<li>  us: 用户进程执行时间(user time)</li>\n<li>  sy: 系统进程执行时间(system time)</li>\n<li>  id: 空闲时间(包括IO等待时间)</li>\n<li>  wa: 等待IO时间</li>\n</ul>\n<p>内存测试工具我们使用Stream，基准测试，注意数据仅在相同软件相同版本有比较价值</p>\n<h5 id=\"IO瓶颈\"><a href=\"#IO瓶颈\" class=\"headerlink\" title=\"IO瓶颈\"></a>IO瓶颈</h5><p>如果IO存在性能瓶颈，top工具中的%wa会偏高</p>\n<p>可使用iostat 进一步分析</p>\n<p>iostat　[paras] [delay] [count] </p>\n<ul>\n<li>  -c显示CPU使用情况</li>\n<li>  -d 显示磁盘使用情况</li>\n<li>  -k 以 KB 为单位显示</li>\n<li>  -m 以 M 为单位显示</li>\n<li>  -N 显示磁盘阵列(LVM) 信息</li>\n<li>  -p[磁盘] 显示磁盘和分区的情况</li>\n<li>  -t 显示终端和CPU的信息</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@172-20-59-60 apt_ui]# iostat 3 3</span><br><span class=\"line\">Linux 3.10.0-693.el7.x86_64 (172-20-59-60)      12/31/2020      _x86_64_        (8 CPU)</span><br><span class=\"line\"></span><br><span class=\"line\">avg-cpu:  %user   %nice %system %iowait  %steal   %idle</span><br><span class=\"line\">           0.03    0.00    0.02    0.02    0.00   99.93</span><br><span class=\"line\"></span><br><span class=\"line\">Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn</span><br><span class=\"line\">vda               0.08         0.59         0.88     308042     462261</span><br><span class=\"line\">vdb               0.52         0.01       176.61       6256   92643328</span><br><span class=\"line\"></span><br><span class=\"line\">avg-cpu:  %user   %nice %system %iowait  %steal   %idle</span><br><span class=\"line\">           0.04    0.00    0.00    0.00    0.00   99.96</span><br><span class=\"line\"></span><br><span class=\"line\">Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn</span><br><span class=\"line\">vda               0.00         0.00         0.00          0          0</span><br><span class=\"line\">vdb               0.00         0.00         0.00          0          0</span><br><span class=\"line\"></span><br><span class=\"line\">avg-cpu:  %user   %nice %system %iowait  %steal   %idle</span><br><span class=\"line\">           0.00    0.00    0.00    0.00    0.00  100.00</span><br><span class=\"line\"></span><br><span class=\"line\">Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn</span><br><span class=\"line\">vda               0.00         0.00         0.00          0          0</span><br><span class=\"line\">vdb               0.00         0.00         0.00          0          0</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>  %user：CPU处在用户模式下的时间百分比。</li>\n<li>  %nice：CPU处在带NICE值的用户模式下的时间百分比。</li>\n<li>  %system：CPU处在系统模式下的时间百分比。</li>\n<li>  %iowait：CPU等待输入输出完成时间的百分比。</li>\n<li>  %steal：管理程序维护另一个虚拟处理器时，虚拟CPU的无意识等待时间百分比。</li>\n<li>  %idle：CPU空闲时间百分比。</li>\n<li>  rrqm/s: 每秒进行 merge 的读操作数目。即 rmerge/s</li>\n<li>  wrqm/s: 每秒进行 merge 的写操作数目。即 wmerge/s</li>\n<li>  r/s: 每秒完成的读 I/O 设备次数。即 rio/s</li>\n<li>  w/s: 每秒完成的写 I/O 设备次数。即 wio/s</li>\n<li>  rsec/s: 每秒读扇区数。即 rsect/s</li>\n<li>  wsec/s: 每秒写扇区数。即 wsect/s</li>\n<li>  rkB/s: 每秒读K字节数。是 rsect/s 的一半，因为每扇区大小为512字节。</li>\n<li>  wkB/s: 每秒写K字节数。是 wsect/s 的一半。</li>\n<li>  avgrq-sz: 平均每次设备I/O操作的数据大小 (扇区)。</li>\n<li>  avgqu-sz: 平均I/O队列长度。</li>\n<li>  await: 平均每次设备I/O操作的等待时间 (毫秒)。</li>\n<li>  svctm: 平均每次设备I/O操作的服务时间 (毫秒)。</li>\n<li>  %util: 一秒中有百分之多少的时间用于 I/O 操作，即被io消耗的cpu百分比</li>\n</ul>\n<p>磁盘测试工具我们一般使用iperf3，注意数据仅在相同软件相同版本有比较价值</p>\n<h3 id=\"性能测试工具\"><a href=\"#性能测试工具\" class=\"headerlink\" title=\"性能测试工具\"></a>性能测试工具</h3><p><img src=\"https://cdn.jsdelivr.net/gh/Longtao-W/pics@main/20211025/1635139608R-C.d63f9367c74e1dca73ffbcae473118fa?rik=c734OLrGXr8BPg&riu=http://www.brendangregg.com/Perf/linux_observability_tools.png&ehk=nHWnEkal2z+T0vbSwBOdhejyU03bFpVvmJxFTX6A9tA=&risl=&pid=ImgRaw&r=0\" alt=\"See the source image\"></p>\n","categories":[{"name":"编程技术","path":"api/categories/编程技术.json"}],"tags":[{"name":"编程原理","path":"api/tags/编程原理.json"},{"name":"linux","path":"api/tags/linux.json"}]}