{"title":"Linux IO模式","slug":"systemstructure/linux/linuxio","date":"2021-03-25T13:20:21.000Z","updated":"2024-06-30T10:35:56.308Z","comments":true,"path":"api/articles/systemstructure/linux/linuxio.json","excerpt":null,"covers":["https://segmentfault.com/img/bVm1c3","https://segmentfault.com/img/bVm1c4","https://segmentfault.com/img/bVm1c5","https://cdn.jsdelivr.net/gh/Longtao-W/pics@main/20211025/1635139536bVm1c8","https://cdn.jsdelivr.net/gh/Longtao-W/pics@main/20211025/1635139539bVm1c9","https://cdn.jsdelivr.net/gh/Longtao-W/pics@main/20211025/1635139551R-C.33d57d1aac13ec6a4e7f917e0a47bb69?rik=o/uWsKRpOPc7MA&riu=http://www.thomas-krenn.com/de/wikiDE/images/d/da/Linux-io-stack-diagram_v1.0.png&ehk=1OGRYIpfyG0jiVPRMEKwfpXnNXxZpCQUOMRDg4u7Pz0=&risl=&pid=ImgRaw&r=0"],"content":"<p>同步IO和异步IO，阻塞IO和非阻塞IO分别是什么，到底有什么区别？不同的人在不同的上下文下给出的答案是不同的。所以先限定一下本文的上下文。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">本文讨论的背景是Linux环境下的network IO。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"概念说明\"><a href=\"#概念说明\" class=\"headerlink\" title=\"概念说明\"></a>概念说明</h3><p>在进行解释之前，首先要说明几个概念：<br>- 用户空间和内核空间<br>- 进程切换<br>- 进程的阻塞<br>- 文件描述符<br>- 缓存 I/O</p>\n<h4 id=\"用户空间与内核空间\"><a href=\"#用户空间与内核空间\" class=\"headerlink\" title=\"用户空间与内核空间\"></a>用户空间与内核空间</h4><p>现在操作系统都是采用虚拟存储器，那么对32位操作系统而言，它的寻址空间（虚拟存储空间）为4G（2的32次方）。操作系统的核心是内核，独立于普通的应用程序，可以访问受保护的内存空间，也有访问底层硬件设备的所有权限。为了保证用户进程不能直接操作内核（kernel），保证内核的安全，操心系统将虚拟空间划分为两部分，一部分为内核空间，一部分为用户空间。针对linux操作系统而言，将最高的1G字节（从虚拟地址0xC0000000到0xFFFFFFFF），供内核使用，称为内核空间，而将较低的3G字节（从虚拟地址0x00000000到0xBFFFFFFF），供各个进程使用，称为用户空间。</p>\n<h4 id=\"进程切换\"><a href=\"#进程切换\" class=\"headerlink\" title=\"进程切换\"></a>进程切换</h4><p>为了控制进程的执行，内核必须有能力挂起正在CPU上运行的进程，并恢复以前挂起的某个进程的执行。这种行为被称为进程切换。因此可以说，任何进程都是在操作系统内核的支持下运行的，是与内核紧密相关的。</p>\n<p>从一个进程的运行转到另一个进程上运行，这个过程中经过下面这些变化：<br>\\1. 保存处理机上下文，包括程序计数器和其他寄存器。<br>\\2. 更新PCB信息。<br>\\3. 把进程的PCB移入相应的队列，如就绪、在某事件阻塞等队列。<br>\\4. 选择另一个进程执行，并更新其PCB。<br>\\5. 更新内存管理的数据结构。<br>\\6. 恢复处理机上下文。</p>\n<p>注：<strong>总而言之就是很耗资源</strong>，具体的可以参考这篇文章：<a href=\"http://guojing.me/linux-kernel-architecture/posts/process-switch/\">进程切换</a></p>\n<h4 id=\"进程的阻塞\"><a href=\"#进程的阻塞\" class=\"headerlink\" title=\"进程的阻塞\"></a>进程的阻塞</h4><p>正在执行的进程，由于期待的某些事件未发生，如请求系统资源失败、等待某种操作的完成、新数据尚未到达或无新工作做等，则由系统自动执行阻塞原语(Block)，使自己由运行状态变为阻塞状态。可见，进程的阻塞是进程自身的一种主动行为，也因此只有处于运行态的进程（获得CPU），才可能将其转为阻塞状态。<code>当进程进入阻塞状态，是不占用CPU资源的</code>。</p>\n<h4 id=\"文件描述符fd\"><a href=\"#文件描述符fd\" class=\"headerlink\" title=\"文件描述符fd\"></a>文件描述符fd</h4><p>文件描述符（File descriptor）是计算机科学中的一个术语，是一个用于表述指向文件的引用的抽象化概念。</p>\n<p>文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。在程序设计中，一些涉及底层的程序编写往往会围绕着文件描述符展开。但是文件描述符这一概念往往只适用于UNIX、Linux这样的操作系统。</p>\n<h4 id=\"缓存-I-O\"><a href=\"#缓存-I-O\" class=\"headerlink\" title=\"缓存 I/O\"></a>缓存 I/O</h4><p>缓存 I/O 又被称作标准 I/O，大多数文件系统的默认 I/O 操作都是缓存 I/O。在 Linux 的缓存 I/O 机制中，操作系统会将 I/O 的数据缓存在文件系统的页缓存（ page cache ）中，也就是说，数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间。</p>\n<p><strong>缓存 I/O 的缺点：</strong><br>数据在传输过程中需要在应用程序地址空间和内核进行多次数据拷贝操作，这些数据拷贝操作所带来的 CPU 以及内存开销是非常大的。</p>\n<h3 id=\"IO模式\"><a href=\"#IO模式\" class=\"headerlink\" title=\"IO模式\"></a>IO模式</h3><p>刚才说了，对于一次IO访问（以read举例），数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间。所以说，当一个read操作发生时，它会经历两个阶段：<br>\\1. 等待数据准备 (Waiting for the data to be ready)<br>\\2. 将数据从内核拷贝到进程中 (Copying the data from the kernel to the process)</p>\n<p>正式因为这两个阶段，linux系统产生了下面五种网络模式的方案。<br>- 阻塞 I/O（blocking IO）<br>- 非阻塞 I/O（nonblocking IO）<br>- I/O 多路复用（ IO multiplexing）<br>- 信号驱动 I/O（ signal driven IO）<br>- 异步 I/O（asynchronous IO）</p>\n<p>注：由于signal driven IO在实际中并不常用，所以我这只提及剩下的四种IO Model。</p>\n<h4 id=\"阻塞-I-O（blocking-IO）\"><a href=\"#阻塞-I-O（blocking-IO）\" class=\"headerlink\" title=\"阻塞 I/O（blocking IO）\"></a>阻塞 I/O（blocking IO）</h4><p>在linux中，默认情况下所有的socket都是blocking，一个典型的读操作流程大概是这样：<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://segmentfault.com/img/bVm1c3\" alt=\"clipboard.png\"></p>\n<p>当用户进程调用了recvfrom这个系统调用，kernel就开始了IO的第一个阶段：准备数据（对于网络IO来说，很多时候数据在一开始还没有到达。比如，还没有收到一个完整的UDP包。这个时候kernel就要等待足够的数据到来）。这个过程需要等待，也就是说数据被拷贝到操作系统内核的缓冲区中是需要一个过程的。而在用户进程这边，整个进程会被阻塞（当然，是进程自己选择的阻塞）。当kernel一直等到数据准备好了，它就会将数据从kernel中拷贝到用户内存，然后kernel返回结果，用户进程才解除block的状态，重新运行起来。</p>\n<blockquote>\n<p>  所以，blocking IO的特点就是在IO执行的两个阶段都被block了。</p>\n</blockquote>\n<h4 id=\"非阻塞-I-O（nonblocking-IO）\"><a href=\"#非阻塞-I-O（nonblocking-IO）\" class=\"headerlink\" title=\"非阻塞 I/O（nonblocking IO）\"></a>非阻塞 I/O（nonblocking IO）</h4><p>linux下，可以通过设置socket使其变为non-blocking。当对一个non-blocking socket执行读操作时，流程是这个样子：<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://segmentfault.com/img/bVm1c4\" alt=\"clipboard.png\"></p>\n<p>当用户进程发出read操作时，如果kernel中的数据还没有准备好，那么它并不会block用户进程，而是立刻返回一个error。从用户进程角度讲 ，它发起一个read操作后，并不需要等待，而是马上就得到了一个结果。用户进程判断结果是一个error时，它就知道数据还没有准备好，于是它可以再次发送read操作。一旦kernel中的数据准备好了，并且又再次收到了用户进程的system call，那么它马上就将数据拷贝到了用户内存，然后返回。</p>\n<blockquote>\n<p>  所以，nonblocking IO的特点是用户进程需要<strong>不断的主动询问</strong>kernel数据好了没有。</p>\n</blockquote>\n<h4 id=\"I-O-多路复用（-IO-multiplexing）\"><a href=\"#I-O-多路复用（-IO-multiplexing）\" class=\"headerlink\" title=\"I/O 多路复用（ IO multiplexing）\"></a>I/O 多路复用（ IO multiplexing）</h4><p>IO multiplexing就是我们说的select，poll，epoll，有些地方也称这种IO方式为event driven IO。select/epoll的好处就在于单个process就可以同时处理多个网络连接的IO。它的基本原理就是select，poll，epoll这个function会不断的轮询所负责的所有socket，当某个socket有数据到达了，就通知用户进程。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://segmentfault.com/img/bVm1c5\" alt=\"clipboard.png\"></p>\n<p><code>当用户进程调用了select，那么整个进程会被block</code>，而同时，kernel会“监视”所有select负责的socket，当任何一个socket中的数据准备好了，select就会返回。这个时候用户进程再调用read操作，将数据从kernel拷贝到用户进程。</p>\n<blockquote>\n<p>  所以，I/O 多路复用的特点是通过一种机制一个进程能同时等待多个文件描述符，而这些文件描述符（套接字描述符）其中的任意一个进入读就绪状态，select()函数就可以返回。</p>\n</blockquote>\n<p>这个图和blocking IO的图其实并没有太大的不同，事实上，还更差一些。因为这里需要使用两个system call (select 和 recvfrom)，而blocking IO只调用了一个system call (recvfrom)。但是，用select的优势在于它可以同时处理多个connection。</p>\n<p>所以，如果处理的连接数不是很高的话，使用select/epoll的web server不一定比使用multi-threading + blocking IO的web server性能更好，可能延迟还更大。select/epoll的优势并不是对于单个连接能处理得更快，而是在于能处理更多的连接。）</p>\n<p>在IO multiplexing Model中，实际中，对于每一个socket，一般都设置成为non-blocking，但是，如上图所示，整个用户的process其实是一直被block的。只不过process是被select这个函数block，而不是被socket IO给block。</p>\n<h4 id=\"异步-I-O（asynchronous-IO）\"><a href=\"#异步-I-O（asynchronous-IO）\" class=\"headerlink\" title=\"异步 I/O（asynchronous IO）\"></a>异步 I/O（asynchronous IO）</h4><p>inux下的asynchronous IO其实用得很少。先看一下它的流程：<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://cdn.jsdelivr.net/gh/Longtao-W/pics@main/20211025/1635139536bVm1c8\" alt=\"clipboard.png\"></p>\n<p>用户进程发起read操作之后，立刻就可以开始去做其它的事。而另一方面，从kernel的角度，当它受到一个asynchronous read之后，首先它会立刻返回，所以不会对用户进程产生任何block。然后，kernel会等待数据准备完成，然后将数据拷贝到用户内存，当这一切都完成之后，kernel会给用户进程发送一个signal，告诉它read操作完成了。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><h5 id=\"blocking和non-blocking的区别\"><a href=\"#blocking和non-blocking的区别\" class=\"headerlink\" title=\"blocking和non-blocking的区别\"></a>blocking和non-blocking的区别</h5><p>调用blocking IO会一直block住对应的进程直到操作完成，而non-blocking IO在kernel还准备数据的情况下会立刻返回。</p>\n<h5 id=\"synchronous-IO和asynchronous-IO的区别\"><a href=\"#synchronous-IO和asynchronous-IO的区别\" class=\"headerlink\" title=\"synchronous IO和asynchronous IO的区别\"></a>synchronous IO和asynchronous IO的区别</h5><p>在说明synchronous IO和asynchronous IO的区别之前，需要先给出两者的定义。POSIX的定义是这样子的：<br>- A synchronous I/O operation causes the requesting process to be blocked until that I/O operation completes;<br>- An asynchronous I/O operation does not cause the requesting process to be blocked;</p>\n<p>两者的区别就在于synchronous IO做”IO operation”的时候会将process阻塞。按照这个定义，之前所述的blocking IO，non-blocking IO，IO multiplexing都属于synchronous IO。</p>\n<p>有人会说，non-blocking IO并没有被block啊。这里有个非常“狡猾”的地方，定义中所指的”IO operation”是指真实的IO操作，就是例子中的recvfrom这个system call。non-blocking IO在执行recvfrom这个system call的时候，如果kernel的数据没有准备好，这时候不会block进程。但是，当kernel中数据准备好的时候，recvfrom会将数据从kernel拷贝到用户内存中，这个时候进程是被block了，在这段时间内，进程是被block的。</p>\n<p>而asynchronous IO则不一样，当进程发起IO 操作之后，就直接返回再也不理睬了，直到kernel发送一个信号，告诉进程说IO完成。在这整个过程中，进程完全没有被block。</p>\n<p><strong>各个IO Model的比较如图所示：</strong><br><img src= \"/img/loading.gif\" data-lazy-src=\"https://cdn.jsdelivr.net/gh/Longtao-W/pics@main/20211025/1635139539bVm1c9\" alt=\"clipboard.png\"></p>\n<p>通过上面的图片，可以发现non-blocking IO和asynchronous IO的区别还是很明显的。在non-blocking IO中，虽然进程大部分时间都不会被block，但是它仍然要求进程去主动的check，并且当数据准备完成以后，也需要进程主动的再次调用recvfrom来将数据拷贝到用户内存。而asynchronous IO则完全不同。它就像是用户进程将整个IO操作交给了他人（kernel）完成，然后他人做完后发信号通知。在此期间，用户进程不需要去检查IO操作的状态，也不需要主动的去拷贝数据。</p>\n<h3 id=\"I-O-多路复用之select、poll、epoll详解\"><a href=\"#I-O-多路复用之select、poll、epoll详解\" class=\"headerlink\" title=\"I/O 多路复用之select、poll、epoll详解\"></a>I/O 多路复用之select、poll、epoll详解</h3><p>select，poll，epoll都是IO多路复用的机制。I/O多路复用就是通过一种机制，一个进程可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。但select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的，而异步I/O则无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。（这里啰嗦下）</p>\n<h4 id=\"select\"><a href=\"#select\" class=\"headerlink\" title=\"select\"></a>select</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int select (int n, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);</span><br></pre></td></tr></table></figure>\n\n<p>select 函数监视的文件描述符分3类，分别是writefds、readfds、和exceptfds。调用后select函数会阻塞，直到有描述副就绪（有数据 可读、可写、或者有except），或者超时（timeout指定等待时间，如果立即返回设为null即可），函数返回。当select函数返回后，可以 通过遍历fdset，来找到就绪的描述符。</p>\n<p>select目前几乎在所有的平台上支持，其良好跨平台支持也是它的一个优点。select的一 个缺点在于单个进程能够监视的文件描述符的数量存在最大限制，在Linux上一般为1024，可以通过修改宏定义甚至重新编译内核的方式提升这一限制，但 是这样也会造成效率的降低。</p>\n<h4 id=\"poll\"><a href=\"#poll\" class=\"headerlink\" title=\"poll\"></a>poll</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int poll (struct pollfd *fds, unsigned int nfds, int timeout);</span><br></pre></td></tr></table></figure>\n\n<p>不同与select使用三个位图来表示三个fdset的方式，poll使用一个 pollfd的指针实现。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct pollfd &#123;</span><br><span class=\"line\">    int fd; &#x2F;* file descriptor *&#x2F;</span><br><span class=\"line\">    short events; &#x2F;* requested events to watch *&#x2F;</span><br><span class=\"line\">    short revents; &#x2F;* returned events witnessed *&#x2F;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>pollfd结构包含了要监视的event和发生的event，不再使用select“参数-值”传递的方式。同时，pollfd并没有最大数量限制（但是数量过大后性能也是会下降）。 和select函数一样，poll返回后，需要轮询pollfd来获取就绪的描述符。</p>\n<blockquote>\n<p>  从上面看，select和poll都需要在返回后，<code>通过遍历文件描述符来获取已经就绪的socket</code>。事实上，同时连接的大量客户端在一时刻可能只有很少的处于就绪状态，因此随着监视的描述符数量的增长，其效率也会线性下降。</p>\n</blockquote>\n<h4 id=\"epoll\"><a href=\"#epoll\" class=\"headerlink\" title=\"epoll\"></a>epoll</h4><p>epoll是在2.6内核中提出的，是之前的select和poll的增强版本。相对于select和poll来说，epoll更加灵活，没有描述符限制。epoll使用一个文件描述符管理多个描述符，将用户关系的文件描述符的事件存放到内核的一个事件表中，这样在用户空间和内核空间的copy只需一次。</p>\n<h5 id=\"epoll操作过程\"><a href=\"#epoll操作过程\" class=\"headerlink\" title=\"epoll操作过程\"></a>epoll操作过程</h5><p>epoll操作过程需要三个接口，分别如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int epoll_create(int size)；&#x2F;&#x2F;创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大</span><br><span class=\"line\">int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)；</span><br><span class=\"line\">int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);</span><br></pre></td></tr></table></figure>\n\n<p><strong>1. int epoll_create(int size);</strong><br>创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大，这个参数不同于select()中的第一个参数，给出最大监听的fd+1的值，<code>参数size并不是限制了epoll所能监听的描述符最大个数，只是对内核初始分配内部数据结构的一个建议</code>。<br>当创建好epoll句柄后，它就会占用一个fd值，在linux下如果查看/proc/进程id/fd/，是能够看到这个fd的，所以在使用完epoll后，必须调用close()关闭，否则可能导致fd被耗尽。</p>\n<p><strong>2. int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)；</strong><br>函数是对指定描述符fd执行op操作。<br>- epfd：是epoll_create()的返回值。<br>- op：表示op操作，用三个宏来表示：添加EPOLL_CTL_ADD，删除EPOLL_CTL_DEL，修改EPOLL_CTL_MOD。分别添加、删除和修改对fd的监听事件。<br>- fd：是需要监听的fd（文件描述符）<br>- epoll_event：是告诉内核需要监听什么事，struct epoll_event结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct epoll_event &#123;</span><br><span class=\"line\">  __uint32_t events;  &#x2F;* Epoll events *&#x2F;</span><br><span class=\"line\">  epoll_data_t data;  &#x2F;* User data variable *&#x2F;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;events可以是以下几个宏的集合：</span><br><span class=\"line\">EPOLLIN ：表示对应的文件描述符可以读（包括对端SOCKET正常关闭）；</span><br><span class=\"line\">EPOLLOUT：表示对应的文件描述符可以写；</span><br><span class=\"line\">EPOLLPRI：表示对应的文件描述符有紧急的数据可读（这里应该表示有带外数据到来）；</span><br><span class=\"line\">EPOLLERR：表示对应的文件描述符发生错误；</span><br><span class=\"line\">EPOLLHUP：表示对应的文件描述符被挂断；</span><br><span class=\"line\">EPOLLET： 将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的。</span><br><span class=\"line\">EPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里</span><br></pre></td></tr></table></figure>\n\n<p><strong>3. int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);</strong><br>等待epfd上的io事件，最多返回maxevents个事件。<br>参数events用来从内核得到事件的集合，maxevents告之内核这个events有多大，这个maxevents的值不能大于创建epoll_create()时的size，参数timeout是超时时间（毫秒，0会立即返回，-1将不确定，也有说法说是永久阻塞）。该函数返回需要处理的事件数目，如返回0表示已超时。</p>\n<h5 id=\"工作模式\"><a href=\"#工作模式\" class=\"headerlink\" title=\"工作模式\"></a>工作模式</h5><p>　epoll对文件描述符的操作有两种模式：<strong>LT（level trigger）</strong>和<strong>ET（edge trigger）</strong>。LT模式是默认模式，LT模式与ET模式的区别如下：<br>　　<strong>LT模式</strong>：当epoll_wait检测到描述符事件发生并将此事件通知应用程序，<code>应用程序可以不立即处理该事件</code>。下次调用epoll_wait时，会再次响应应用程序并通知此事件。<br>　　<strong>ET模式</strong>：当epoll_wait检测到描述符事件发生并将此事件通知应用程序，<code>应用程序必须立即处理该事件</code>。如果不处理，下次调用epoll_wait时，不会再次响应应用程序并通知此事件。</p>\n<h6 id=\"LT模式\"><a href=\"#LT模式\" class=\"headerlink\" title=\"LT模式\"></a>LT模式</h6><p>LT(level triggered)是缺省的工作方式，并且同时支持block和no-block socket.在这种做法中，内核告诉你一个文件描述符是否就绪了，然后你可以对这个就绪的fd进行IO操作。如果你不作任何操作，内核还是会继续通知你的。</p>\n<h6 id=\"ET模式\"><a href=\"#ET模式\" class=\"headerlink\" title=\"ET模式\"></a>ET模式</h6><p>ET(edge-triggered)是高速工作方式，只支持no-block socket。在这种模式下，当描述符从未就绪变为就绪时，内核通过epoll告诉你。然后它会假设你知道文件描述符已经就绪，并且不会再为那个文件描述符发送更多的就绪通知，直到你做了某些操作导致那个文件描述符不再为就绪状态了(比如，你在发送，接收或者接收请求，或者发送接收的数据少于一定量时导致了一个EWOULDBLOCK 错误）。但是请注意，如果一直不对这个fd作IO操作(从而导致它再次变成未就绪)，内核不会发送更多的通知(only once)</p>\n<p>ET模式在很大程度上减少了epoll事件被重复触发的次数，因此效率要比LT模式高。epoll工作在ET模式的时候，必须使用非阻塞套接口，以避免由于一个文件句柄的阻塞读/阻塞写操作把处理多个文件描述符的任务饿死。</p>\n<h6 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h6><p><strong>假如有这样一个例子：</strong><br>\\1. 我们已经把一个用来从管道中读取数据的文件句柄(RFD)添加到epoll描述符<br>\\2. 这个时候从管道的另一端被写入了2KB的数据<br>\\3. 调用epoll_wait(2)，并且它会返回RFD，说明它已经准备好读取操作<br>\\4. 然后我们读取了1KB的数据<br>\\5. 调用epoll_wait(2)……</p>\n<p><strong>LT模式：</strong><br>如果是LT模式，那么在第5步调用epoll_wait(2)之后，仍然能受到通知。</p>\n<p><strong>ET模式：</strong><br>如果我们在第1步将RFD添加到epoll描述符的时候使用了EPOLLET标志，那么在第5步调用epoll_wait(2)之后将有可能会挂起，因为剩余的数据还存在于文件的输入缓冲区内，而且数据发出端还在等待一个针对已经发出数据的反馈信息。只有在监视的文件句柄上发生了某个事件的时候 ET 工作模式才会汇报事件。因此在第5步的时候，调用者可能会放弃等待仍在存在于文件输入缓冲区内的剩余数据。</p>\n<p>当使用epoll的ET模型来工作时，当产生了一个EPOLLIN事件后，<br>读数据的时候需要考虑的是当recv()返回的大小如果等于请求的大小，那么很有可能是缓冲区还有数据未读完，也意味着该次事件还没有处理完，所以还需要再次读取：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while(rs)&#123;</span><br><span class=\"line\">  buflen &#x3D; recv(activeevents[i].data.fd, buf, sizeof(buf), 0);</span><br><span class=\"line\">  if(buflen &lt; 0)&#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 由于是非阻塞的模式,所以当errno为EAGAIN时,表示当前缓冲区已无数据可读</span><br><span class=\"line\">    &#x2F;&#x2F; 在这里就当作是该次事件已处理处.</span><br><span class=\"line\">    if(errno &#x3D;&#x3D; EAGAIN)&#123;</span><br><span class=\"line\">        break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else&#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  else if(buflen &#x3D;&#x3D; 0)&#123;</span><br><span class=\"line\">     &#x2F;&#x2F; 这里表示对端的socket已正常关闭.</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> if(buflen &#x3D;&#x3D; sizeof(buf)&#123;</span><br><span class=\"line\">      rs &#x3D; 1;   &#x2F;&#x2F; 需要再次读取</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> else&#123;</span><br><span class=\"line\">      rs &#x3D; 0;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>  <strong>Linux中的EAGAIN含义</strong></p>\n</blockquote>\n<p>Linux环境下开发经常会碰到很多错误(设置errno)，其中EAGAIN是其中比较常见的一个错误(比如用在非阻塞操作中)。<br>从字面上来看，是提示再试一次。这个错误经常出现在当应用程序进行一些非阻塞(non-blocking)操作(对文件或socket)的时候。</p>\n<p>例如，以 O_NONBLOCK的标志打开文件/socket/FIFO，如果你连续做read操作而没有数据可读。此时程序不会阻塞起来等待数据准备就绪返回，read函数会返回一个错误EAGAIN，提示你的应用程序现在没有数据可读请稍后再试。<br>又例如，当一个系统调用(比如fork)因为没有足够的资源(比如虚拟内存)而执行失败，返回EAGAIN提示其再调用一次(也许下次就能成功)。</p>\n<h5 id=\"代码演示\"><a href=\"#代码演示\" class=\"headerlink\" title=\"代码演示\"></a>代码演示</h5><p>下面是一段不完整的代码且格式不对，意在表述上面的过程，去掉了一些模板代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define IPADDRESS   &quot;127.0.0.1&quot;</span><br><span class=\"line\">#define PORT        8787</span><br><span class=\"line\">#define MAXSIZE     1024</span><br><span class=\"line\">#define LISTENQ     5</span><br><span class=\"line\">#define FDSIZE      1000</span><br><span class=\"line\">#define EPOLLEVENTS 100</span><br><span class=\"line\"></span><br><span class=\"line\">listenfd &#x3D; socket_bind(IPADDRESS,PORT);</span><br><span class=\"line\"></span><br><span class=\"line\">struct epoll_event events[EPOLLEVENTS];</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;创建一个描述符</span><br><span class=\"line\">epollfd &#x3D; epoll_create(FDSIZE);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;添加监听描述符事件</span><br><span class=\"line\">add_event(epollfd,listenfd,EPOLLIN);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;循环等待</span><br><span class=\"line\">for ( ; ; )&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;该函数返回已经准备好的描述符事件数目</span><br><span class=\"line\">    ret &#x3D; epoll_wait(epollfd,events,EPOLLEVENTS,-1);</span><br><span class=\"line\">    &#x2F;&#x2F;处理接收到的连接</span><br><span class=\"line\">    handle_events(epollfd,events,ret,listenfd,buf);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;事件处理函数</span><br><span class=\"line\">static void handle_events(int epollfd,struct epoll_event *events,int num,int listenfd,char *buf)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     int i;</span><br><span class=\"line\">     int fd;</span><br><span class=\"line\">     &#x2F;&#x2F;进行遍历;这里只要遍历已经准备好的io事件。num并不是当初epoll_create时的FDSIZE。</span><br><span class=\"line\">     for (i &#x3D; 0;i &lt; num;i++)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">         fd &#x3D; events[i].data.fd;</span><br><span class=\"line\">        &#x2F;&#x2F;根据描述符的类型和事件类型进行处理</span><br><span class=\"line\">         if ((fd &#x3D;&#x3D; listenfd) &amp;&amp;(events[i].events &amp; EPOLLIN))</span><br><span class=\"line\">            handle_accpet(epollfd,listenfd);</span><br><span class=\"line\">         else if (events[i].events &amp; EPOLLIN)</span><br><span class=\"line\">            do_read(epollfd,fd,buf);</span><br><span class=\"line\">         else if (events[i].events &amp; EPOLLOUT)</span><br><span class=\"line\">            do_write(epollfd,fd,buf);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;添加事件</span><br><span class=\"line\">static void add_event(int epollfd,int fd,int state)&#123;</span><br><span class=\"line\">    struct epoll_event ev;</span><br><span class=\"line\">    ev.events &#x3D; state;</span><br><span class=\"line\">    ev.data.fd &#x3D; fd;</span><br><span class=\"line\">    epoll_ctl(epollfd,EPOLL_CTL_ADD,fd,&amp;ev);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;处理接收到的连接</span><br><span class=\"line\">static void handle_accpet(int epollfd,int listenfd)&#123;</span><br><span class=\"line\">     int clifd;     </span><br><span class=\"line\">     struct sockaddr_in cliaddr;     </span><br><span class=\"line\">     socklen_t  cliaddrlen;     </span><br><span class=\"line\">     clifd &#x3D; accept(listenfd,(struct sockaddr*)&amp;cliaddr,&amp;cliaddrlen);     </span><br><span class=\"line\">     if (clifd &#x3D;&#x3D; -1)         </span><br><span class=\"line\">     perror(&quot;accpet error:&quot;);     </span><br><span class=\"line\">     else &#123;         </span><br><span class=\"line\">         printf(&quot;accept a new client: %s:%d\\n&quot;,inet_ntoa(cliaddr.sin_addr),cliaddr.sin_port);                       &#x2F;&#x2F;添加一个客户描述符和事件         </span><br><span class=\"line\">         add_event(epollfd,clifd,EPOLLIN);     </span><br><span class=\"line\">     &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;读处理</span><br><span class=\"line\">static void do_read(int epollfd,int fd,char *buf)&#123;</span><br><span class=\"line\">    int nread;</span><br><span class=\"line\">    nread &#x3D; read(fd,buf,MAXSIZE);</span><br><span class=\"line\">    if (nread &#x3D;&#x3D; -1)     &#123;         </span><br><span class=\"line\">        perror(&quot;read error:&quot;);         </span><br><span class=\"line\">        close(fd); &#x2F;&#x2F;记住close fd        </span><br><span class=\"line\">        delete_event(epollfd,fd,EPOLLIN); &#x2F;&#x2F;删除监听 </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else if (nread &#x3D;&#x3D; 0)     &#123;         </span><br><span class=\"line\">        fprintf(stderr,&quot;client close.\\n&quot;);</span><br><span class=\"line\">        close(fd); &#x2F;&#x2F;记住close fd       </span><br><span class=\"line\">        delete_event(epollfd,fd,EPOLLIN); &#x2F;&#x2F;删除监听 </span><br><span class=\"line\">    &#125;     </span><br><span class=\"line\">    else &#123;         </span><br><span class=\"line\">        printf(&quot;read message is : %s&quot;,buf);        </span><br><span class=\"line\">        &#x2F;&#x2F;修改描述符对应的事件，由读改为写         </span><br><span class=\"line\">        modify_event(epollfd,fd,EPOLLOUT);     </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;写处理</span><br><span class=\"line\">static void do_write(int epollfd,int fd,char *buf) &#123;     </span><br><span class=\"line\">    int nwrite;     </span><br><span class=\"line\">    nwrite &#x3D; write(fd,buf,strlen(buf));     </span><br><span class=\"line\">    if (nwrite &#x3D;&#x3D; -1)&#123;         </span><br><span class=\"line\">        perror(&quot;write error:&quot;);        </span><br><span class=\"line\">        close(fd);   &#x2F;&#x2F;记住close fd       </span><br><span class=\"line\">        delete_event(epollfd,fd,EPOLLOUT);  &#x2F;&#x2F;删除监听    </span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        modify_event(epollfd,fd,EPOLLIN); </span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">    memset(buf,0,MAXSIZE); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;删除事件</span><br><span class=\"line\">static void delete_event(int epollfd,int fd,int state) &#123;</span><br><span class=\"line\">    struct epoll_event ev;</span><br><span class=\"line\">    ev.events &#x3D; state;</span><br><span class=\"line\">    ev.data.fd &#x3D; fd;</span><br><span class=\"line\">    epoll_ctl(epollfd,EPOLL_CTL_DEL,fd,&amp;ev);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;修改事件</span><br><span class=\"line\">static void modify_event(int epollfd,int fd,int state)&#123;     </span><br><span class=\"line\">    struct epoll_event ev;</span><br><span class=\"line\">    ev.events &#x3D; state;</span><br><span class=\"line\">    ev.data.fd &#x3D; fd;</span><br><span class=\"line\">    epoll_ctl(epollfd,EPOLL_CTL_MOD,fd,&amp;ev);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;注：另外一端我就省了</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"epoll总结\"><a href=\"#epoll总结\" class=\"headerlink\" title=\"epoll总结\"></a>epoll总结</h5><p>在 select/poll中，进程只有在调用一定的方法后，内核才对所有监视的文件描述符进行扫描，而<strong>epoll事先通过epoll_ctl()来注册一 个文件描述符，一旦基于某个文件描述符就绪时，内核会采用类似callback的回调机制，迅速激活这个文件描述符，当进程调用epoll_wait() 时便得到通知</strong>。(<code>此处去掉了遍历文件描述符，而是通过监听回调的的机制</code>。这正是epoll的魅力所在。)</p>\n<p><strong>epoll的优点主要是一下几个方面：</strong><br>\\1. 监视的描述符数量不受限制，它所支持的FD上限是最大可以打开文件的数目，这个数字一般远大于2048,举个例子,在1GB内存的机器上大约是10万左 右，具体数目可以cat /proc/sys/fs/file-max察看,一般来说这个数目和系统内存关系很大。select的最大缺点就是进程打开的fd是有数量限制的。这对 于连接数量比较大的服务器来说根本不能满足。虽然也可以选择多进程的解决方案( Apache就是这样实现的)，不过虽然linux上面创建进程的代价比较小，但仍旧是不可忽视的，加上进程间数据同步远比不上线程间同步的高效，所以也不是一种完美的方案。</p>\n<ol>\n<li> IO的效率不会随着监视fd的数量的增长而下降。epoll不同于select和poll轮询的方式，而是通过每个fd定义的回调函数来实现的。只有就绪的fd才会执行回调函数。</li>\n</ol>\n<blockquote>\n<p>  如果没有大量的idle -connection或者dead-connection，epoll的效率并不会比select/poll高很多，但是当遇到大量的idle- connection，就会发现epoll的效率大大高于select/poll。</p>\n</blockquote>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://cdn.jsdelivr.net/gh/Longtao-W/pics@main/20211025/1635139551R-C.33d57d1aac13ec6a4e7f917e0a47bb69?rik=o/uWsKRpOPc7MA&riu=http://www.thomas-krenn.com/de/wikiDE/images/d/da/Linux-io-stack-diagram_v1.0.png&ehk=1OGRYIpfyG0jiVPRMEKwfpXnNXxZpCQUOMRDg4u7Pz0=&risl=&pid=ImgRaw&r=0\" alt=\"See the source image\"></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://www.cnblogs.com/Anker/p/3269106.html\">用户空间与内核空间，进程上下文与中断上下文总结]</a><br><a href=\"http://guojing.me/linux-kernel-architecture/posts/process-switch/\">进程切换</a><br><a href=\"https://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6\">维基百科-文件描述符</a><br><a href=\"http://www.ibm.com/developerworks/cn/linux/l-cn-directio/\">Linux 中直接 I/O 机制的介绍</a><br><a href=\"http://blog.csdn.net/historyasamirror/article/details/5778378\">IO - 同步，异步，阻塞，非阻塞 （亡羊补牢篇）</a><br><a href=\"http://www.cnblogs.com/bigwangdi/p/3182958.html\">Linux中select poll和epoll的区别</a><br><a href=\"http://www.cnblogs.com/Anker/archive/2013/08/14/3258674.html\">IO多路复用之select总结</a><br><a href=\"http://www.cnblogs.com/Anker/archive/2013/08/15/3261006.html\">IO多路复用之poll总结</a><br><a href=\"http://www.cnblogs.com/Anker/archive/2013/08/17/3263780.html\">IO多路复用之epoll总结</a></p>\n","more":"<p>同步IO和异步IO，阻塞IO和非阻塞IO分别是什么，到底有什么区别？不同的人在不同的上下文下给出的答案是不同的。所以先限定一下本文的上下文。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">本文讨论的背景是Linux环境下的network IO。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"概念说明\"><a href=\"#概念说明\" class=\"headerlink\" title=\"概念说明\"></a>概念说明</h3><p>在进行解释之前，首先要说明几个概念：<br>- 用户空间和内核空间<br>- 进程切换<br>- 进程的阻塞<br>- 文件描述符<br>- 缓存 I/O</p>\n<h4 id=\"用户空间与内核空间\"><a href=\"#用户空间与内核空间\" class=\"headerlink\" title=\"用户空间与内核空间\"></a>用户空间与内核空间</h4><p>现在操作系统都是采用虚拟存储器，那么对32位操作系统而言，它的寻址空间（虚拟存储空间）为4G（2的32次方）。操作系统的核心是内核，独立于普通的应用程序，可以访问受保护的内存空间，也有访问底层硬件设备的所有权限。为了保证用户进程不能直接操作内核（kernel），保证内核的安全，操心系统将虚拟空间划分为两部分，一部分为内核空间，一部分为用户空间。针对linux操作系统而言，将最高的1G字节（从虚拟地址0xC0000000到0xFFFFFFFF），供内核使用，称为内核空间，而将较低的3G字节（从虚拟地址0x00000000到0xBFFFFFFF），供各个进程使用，称为用户空间。</p>\n<h4 id=\"进程切换\"><a href=\"#进程切换\" class=\"headerlink\" title=\"进程切换\"></a>进程切换</h4><p>为了控制进程的执行，内核必须有能力挂起正在CPU上运行的进程，并恢复以前挂起的某个进程的执行。这种行为被称为进程切换。因此可以说，任何进程都是在操作系统内核的支持下运行的，是与内核紧密相关的。</p>\n<p>从一个进程的运行转到另一个进程上运行，这个过程中经过下面这些变化：<br>\\1. 保存处理机上下文，包括程序计数器和其他寄存器。<br>\\2. 更新PCB信息。<br>\\3. 把进程的PCB移入相应的队列，如就绪、在某事件阻塞等队列。<br>\\4. 选择另一个进程执行，并更新其PCB。<br>\\5. 更新内存管理的数据结构。<br>\\6. 恢复处理机上下文。</p>\n<p>注：<strong>总而言之就是很耗资源</strong>，具体的可以参考这篇文章：<a href=\"http://guojing.me/linux-kernel-architecture/posts/process-switch/\">进程切换</a></p>\n<h4 id=\"进程的阻塞\"><a href=\"#进程的阻塞\" class=\"headerlink\" title=\"进程的阻塞\"></a>进程的阻塞</h4><p>正在执行的进程，由于期待的某些事件未发生，如请求系统资源失败、等待某种操作的完成、新数据尚未到达或无新工作做等，则由系统自动执行阻塞原语(Block)，使自己由运行状态变为阻塞状态。可见，进程的阻塞是进程自身的一种主动行为，也因此只有处于运行态的进程（获得CPU），才可能将其转为阻塞状态。<code>当进程进入阻塞状态，是不占用CPU资源的</code>。</p>\n<h4 id=\"文件描述符fd\"><a href=\"#文件描述符fd\" class=\"headerlink\" title=\"文件描述符fd\"></a>文件描述符fd</h4><p>文件描述符（File descriptor）是计算机科学中的一个术语，是一个用于表述指向文件的引用的抽象化概念。</p>\n<p>文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。在程序设计中，一些涉及底层的程序编写往往会围绕着文件描述符展开。但是文件描述符这一概念往往只适用于UNIX、Linux这样的操作系统。</p>\n<h4 id=\"缓存-I-O\"><a href=\"#缓存-I-O\" class=\"headerlink\" title=\"缓存 I/O\"></a>缓存 I/O</h4><p>缓存 I/O 又被称作标准 I/O，大多数文件系统的默认 I/O 操作都是缓存 I/O。在 Linux 的缓存 I/O 机制中，操作系统会将 I/O 的数据缓存在文件系统的页缓存（ page cache ）中，也就是说，数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间。</p>\n<p><strong>缓存 I/O 的缺点：</strong><br>数据在传输过程中需要在应用程序地址空间和内核进行多次数据拷贝操作，这些数据拷贝操作所带来的 CPU 以及内存开销是非常大的。</p>\n<h3 id=\"IO模式\"><a href=\"#IO模式\" class=\"headerlink\" title=\"IO模式\"></a>IO模式</h3><p>刚才说了，对于一次IO访问（以read举例），数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间。所以说，当一个read操作发生时，它会经历两个阶段：<br>\\1. 等待数据准备 (Waiting for the data to be ready)<br>\\2. 将数据从内核拷贝到进程中 (Copying the data from the kernel to the process)</p>\n<p>正式因为这两个阶段，linux系统产生了下面五种网络模式的方案。<br>- 阻塞 I/O（blocking IO）<br>- 非阻塞 I/O（nonblocking IO）<br>- I/O 多路复用（ IO multiplexing）<br>- 信号驱动 I/O（ signal driven IO）<br>- 异步 I/O（asynchronous IO）</p>\n<p>注：由于signal driven IO在实际中并不常用，所以我这只提及剩下的四种IO Model。</p>\n<h4 id=\"阻塞-I-O（blocking-IO）\"><a href=\"#阻塞-I-O（blocking-IO）\" class=\"headerlink\" title=\"阻塞 I/O（blocking IO）\"></a>阻塞 I/O（blocking IO）</h4><p>在linux中，默认情况下所有的socket都是blocking，一个典型的读操作流程大概是这样：<br><img src=\"https://segmentfault.com/img/bVm1c3\" alt=\"clipboard.png\"></p>\n<p>当用户进程调用了recvfrom这个系统调用，kernel就开始了IO的第一个阶段：准备数据（对于网络IO来说，很多时候数据在一开始还没有到达。比如，还没有收到一个完整的UDP包。这个时候kernel就要等待足够的数据到来）。这个过程需要等待，也就是说数据被拷贝到操作系统内核的缓冲区中是需要一个过程的。而在用户进程这边，整个进程会被阻塞（当然，是进程自己选择的阻塞）。当kernel一直等到数据准备好了，它就会将数据从kernel中拷贝到用户内存，然后kernel返回结果，用户进程才解除block的状态，重新运行起来。</p>\n<blockquote>\n<p>  所以，blocking IO的特点就是在IO执行的两个阶段都被block了。</p>\n</blockquote>\n<h4 id=\"非阻塞-I-O（nonblocking-IO）\"><a href=\"#非阻塞-I-O（nonblocking-IO）\" class=\"headerlink\" title=\"非阻塞 I/O（nonblocking IO）\"></a>非阻塞 I/O（nonblocking IO）</h4><p>linux下，可以通过设置socket使其变为non-blocking。当对一个non-blocking socket执行读操作时，流程是这个样子：<br><img src=\"https://segmentfault.com/img/bVm1c4\" alt=\"clipboard.png\"></p>\n<p>当用户进程发出read操作时，如果kernel中的数据还没有准备好，那么它并不会block用户进程，而是立刻返回一个error。从用户进程角度讲 ，它发起一个read操作后，并不需要等待，而是马上就得到了一个结果。用户进程判断结果是一个error时，它就知道数据还没有准备好，于是它可以再次发送read操作。一旦kernel中的数据准备好了，并且又再次收到了用户进程的system call，那么它马上就将数据拷贝到了用户内存，然后返回。</p>\n<blockquote>\n<p>  所以，nonblocking IO的特点是用户进程需要<strong>不断的主动询问</strong>kernel数据好了没有。</p>\n</blockquote>\n<h4 id=\"I-O-多路复用（-IO-multiplexing）\"><a href=\"#I-O-多路复用（-IO-multiplexing）\" class=\"headerlink\" title=\"I/O 多路复用（ IO multiplexing）\"></a>I/O 多路复用（ IO multiplexing）</h4><p>IO multiplexing就是我们说的select，poll，epoll，有些地方也称这种IO方式为event driven IO。select/epoll的好处就在于单个process就可以同时处理多个网络连接的IO。它的基本原理就是select，poll，epoll这个function会不断的轮询所负责的所有socket，当某个socket有数据到达了，就通知用户进程。</p>\n<p><img src=\"https://segmentfault.com/img/bVm1c5\" alt=\"clipboard.png\"></p>\n<p><code>当用户进程调用了select，那么整个进程会被block</code>，而同时，kernel会“监视”所有select负责的socket，当任何一个socket中的数据准备好了，select就会返回。这个时候用户进程再调用read操作，将数据从kernel拷贝到用户进程。</p>\n<blockquote>\n<p>  所以，I/O 多路复用的特点是通过一种机制一个进程能同时等待多个文件描述符，而这些文件描述符（套接字描述符）其中的任意一个进入读就绪状态，select()函数就可以返回。</p>\n</blockquote>\n<p>这个图和blocking IO的图其实并没有太大的不同，事实上，还更差一些。因为这里需要使用两个system call (select 和 recvfrom)，而blocking IO只调用了一个system call (recvfrom)。但是，用select的优势在于它可以同时处理多个connection。</p>\n<p>所以，如果处理的连接数不是很高的话，使用select/epoll的web server不一定比使用multi-threading + blocking IO的web server性能更好，可能延迟还更大。select/epoll的优势并不是对于单个连接能处理得更快，而是在于能处理更多的连接。）</p>\n<p>在IO multiplexing Model中，实际中，对于每一个socket，一般都设置成为non-blocking，但是，如上图所示，整个用户的process其实是一直被block的。只不过process是被select这个函数block，而不是被socket IO给block。</p>\n<h4 id=\"异步-I-O（asynchronous-IO）\"><a href=\"#异步-I-O（asynchronous-IO）\" class=\"headerlink\" title=\"异步 I/O（asynchronous IO）\"></a>异步 I/O（asynchronous IO）</h4><p>inux下的asynchronous IO其实用得很少。先看一下它的流程：<br><img src=\"https://cdn.jsdelivr.net/gh/Longtao-W/pics@main/20211025/1635139536bVm1c8\" alt=\"clipboard.png\"></p>\n<p>用户进程发起read操作之后，立刻就可以开始去做其它的事。而另一方面，从kernel的角度，当它受到一个asynchronous read之后，首先它会立刻返回，所以不会对用户进程产生任何block。然后，kernel会等待数据准备完成，然后将数据拷贝到用户内存，当这一切都完成之后，kernel会给用户进程发送一个signal，告诉它read操作完成了。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><h5 id=\"blocking和non-blocking的区别\"><a href=\"#blocking和non-blocking的区别\" class=\"headerlink\" title=\"blocking和non-blocking的区别\"></a>blocking和non-blocking的区别</h5><p>调用blocking IO会一直block住对应的进程直到操作完成，而non-blocking IO在kernel还准备数据的情况下会立刻返回。</p>\n<h5 id=\"synchronous-IO和asynchronous-IO的区别\"><a href=\"#synchronous-IO和asynchronous-IO的区别\" class=\"headerlink\" title=\"synchronous IO和asynchronous IO的区别\"></a>synchronous IO和asynchronous IO的区别</h5><p>在说明synchronous IO和asynchronous IO的区别之前，需要先给出两者的定义。POSIX的定义是这样子的：<br>- A synchronous I/O operation causes the requesting process to be blocked until that I/O operation completes;<br>- An asynchronous I/O operation does not cause the requesting process to be blocked;</p>\n<p>两者的区别就在于synchronous IO做”IO operation”的时候会将process阻塞。按照这个定义，之前所述的blocking IO，non-blocking IO，IO multiplexing都属于synchronous IO。</p>\n<p>有人会说，non-blocking IO并没有被block啊。这里有个非常“狡猾”的地方，定义中所指的”IO operation”是指真实的IO操作，就是例子中的recvfrom这个system call。non-blocking IO在执行recvfrom这个system call的时候，如果kernel的数据没有准备好，这时候不会block进程。但是，当kernel中数据准备好的时候，recvfrom会将数据从kernel拷贝到用户内存中，这个时候进程是被block了，在这段时间内，进程是被block的。</p>\n<p>而asynchronous IO则不一样，当进程发起IO 操作之后，就直接返回再也不理睬了，直到kernel发送一个信号，告诉进程说IO完成。在这整个过程中，进程完全没有被block。</p>\n<p><strong>各个IO Model的比较如图所示：</strong><br><img src=\"https://cdn.jsdelivr.net/gh/Longtao-W/pics@main/20211025/1635139539bVm1c9\" alt=\"clipboard.png\"></p>\n<p>通过上面的图片，可以发现non-blocking IO和asynchronous IO的区别还是很明显的。在non-blocking IO中，虽然进程大部分时间都不会被block，但是它仍然要求进程去主动的check，并且当数据准备完成以后，也需要进程主动的再次调用recvfrom来将数据拷贝到用户内存。而asynchronous IO则完全不同。它就像是用户进程将整个IO操作交给了他人（kernel）完成，然后他人做完后发信号通知。在此期间，用户进程不需要去检查IO操作的状态，也不需要主动的去拷贝数据。</p>\n<h3 id=\"I-O-多路复用之select、poll、epoll详解\"><a href=\"#I-O-多路复用之select、poll、epoll详解\" class=\"headerlink\" title=\"I/O 多路复用之select、poll、epoll详解\"></a>I/O 多路复用之select、poll、epoll详解</h3><p>select，poll，epoll都是IO多路复用的机制。I/O多路复用就是通过一种机制，一个进程可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。但select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的，而异步I/O则无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。（这里啰嗦下）</p>\n<h4 id=\"select\"><a href=\"#select\" class=\"headerlink\" title=\"select\"></a>select</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int select (int n, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);</span><br></pre></td></tr></table></figure>\n\n<p>select 函数监视的文件描述符分3类，分别是writefds、readfds、和exceptfds。调用后select函数会阻塞，直到有描述副就绪（有数据 可读、可写、或者有except），或者超时（timeout指定等待时间，如果立即返回设为null即可），函数返回。当select函数返回后，可以 通过遍历fdset，来找到就绪的描述符。</p>\n<p>select目前几乎在所有的平台上支持，其良好跨平台支持也是它的一个优点。select的一 个缺点在于单个进程能够监视的文件描述符的数量存在最大限制，在Linux上一般为1024，可以通过修改宏定义甚至重新编译内核的方式提升这一限制，但 是这样也会造成效率的降低。</p>\n<h4 id=\"poll\"><a href=\"#poll\" class=\"headerlink\" title=\"poll\"></a>poll</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int poll (struct pollfd *fds, unsigned int nfds, int timeout);</span><br></pre></td></tr></table></figure>\n\n<p>不同与select使用三个位图来表示三个fdset的方式，poll使用一个 pollfd的指针实现。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct pollfd &#123;</span><br><span class=\"line\">    int fd; &#x2F;* file descriptor *&#x2F;</span><br><span class=\"line\">    short events; &#x2F;* requested events to watch *&#x2F;</span><br><span class=\"line\">    short revents; &#x2F;* returned events witnessed *&#x2F;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>pollfd结构包含了要监视的event和发生的event，不再使用select“参数-值”传递的方式。同时，pollfd并没有最大数量限制（但是数量过大后性能也是会下降）。 和select函数一样，poll返回后，需要轮询pollfd来获取就绪的描述符。</p>\n<blockquote>\n<p>  从上面看，select和poll都需要在返回后，<code>通过遍历文件描述符来获取已经就绪的socket</code>。事实上，同时连接的大量客户端在一时刻可能只有很少的处于就绪状态，因此随着监视的描述符数量的增长，其效率也会线性下降。</p>\n</blockquote>\n<h4 id=\"epoll\"><a href=\"#epoll\" class=\"headerlink\" title=\"epoll\"></a>epoll</h4><p>epoll是在2.6内核中提出的，是之前的select和poll的增强版本。相对于select和poll来说，epoll更加灵活，没有描述符限制。epoll使用一个文件描述符管理多个描述符，将用户关系的文件描述符的事件存放到内核的一个事件表中，这样在用户空间和内核空间的copy只需一次。</p>\n<h5 id=\"epoll操作过程\"><a href=\"#epoll操作过程\" class=\"headerlink\" title=\"epoll操作过程\"></a>epoll操作过程</h5><p>epoll操作过程需要三个接口，分别如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int epoll_create(int size)；&#x2F;&#x2F;创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大</span><br><span class=\"line\">int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)；</span><br><span class=\"line\">int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);</span><br></pre></td></tr></table></figure>\n\n<p><strong>1. int epoll_create(int size);</strong><br>创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大，这个参数不同于select()中的第一个参数，给出最大监听的fd+1的值，<code>参数size并不是限制了epoll所能监听的描述符最大个数，只是对内核初始分配内部数据结构的一个建议</code>。<br>当创建好epoll句柄后，它就会占用一个fd值，在linux下如果查看/proc/进程id/fd/，是能够看到这个fd的，所以在使用完epoll后，必须调用close()关闭，否则可能导致fd被耗尽。</p>\n<p><strong>2. int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)；</strong><br>函数是对指定描述符fd执行op操作。<br>- epfd：是epoll_create()的返回值。<br>- op：表示op操作，用三个宏来表示：添加EPOLL_CTL_ADD，删除EPOLL_CTL_DEL，修改EPOLL_CTL_MOD。分别添加、删除和修改对fd的监听事件。<br>- fd：是需要监听的fd（文件描述符）<br>- epoll_event：是告诉内核需要监听什么事，struct epoll_event结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct epoll_event &#123;</span><br><span class=\"line\">  __uint32_t events;  &#x2F;* Epoll events *&#x2F;</span><br><span class=\"line\">  epoll_data_t data;  &#x2F;* User data variable *&#x2F;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;events可以是以下几个宏的集合：</span><br><span class=\"line\">EPOLLIN ：表示对应的文件描述符可以读（包括对端SOCKET正常关闭）；</span><br><span class=\"line\">EPOLLOUT：表示对应的文件描述符可以写；</span><br><span class=\"line\">EPOLLPRI：表示对应的文件描述符有紧急的数据可读（这里应该表示有带外数据到来）；</span><br><span class=\"line\">EPOLLERR：表示对应的文件描述符发生错误；</span><br><span class=\"line\">EPOLLHUP：表示对应的文件描述符被挂断；</span><br><span class=\"line\">EPOLLET： 将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的。</span><br><span class=\"line\">EPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里</span><br></pre></td></tr></table></figure>\n\n<p><strong>3. int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);</strong><br>等待epfd上的io事件，最多返回maxevents个事件。<br>参数events用来从内核得到事件的集合，maxevents告之内核这个events有多大，这个maxevents的值不能大于创建epoll_create()时的size，参数timeout是超时时间（毫秒，0会立即返回，-1将不确定，也有说法说是永久阻塞）。该函数返回需要处理的事件数目，如返回0表示已超时。</p>\n<h5 id=\"工作模式\"><a href=\"#工作模式\" class=\"headerlink\" title=\"工作模式\"></a>工作模式</h5><p>　epoll对文件描述符的操作有两种模式：<strong>LT（level trigger）</strong>和<strong>ET（edge trigger）</strong>。LT模式是默认模式，LT模式与ET模式的区别如下：<br>　　<strong>LT模式</strong>：当epoll_wait检测到描述符事件发生并将此事件通知应用程序，<code>应用程序可以不立即处理该事件</code>。下次调用epoll_wait时，会再次响应应用程序并通知此事件。<br>　　<strong>ET模式</strong>：当epoll_wait检测到描述符事件发生并将此事件通知应用程序，<code>应用程序必须立即处理该事件</code>。如果不处理，下次调用epoll_wait时，不会再次响应应用程序并通知此事件。</p>\n<h6 id=\"LT模式\"><a href=\"#LT模式\" class=\"headerlink\" title=\"LT模式\"></a>LT模式</h6><p>LT(level triggered)是缺省的工作方式，并且同时支持block和no-block socket.在这种做法中，内核告诉你一个文件描述符是否就绪了，然后你可以对这个就绪的fd进行IO操作。如果你不作任何操作，内核还是会继续通知你的。</p>\n<h6 id=\"ET模式\"><a href=\"#ET模式\" class=\"headerlink\" title=\"ET模式\"></a>ET模式</h6><p>ET(edge-triggered)是高速工作方式，只支持no-block socket。在这种模式下，当描述符从未就绪变为就绪时，内核通过epoll告诉你。然后它会假设你知道文件描述符已经就绪，并且不会再为那个文件描述符发送更多的就绪通知，直到你做了某些操作导致那个文件描述符不再为就绪状态了(比如，你在发送，接收或者接收请求，或者发送接收的数据少于一定量时导致了一个EWOULDBLOCK 错误）。但是请注意，如果一直不对这个fd作IO操作(从而导致它再次变成未就绪)，内核不会发送更多的通知(only once)</p>\n<p>ET模式在很大程度上减少了epoll事件被重复触发的次数，因此效率要比LT模式高。epoll工作在ET模式的时候，必须使用非阻塞套接口，以避免由于一个文件句柄的阻塞读/阻塞写操作把处理多个文件描述符的任务饿死。</p>\n<h6 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h6><p><strong>假如有这样一个例子：</strong><br>\\1. 我们已经把一个用来从管道中读取数据的文件句柄(RFD)添加到epoll描述符<br>\\2. 这个时候从管道的另一端被写入了2KB的数据<br>\\3. 调用epoll_wait(2)，并且它会返回RFD，说明它已经准备好读取操作<br>\\4. 然后我们读取了1KB的数据<br>\\5. 调用epoll_wait(2)……</p>\n<p><strong>LT模式：</strong><br>如果是LT模式，那么在第5步调用epoll_wait(2)之后，仍然能受到通知。</p>\n<p><strong>ET模式：</strong><br>如果我们在第1步将RFD添加到epoll描述符的时候使用了EPOLLET标志，那么在第5步调用epoll_wait(2)之后将有可能会挂起，因为剩余的数据还存在于文件的输入缓冲区内，而且数据发出端还在等待一个针对已经发出数据的反馈信息。只有在监视的文件句柄上发生了某个事件的时候 ET 工作模式才会汇报事件。因此在第5步的时候，调用者可能会放弃等待仍在存在于文件输入缓冲区内的剩余数据。</p>\n<p>当使用epoll的ET模型来工作时，当产生了一个EPOLLIN事件后，<br>读数据的时候需要考虑的是当recv()返回的大小如果等于请求的大小，那么很有可能是缓冲区还有数据未读完，也意味着该次事件还没有处理完，所以还需要再次读取：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while(rs)&#123;</span><br><span class=\"line\">  buflen &#x3D; recv(activeevents[i].data.fd, buf, sizeof(buf), 0);</span><br><span class=\"line\">  if(buflen &lt; 0)&#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 由于是非阻塞的模式,所以当errno为EAGAIN时,表示当前缓冲区已无数据可读</span><br><span class=\"line\">    &#x2F;&#x2F; 在这里就当作是该次事件已处理处.</span><br><span class=\"line\">    if(errno &#x3D;&#x3D; EAGAIN)&#123;</span><br><span class=\"line\">        break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else&#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  else if(buflen &#x3D;&#x3D; 0)&#123;</span><br><span class=\"line\">     &#x2F;&#x2F; 这里表示对端的socket已正常关闭.</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> if(buflen &#x3D;&#x3D; sizeof(buf)&#123;</span><br><span class=\"line\">      rs &#x3D; 1;   &#x2F;&#x2F; 需要再次读取</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> else&#123;</span><br><span class=\"line\">      rs &#x3D; 0;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>  <strong>Linux中的EAGAIN含义</strong></p>\n</blockquote>\n<p>Linux环境下开发经常会碰到很多错误(设置errno)，其中EAGAIN是其中比较常见的一个错误(比如用在非阻塞操作中)。<br>从字面上来看，是提示再试一次。这个错误经常出现在当应用程序进行一些非阻塞(non-blocking)操作(对文件或socket)的时候。</p>\n<p>例如，以 O_NONBLOCK的标志打开文件/socket/FIFO，如果你连续做read操作而没有数据可读。此时程序不会阻塞起来等待数据准备就绪返回，read函数会返回一个错误EAGAIN，提示你的应用程序现在没有数据可读请稍后再试。<br>又例如，当一个系统调用(比如fork)因为没有足够的资源(比如虚拟内存)而执行失败，返回EAGAIN提示其再调用一次(也许下次就能成功)。</p>\n<h5 id=\"代码演示\"><a href=\"#代码演示\" class=\"headerlink\" title=\"代码演示\"></a>代码演示</h5><p>下面是一段不完整的代码且格式不对，意在表述上面的过程，去掉了一些模板代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define IPADDRESS   &quot;127.0.0.1&quot;</span><br><span class=\"line\">#define PORT        8787</span><br><span class=\"line\">#define MAXSIZE     1024</span><br><span class=\"line\">#define LISTENQ     5</span><br><span class=\"line\">#define FDSIZE      1000</span><br><span class=\"line\">#define EPOLLEVENTS 100</span><br><span class=\"line\"></span><br><span class=\"line\">listenfd &#x3D; socket_bind(IPADDRESS,PORT);</span><br><span class=\"line\"></span><br><span class=\"line\">struct epoll_event events[EPOLLEVENTS];</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;创建一个描述符</span><br><span class=\"line\">epollfd &#x3D; epoll_create(FDSIZE);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;添加监听描述符事件</span><br><span class=\"line\">add_event(epollfd,listenfd,EPOLLIN);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;循环等待</span><br><span class=\"line\">for ( ; ; )&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;该函数返回已经准备好的描述符事件数目</span><br><span class=\"line\">    ret &#x3D; epoll_wait(epollfd,events,EPOLLEVENTS,-1);</span><br><span class=\"line\">    &#x2F;&#x2F;处理接收到的连接</span><br><span class=\"line\">    handle_events(epollfd,events,ret,listenfd,buf);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;事件处理函数</span><br><span class=\"line\">static void handle_events(int epollfd,struct epoll_event *events,int num,int listenfd,char *buf)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     int i;</span><br><span class=\"line\">     int fd;</span><br><span class=\"line\">     &#x2F;&#x2F;进行遍历;这里只要遍历已经准备好的io事件。num并不是当初epoll_create时的FDSIZE。</span><br><span class=\"line\">     for (i &#x3D; 0;i &lt; num;i++)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">         fd &#x3D; events[i].data.fd;</span><br><span class=\"line\">        &#x2F;&#x2F;根据描述符的类型和事件类型进行处理</span><br><span class=\"line\">         if ((fd &#x3D;&#x3D; listenfd) &amp;&amp;(events[i].events &amp; EPOLLIN))</span><br><span class=\"line\">            handle_accpet(epollfd,listenfd);</span><br><span class=\"line\">         else if (events[i].events &amp; EPOLLIN)</span><br><span class=\"line\">            do_read(epollfd,fd,buf);</span><br><span class=\"line\">         else if (events[i].events &amp; EPOLLOUT)</span><br><span class=\"line\">            do_write(epollfd,fd,buf);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;添加事件</span><br><span class=\"line\">static void add_event(int epollfd,int fd,int state)&#123;</span><br><span class=\"line\">    struct epoll_event ev;</span><br><span class=\"line\">    ev.events &#x3D; state;</span><br><span class=\"line\">    ev.data.fd &#x3D; fd;</span><br><span class=\"line\">    epoll_ctl(epollfd,EPOLL_CTL_ADD,fd,&amp;ev);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;处理接收到的连接</span><br><span class=\"line\">static void handle_accpet(int epollfd,int listenfd)&#123;</span><br><span class=\"line\">     int clifd;     </span><br><span class=\"line\">     struct sockaddr_in cliaddr;     </span><br><span class=\"line\">     socklen_t  cliaddrlen;     </span><br><span class=\"line\">     clifd &#x3D; accept(listenfd,(struct sockaddr*)&amp;cliaddr,&amp;cliaddrlen);     </span><br><span class=\"line\">     if (clifd &#x3D;&#x3D; -1)         </span><br><span class=\"line\">     perror(&quot;accpet error:&quot;);     </span><br><span class=\"line\">     else &#123;         </span><br><span class=\"line\">         printf(&quot;accept a new client: %s:%d\\n&quot;,inet_ntoa(cliaddr.sin_addr),cliaddr.sin_port);                       &#x2F;&#x2F;添加一个客户描述符和事件         </span><br><span class=\"line\">         add_event(epollfd,clifd,EPOLLIN);     </span><br><span class=\"line\">     &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;读处理</span><br><span class=\"line\">static void do_read(int epollfd,int fd,char *buf)&#123;</span><br><span class=\"line\">    int nread;</span><br><span class=\"line\">    nread &#x3D; read(fd,buf,MAXSIZE);</span><br><span class=\"line\">    if (nread &#x3D;&#x3D; -1)     &#123;         </span><br><span class=\"line\">        perror(&quot;read error:&quot;);         </span><br><span class=\"line\">        close(fd); &#x2F;&#x2F;记住close fd        </span><br><span class=\"line\">        delete_event(epollfd,fd,EPOLLIN); &#x2F;&#x2F;删除监听 </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else if (nread &#x3D;&#x3D; 0)     &#123;         </span><br><span class=\"line\">        fprintf(stderr,&quot;client close.\\n&quot;);</span><br><span class=\"line\">        close(fd); &#x2F;&#x2F;记住close fd       </span><br><span class=\"line\">        delete_event(epollfd,fd,EPOLLIN); &#x2F;&#x2F;删除监听 </span><br><span class=\"line\">    &#125;     </span><br><span class=\"line\">    else &#123;         </span><br><span class=\"line\">        printf(&quot;read message is : %s&quot;,buf);        </span><br><span class=\"line\">        &#x2F;&#x2F;修改描述符对应的事件，由读改为写         </span><br><span class=\"line\">        modify_event(epollfd,fd,EPOLLOUT);     </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;写处理</span><br><span class=\"line\">static void do_write(int epollfd,int fd,char *buf) &#123;     </span><br><span class=\"line\">    int nwrite;     </span><br><span class=\"line\">    nwrite &#x3D; write(fd,buf,strlen(buf));     </span><br><span class=\"line\">    if (nwrite &#x3D;&#x3D; -1)&#123;         </span><br><span class=\"line\">        perror(&quot;write error:&quot;);        </span><br><span class=\"line\">        close(fd);   &#x2F;&#x2F;记住close fd       </span><br><span class=\"line\">        delete_event(epollfd,fd,EPOLLOUT);  &#x2F;&#x2F;删除监听    </span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        modify_event(epollfd,fd,EPOLLIN); </span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">    memset(buf,0,MAXSIZE); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;删除事件</span><br><span class=\"line\">static void delete_event(int epollfd,int fd,int state) &#123;</span><br><span class=\"line\">    struct epoll_event ev;</span><br><span class=\"line\">    ev.events &#x3D; state;</span><br><span class=\"line\">    ev.data.fd &#x3D; fd;</span><br><span class=\"line\">    epoll_ctl(epollfd,EPOLL_CTL_DEL,fd,&amp;ev);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;修改事件</span><br><span class=\"line\">static void modify_event(int epollfd,int fd,int state)&#123;     </span><br><span class=\"line\">    struct epoll_event ev;</span><br><span class=\"line\">    ev.events &#x3D; state;</span><br><span class=\"line\">    ev.data.fd &#x3D; fd;</span><br><span class=\"line\">    epoll_ctl(epollfd,EPOLL_CTL_MOD,fd,&amp;ev);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;注：另外一端我就省了</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"epoll总结\"><a href=\"#epoll总结\" class=\"headerlink\" title=\"epoll总结\"></a>epoll总结</h5><p>在 select/poll中，进程只有在调用一定的方法后，内核才对所有监视的文件描述符进行扫描，而<strong>epoll事先通过epoll_ctl()来注册一 个文件描述符，一旦基于某个文件描述符就绪时，内核会采用类似callback的回调机制，迅速激活这个文件描述符，当进程调用epoll_wait() 时便得到通知</strong>。(<code>此处去掉了遍历文件描述符，而是通过监听回调的的机制</code>。这正是epoll的魅力所在。)</p>\n<p><strong>epoll的优点主要是一下几个方面：</strong><br>\\1. 监视的描述符数量不受限制，它所支持的FD上限是最大可以打开文件的数目，这个数字一般远大于2048,举个例子,在1GB内存的机器上大约是10万左 右，具体数目可以cat /proc/sys/fs/file-max察看,一般来说这个数目和系统内存关系很大。select的最大缺点就是进程打开的fd是有数量限制的。这对 于连接数量比较大的服务器来说根本不能满足。虽然也可以选择多进程的解决方案( Apache就是这样实现的)，不过虽然linux上面创建进程的代价比较小，但仍旧是不可忽视的，加上进程间数据同步远比不上线程间同步的高效，所以也不是一种完美的方案。</p>\n<ol>\n<li> IO的效率不会随着监视fd的数量的增长而下降。epoll不同于select和poll轮询的方式，而是通过每个fd定义的回调函数来实现的。只有就绪的fd才会执行回调函数。</li>\n</ol>\n<blockquote>\n<p>  如果没有大量的idle -connection或者dead-connection，epoll的效率并不会比select/poll高很多，但是当遇到大量的idle- connection，就会发现epoll的效率大大高于select/poll。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Longtao-W/pics@main/20211025/1635139551R-C.33d57d1aac13ec6a4e7f917e0a47bb69?rik=o/uWsKRpOPc7MA&riu=http://www.thomas-krenn.com/de/wikiDE/images/d/da/Linux-io-stack-diagram_v1.0.png&ehk=1OGRYIpfyG0jiVPRMEKwfpXnNXxZpCQUOMRDg4u7Pz0=&risl=&pid=ImgRaw&r=0\" alt=\"See the source image\"></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://www.cnblogs.com/Anker/p/3269106.html\">用户空间与内核空间，进程上下文与中断上下文总结]</a><br><a href=\"http://guojing.me/linux-kernel-architecture/posts/process-switch/\">进程切换</a><br><a href=\"https://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6\">维基百科-文件描述符</a><br><a href=\"http://www.ibm.com/developerworks/cn/linux/l-cn-directio/\">Linux 中直接 I/O 机制的介绍</a><br><a href=\"http://blog.csdn.net/historyasamirror/article/details/5778378\">IO - 同步，异步，阻塞，非阻塞 （亡羊补牢篇）</a><br><a href=\"http://www.cnblogs.com/bigwangdi/p/3182958.html\">Linux中select poll和epoll的区别</a><br><a href=\"http://www.cnblogs.com/Anker/archive/2013/08/14/3258674.html\">IO多路复用之select总结</a><br><a href=\"http://www.cnblogs.com/Anker/archive/2013/08/15/3261006.html\">IO多路复用之poll总结</a><br><a href=\"http://www.cnblogs.com/Anker/archive/2013/08/17/3263780.html\">IO多路复用之epoll总结</a></p>\n","categories":[{"name":"编程技术","path":"api/categories/编程技术.json"}],"tags":[{"name":"编程原理","path":"api/tags/编程原理.json"},{"name":"linux","path":"api/tags/linux.json"}]}