{"title":"shc与upx加密混淆压缩","slug":"systemstructure/linux/shcandupx","date":"2021-04-25T15:27:21.000Z","updated":"2024-06-30T10:35:56.308Z","comments":true,"path":"api/articles/systemstructure/linux/shcandupx.json","excerpt":null,"covers":null,"content":"<p>[toc]</p>\n<h2 id=\"shc混淆\"><a href=\"#shc混淆\" class=\"headerlink\" title=\"shc混淆\"></a>shc混淆</h2><h3 id=\"shc安装\"><a href=\"#shc安装\" class=\"headerlink\" title=\"shc安装\"></a>shc安装</h3><p>从官网下载<a href=\"http://www.datsi.fi.upm.es/~frosal/sources/\">http://www.datsi.fi.upm.es/~frosal/sources/</a> (最新2015年的shc-3.8.9b.tgz)，或者源码下载<a href=\"https://github.com/neurobin/shc\">https://github.com/neurobin/shc</a> (有最新的)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://www.datsi.fi.upm.es/~frosal/sources/shc-3.8.9b.tgz</span><br><span class=\"line\">tar zxvf shc-3.8.9b.tgz</span><br><span class=\"line\">cd shc-3.8.9b</span><br><span class=\"line\">make clean</span><br><span class=\"line\">make test # 等待paused 然后回车</span><br><span class=\"line\">make strings&amp;install # 等待继续输入yes</span><br></pre></td></tr></table></figure>\n\n<p>shc命令说明</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-e %s  Expiration date in dd/mm/yyyy format [none]</span><br><span class=\"line\">-m %s  Message to display upon expiration [&quot;Please contact your provider&quot;]</span><br><span class=\"line\">-f %s  File name of the script to compile</span><br><span class=\"line\">-i %s  Inline option for the shell interpreter i.e: -e</span><br><span class=\"line\">-x %s  eXec command, as a printf format i.e: exec(&#x27;%s&#x27;,@ARGV);</span><br><span class=\"line\">-l %s  Last shell option i.e: --</span><br><span class=\"line\">-r     Relax security. Make a redistributable binary</span><br><span class=\"line\">-v     Verbose compilation</span><br><span class=\"line\">-D     Switch ON debug exec calls [OFF]</span><br><span class=\"line\">-T     Allow binary to be traceable [no]</span><br><span class=\"line\">-C     Display license and exit</span><br><span class=\"line\">-A     Display abstract and exit</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用shc给hello-world脚本加密\"><a href=\"#使用shc给hello-world脚本加密\" class=\"headerlink\" title=\"使用shc给hello world脚本加密\"></a>使用shc给hello world脚本加密</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 我们先创建一个sh</span></span><br><span class=\"line\">[root@localhost ~]# echo &#x27;#!/bin/bash&#x27; &gt; hello.sh;echo &quot;echo hello world&quot; &gt;&gt; hello.sh</span><br><span class=\"line\">[root@localhost ~]# chmod +x hello.sh;./hello.sh</span><br><span class=\"line\">hello world</span><br><span class=\"line\">[root@localhost ~]# shc -f hello.sh</span><br><span class=\"line\">[root@localhost ~]# ./hello.sh.x</span><br><span class=\"line\">hello world</span><br></pre></td></tr></table></figure>\n\n<p>我们使用readelf查看发现是elf文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@172-20-65-67 ~]# readelf -h hello.sh.x </span><br><span class=\"line\">ELF 头：</span><br><span class=\"line\">  Magic：  7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 </span><br><span class=\"line\">  Class:                             ELF64</span><br><span class=\"line\">  Data:                              2&#x27;s complement, little endian</span><br><span class=\"line\">  Version:                           1 (current)</span><br><span class=\"line\">  OS/ABI:                            UNIX - System V</span><br><span class=\"line\">  ABI Version:                       0</span><br><span class=\"line\">  Type:                              EXEC (可执行文件)</span><br><span class=\"line\">  Machine:                           Advanced Micro Devices X86-64</span><br><span class=\"line\">  Version:                           0x1</span><br><span class=\"line\">  入口点地址：              0x400d00</span><br><span class=\"line\">  程序头起点：              64 (bytes into file)</span><br><span class=\"line\">  Start of section headers:          9376 (bytes into file)</span><br><span class=\"line\">  标志：             0x0</span><br><span class=\"line\">  本头的大小：       64 (字节)</span><br><span class=\"line\">  程序头大小：       56 (字节)</span><br><span class=\"line\">  Number of program headers:         9</span><br><span class=\"line\">  节头大小：         64 (字节)</span><br><span class=\"line\">  节头数量：         28</span><br><span class=\"line\">  字符串表索引节头： 27</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"shc简单的原理介绍\"><a href=\"#shc简单的原理介绍\" class=\"headerlink\" title=\"shc简单的原理介绍\"></a>shc简单的原理介绍</h3><p>我们在使用<code>shc -f hello.sh</code>时会发现还生成了一个hello.sh.x.c的文件，阅读c我们知道shc是将脚本用rc4进行加密，然后将加密后的脚本、密钥、解密程序再用c编译成elf文件，在执行elf时再将加密的脚本解密运行。  看了shc的混淆方式，我们也可以用其他编译行语言(例如go、rust、c++)等自己实现，更换加解密算法，甚至不用加解密算法。</p>\n<h3 id=\"从shc-可执行文件获取源码-逆向\"><a href=\"#从shc-可执行文件获取源码-逆向\" class=\"headerlink\" title=\"从shc 可执行文件获取源码(逆向)\"></a>从shc 可执行文件获取源码(逆向)</h3><ol>\n<li>使用IDA等反编译工具动态调试，找解密后的函数</li>\n<li>使用coredump 从内存读取。</li>\n<li>使用一些现有的工具，例如<a href=\"https://github.com/yanncam/UnSHc%EF%BC%8C%E6%96%B0%E7%9A%84shc%E5%8A%A0%E5%85%A5%E4%BA%86linux%E5%86%85%E6%A0%B8%E6%9C%AC%E8%BA%AB%E7%9A%84%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%EF%BC%8C%E5%A5%BD%E5%83%8F%E4%B8%8D%E8%83%BD%E7%94%A8%E4%BA%86\">https://github.com/yanncam/UnSHc，新的shc加入了linux内核本身的安全机制，好像不能用了</a></li>\n</ol>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><ol>\n<li>使用gzexe混淆</li>\n<li> shc -e 过期时间挺好用的</li>\n</ol>\n<h2 id=\"使用upx加壳\"><a href=\"#使用upx加壳\" class=\"headerlink\" title=\"使用upx加壳\"></a>使用upx加壳</h2><h3 id=\"upx安装\"><a href=\"#upx安装\" class=\"headerlink\" title=\"upx安装\"></a>upx安装</h3><p>从<a href=\"https://github.com/upx/upx\">https://github.com/upx/upx</a> 下载源码安装或其他包管理器安装</p>\n<h3 id=\"upx-演示\"><a href=\"#upx-演示\" class=\"headerlink\" title=\"upx 演示\"></a>upx 演示</h3><p>在我们刚刚使用shc对helloworld脚本编译生成elf后，我们可以使用upx对此elf进行加壳压缩，也算是一种混淆方式</p>\n<p>upx压缩前 11k</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@172-20-65-67 ~]# ls -lh ./hello.sh.x</span><br><span class=\"line\">-rwx--x--x. 1 root root 11K 7月  23 10:19 ./hello.sh.x</span><br></pre></td></tr></table></figure>\n\n<p>upx 压缩后 6.9k, -9代表压缩等级（1-9,9个等级）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@172-20-65-67 ~]# upx -9 ./hello.sh.x;ls -lh ./hello.sh.x</span><br><span class=\"line\">                       Ultimate Packer for eXecutables</span><br><span class=\"line\">                          Copyright (C) 1996 - 2013</span><br><span class=\"line\">UPX 3.91        Markus Oberhumer, Laszlo Molnar &amp; John Reiser   Sep 30th 2013</span><br><span class=\"line\"></span><br><span class=\"line\">        File size         Ratio      Format      Name</span><br><span class=\"line\">   --------------------   ------   -----------   -----------</span><br><span class=\"line\">     11168 -&gt;      7004   62.71%  linux/ElfAMD   hello.sh.x                    </span><br><span class=\"line\"></span><br><span class=\"line\">Packed 1 file.</span><br><span class=\"line\">-rwx--x--x. 1 root root 6.9K 7月  23 10:19 ./hello.sh.x</span><br></pre></td></tr></table></figure>\n\n<p>我们压缩后的helloworld依然正常运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@172-20-65-67 ~]# ./hello.sh.x </span><br><span class=\"line\">hello world</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"upx原理\"><a href=\"#upx原理\" class=\"headerlink\" title=\"upx原理\"></a>upx原理</h3><p>对elf文件进行压缩并插入解压代码，在运行时（加载到内存时）解压代码</p>\n<h3 id=\"脱壳工具\"><a href=\"#脱壳工具\" class=\"headerlink\" title=\"脱壳工具\"></a>脱壳工具</h3><p>略</p>\n","more":"<p>[toc]</p>\n<h2 id=\"shc混淆\"><a href=\"#shc混淆\" class=\"headerlink\" title=\"shc混淆\"></a>shc混淆</h2><h3 id=\"shc安装\"><a href=\"#shc安装\" class=\"headerlink\" title=\"shc安装\"></a>shc安装</h3><p>从官网下载<a href=\"http://www.datsi.fi.upm.es/~frosal/sources/\">http://www.datsi.fi.upm.es/~frosal/sources/</a> (最新2015年的shc-3.8.9b.tgz)，或者源码下载<a href=\"https://github.com/neurobin/shc\">https://github.com/neurobin/shc</a> (有最新的)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://www.datsi.fi.upm.es/~frosal/sources/shc-3.8.9b.tgz</span><br><span class=\"line\">tar zxvf shc-3.8.9b.tgz</span><br><span class=\"line\">cd shc-3.8.9b</span><br><span class=\"line\">make clean</span><br><span class=\"line\">make test # 等待paused 然后回车</span><br><span class=\"line\">make strings&amp;install # 等待继续输入yes</span><br></pre></td></tr></table></figure>\n\n<p>shc命令说明</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-e %s  Expiration date in dd/mm/yyyy format [none]</span><br><span class=\"line\">-m %s  Message to display upon expiration [&quot;Please contact your provider&quot;]</span><br><span class=\"line\">-f %s  File name of the script to compile</span><br><span class=\"line\">-i %s  Inline option for the shell interpreter i.e: -e</span><br><span class=\"line\">-x %s  eXec command, as a printf format i.e: exec(&#x27;%s&#x27;,@ARGV);</span><br><span class=\"line\">-l %s  Last shell option i.e: --</span><br><span class=\"line\">-r     Relax security. Make a redistributable binary</span><br><span class=\"line\">-v     Verbose compilation</span><br><span class=\"line\">-D     Switch ON debug exec calls [OFF]</span><br><span class=\"line\">-T     Allow binary to be traceable [no]</span><br><span class=\"line\">-C     Display license and exit</span><br><span class=\"line\">-A     Display abstract and exit</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用shc给hello-world脚本加密\"><a href=\"#使用shc给hello-world脚本加密\" class=\"headerlink\" title=\"使用shc给hello world脚本加密\"></a>使用shc给hello world脚本加密</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 我们先创建一个sh</span></span><br><span class=\"line\">[root@localhost ~]# echo &#x27;#!/bin/bash&#x27; &gt; hello.sh;echo &quot;echo hello world&quot; &gt;&gt; hello.sh</span><br><span class=\"line\">[root@localhost ~]# chmod +x hello.sh;./hello.sh</span><br><span class=\"line\">hello world</span><br><span class=\"line\">[root@localhost ~]# shc -f hello.sh</span><br><span class=\"line\">[root@localhost ~]# ./hello.sh.x</span><br><span class=\"line\">hello world</span><br></pre></td></tr></table></figure>\n\n<p>我们使用readelf查看发现是elf文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@172-20-65-67 ~]# readelf -h hello.sh.x </span><br><span class=\"line\">ELF 头：</span><br><span class=\"line\">  Magic：  7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 </span><br><span class=\"line\">  Class:                             ELF64</span><br><span class=\"line\">  Data:                              2&#x27;s complement, little endian</span><br><span class=\"line\">  Version:                           1 (current)</span><br><span class=\"line\">  OS/ABI:                            UNIX - System V</span><br><span class=\"line\">  ABI Version:                       0</span><br><span class=\"line\">  Type:                              EXEC (可执行文件)</span><br><span class=\"line\">  Machine:                           Advanced Micro Devices X86-64</span><br><span class=\"line\">  Version:                           0x1</span><br><span class=\"line\">  入口点地址：              0x400d00</span><br><span class=\"line\">  程序头起点：              64 (bytes into file)</span><br><span class=\"line\">  Start of section headers:          9376 (bytes into file)</span><br><span class=\"line\">  标志：             0x0</span><br><span class=\"line\">  本头的大小：       64 (字节)</span><br><span class=\"line\">  程序头大小：       56 (字节)</span><br><span class=\"line\">  Number of program headers:         9</span><br><span class=\"line\">  节头大小：         64 (字节)</span><br><span class=\"line\">  节头数量：         28</span><br><span class=\"line\">  字符串表索引节头： 27</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"shc简单的原理介绍\"><a href=\"#shc简单的原理介绍\" class=\"headerlink\" title=\"shc简单的原理介绍\"></a>shc简单的原理介绍</h3><p>我们在使用<code>shc -f hello.sh</code>时会发现还生成了一个hello.sh.x.c的文件，阅读c我们知道shc是将脚本用rc4进行加密，然后将加密后的脚本、密钥、解密程序再用c编译成elf文件，在执行elf时再将加密的脚本解密运行。  看了shc的混淆方式，我们也可以用其他编译行语言(例如go、rust、c++)等自己实现，更换加解密算法，甚至不用加解密算法。</p>\n<h3 id=\"从shc-可执行文件获取源码-逆向\"><a href=\"#从shc-可执行文件获取源码-逆向\" class=\"headerlink\" title=\"从shc 可执行文件获取源码(逆向)\"></a>从shc 可执行文件获取源码(逆向)</h3><ol>\n<li>使用IDA等反编译工具动态调试，找解密后的函数</li>\n<li>使用coredump 从内存读取。</li>\n<li>使用一些现有的工具，例如<a href=\"https://github.com/yanncam/UnSHc%EF%BC%8C%E6%96%B0%E7%9A%84shc%E5%8A%A0%E5%85%A5%E4%BA%86linux%E5%86%85%E6%A0%B8%E6%9C%AC%E8%BA%AB%E7%9A%84%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%EF%BC%8C%E5%A5%BD%E5%83%8F%E4%B8%8D%E8%83%BD%E7%94%A8%E4%BA%86\">https://github.com/yanncam/UnSHc，新的shc加入了linux内核本身的安全机制，好像不能用了</a></li>\n</ol>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><ol>\n<li>使用gzexe混淆</li>\n<li> shc -e 过期时间挺好用的</li>\n</ol>\n<h2 id=\"使用upx加壳\"><a href=\"#使用upx加壳\" class=\"headerlink\" title=\"使用upx加壳\"></a>使用upx加壳</h2><h3 id=\"upx安装\"><a href=\"#upx安装\" class=\"headerlink\" title=\"upx安装\"></a>upx安装</h3><p>从<a href=\"https://github.com/upx/upx\">https://github.com/upx/upx</a> 下载源码安装或其他包管理器安装</p>\n<h3 id=\"upx-演示\"><a href=\"#upx-演示\" class=\"headerlink\" title=\"upx 演示\"></a>upx 演示</h3><p>在我们刚刚使用shc对helloworld脚本编译生成elf后，我们可以使用upx对此elf进行加壳压缩，也算是一种混淆方式</p>\n<p>upx压缩前 11k</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@172-20-65-67 ~]# ls -lh ./hello.sh.x</span><br><span class=\"line\">-rwx--x--x. 1 root root 11K 7月  23 10:19 ./hello.sh.x</span><br></pre></td></tr></table></figure>\n\n<p>upx 压缩后 6.9k, -9代表压缩等级（1-9,9个等级）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@172-20-65-67 ~]# upx -9 ./hello.sh.x;ls -lh ./hello.sh.x</span><br><span class=\"line\">                       Ultimate Packer for eXecutables</span><br><span class=\"line\">                          Copyright (C) 1996 - 2013</span><br><span class=\"line\">UPX 3.91        Markus Oberhumer, Laszlo Molnar &amp; John Reiser   Sep 30th 2013</span><br><span class=\"line\"></span><br><span class=\"line\">        File size         Ratio      Format      Name</span><br><span class=\"line\">   --------------------   ------   -----------   -----------</span><br><span class=\"line\">     11168 -&gt;      7004   62.71%  linux/ElfAMD   hello.sh.x                    </span><br><span class=\"line\"></span><br><span class=\"line\">Packed 1 file.</span><br><span class=\"line\">-rwx--x--x. 1 root root 6.9K 7月  23 10:19 ./hello.sh.x</span><br></pre></td></tr></table></figure>\n\n<p>我们压缩后的helloworld依然正常运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@172-20-65-67 ~]# ./hello.sh.x </span><br><span class=\"line\">hello world</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"upx原理\"><a href=\"#upx原理\" class=\"headerlink\" title=\"upx原理\"></a>upx原理</h3><p>对elf文件进行压缩并插入解压代码，在运行时（加载到内存时）解压代码</p>\n<h3 id=\"脱壳工具\"><a href=\"#脱壳工具\" class=\"headerlink\" title=\"脱壳工具\"></a>脱壳工具</h3><p>略</p>\n","categories":[{"name":"编程技术","path":"api/categories/编程技术.json"}],"tags":[{"name":"编程原理","path":"api/tags/编程原理.json"},{"name":"linux","path":"api/tags/linux.json"}]}