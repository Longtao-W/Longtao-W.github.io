{"title":"计算机体系架构","slug":"systemstructure/base/nounsofcomputersystem","date":"2020-02-12T13:20:21.000Z","updated":"2024-06-30T10:35:56.308Z","comments":true,"path":"api/articles/systemstructure/base/nounsofcomputersystem.json","excerpt":null,"covers":["https://upload.wikimedia.org/wikipedia/commons/5/53/Intel_5_Series_architecture.png"],"content":"<p>[toc]</p>\n<h1 id=\"cpu\"><a href=\"#cpu\" class=\"headerlink\" title=\"cpu\"></a>cpu</h1><h3 id=\"socket-s\"><a href=\"#socket-s\" class=\"headerlink\" title=\"socket(s)\"></a>socket(s)</h3><p>主板上物理CPU插槽</p>\n<h3 id=\"cpu-die\"><a href=\"#cpu-die\" class=\"headerlink\" title=\"cpu die\"></a>cpu die</h3><p>Die指从晶圆上切割下来的小方块，一个die内可能存在多个cpu内核，一个或多个Die可封装成一个CPU package(cpu socket)。</p>\n<p>die之间通过片外总线互联，不同die之间的cpu内核不能共享cpu缓存(cache)，die内内核可共享L3 cache</p>\n<h3 id=\"NUMA-nodes\"><a href=\"#NUMA-nodes\" class=\"headerlink\" title=\"NUMA nodes\"></a>NUMA nodes</h3><p>一个socket可以划分多个NUMA node</p>\n<ul>\n<li>NUMA 引入了本地内存和远程内存，CPU 访问本地内存的延迟会小于访问远程内存；</li>\n<li>NUMA 的内存分配与内存回收策略结合时会可能会导致 Linux 的频繁交换分区（Swap）进而影响系统的稳定性</li>\n</ul>\n<h3 id=\"Core\"><a href=\"#Core\" class=\"headerlink\" title=\"Core\"></a>Core</h3><p>CPU的内核，一般一个socket含有多个Core</p>\n<h3 id=\"Thread-s\"><a href=\"#Thread-s\" class=\"headerlink\" title=\"Thread(s)\"></a>Thread(s)</h3><p>超线程技术，一个core包含多个并行处理任务的thread，thread有独立执行上下文，共享内部寄存器，我们常说(看)的</p>\n<h1 id=\"主板\"><a href=\"#主板\" class=\"headerlink\" title=\"主板\"></a>主板</h1><h3 id=\"PCH-蓝厂南桥，Platform-Controller-Hub\"><a href=\"#PCH-蓝厂南桥，Platform-Controller-Hub\" class=\"headerlink\" title=\"PCH(蓝厂南桥，Platform Controller Hub)\"></a>PCH(蓝厂南桥，Platform Controller Hub)</h3><p><img src= \"/img/loading.gif\" data-lazy-src=\"https://upload.wikimedia.org/wikipedia/commons/5/53/Intel_5_Series_architecture.png\" alt=\"img\"></p>\n<p>淘汰南北桥设计，即将被SOP(不用DMI，用PCIe、USB等)淘汰，功能一直在增删</p>\n<p>PCH具有原来ICH(I/O controller hub,南桥)的全部功能，又具有原来MCH(memory control hub,北桥)的管理引擎功能</p>\n<h3 id=\"mmu-memory-management-unit，内存管理单元\"><a href=\"#mmu-memory-management-unit，内存管理单元\" class=\"headerlink\" title=\"mmu(memory management unit，内存管理单元)\"></a>mmu(memory management unit，内存管理单元)</h3><p>负责处理cpu的内存访问请求的计算机硬件</p>\n<p>功能：虚拟地址到物理地址转换、内存保护、cpu告诉缓存控制</p>\n<h4 id=\"虚拟内存管理技术\"><a href=\"#虚拟内存管理技术\" class=\"headerlink\" title=\"虚拟内存管理技术\"></a>虚拟内存管理技术</h4><p>早期PC 程序直接运行在屋里内存上，有下面几个缺点：</p>\n<ol>\n<li>物理内存不够，如，程序需要100k，物理内存只有64k</li>\n<li>程序每次装载到内存地址不一样</li>\n<li>内存使用率低，需要将整个程序放入内存才能运行</li>\n<li>多任务操作系统，多个进程间地址空间不隔离，一个任务失败可能导致整个系统崩溃</li>\n</ol>\n<h4 id=\"MMU的分页技术\"><a href=\"#MMU的分页技术\" class=\"headerlink\" title=\"MMU的分页技术\"></a>MMU的分页技术</h4><p>虚拟地址空间划分成页(page)，物理地址分成页框(frame)，页和页框大小相同，程序访问虚拟内存，虚拟内存对应物理内存，物理内存并不一定存着虚拟内存所需要的页，可能存在外存中。</p>\n<h1 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h1><h3 id=\"网络字节序\"><a href=\"#网络字节序\" class=\"headerlink\" title=\"网络字节序\"></a>网络字节序</h3><p>msb：most significant bit,最高有效位，二进制中的msb是最高位</p>\n<p>lsb：least significant bit, 最低有效位，二进制中的lsb事最后一位</p>\n<p>大端模式：big-endian，数据高位字节放内存低地址端</p>\n<p>小端模式：little-eendian，数据低位字节放内存低地址端</p>\n<p>主机可能大端也可能小端</p>\n<p>网络字节序与cpu类型、操作系统无关，网络字节序采用大端模式</p>\n<h1 id=\"存储\"><a href=\"#存储\" class=\"headerlink\" title=\"存储\"></a>存储</h1><h1 id=\"体系技术\"><a href=\"#体系技术\" class=\"headerlink\" title=\"体系技术\"></a>体系技术</h1>","more":"<p>[toc]</p>\n<h1 id=\"cpu\"><a href=\"#cpu\" class=\"headerlink\" title=\"cpu\"></a>cpu</h1><h3 id=\"socket-s\"><a href=\"#socket-s\" class=\"headerlink\" title=\"socket(s)\"></a>socket(s)</h3><p>主板上物理CPU插槽</p>\n<h3 id=\"cpu-die\"><a href=\"#cpu-die\" class=\"headerlink\" title=\"cpu die\"></a>cpu die</h3><p>Die指从晶圆上切割下来的小方块，一个die内可能存在多个cpu内核，一个或多个Die可封装成一个CPU package(cpu socket)。</p>\n<p>die之间通过片外总线互联，不同die之间的cpu内核不能共享cpu缓存(cache)，die内内核可共享L3 cache</p>\n<h3 id=\"NUMA-nodes\"><a href=\"#NUMA-nodes\" class=\"headerlink\" title=\"NUMA nodes\"></a>NUMA nodes</h3><p>一个socket可以划分多个NUMA node</p>\n<ul>\n<li>NUMA 引入了本地内存和远程内存，CPU 访问本地内存的延迟会小于访问远程内存；</li>\n<li>NUMA 的内存分配与内存回收策略结合时会可能会导致 Linux 的频繁交换分区（Swap）进而影响系统的稳定性</li>\n</ul>\n<h3 id=\"Core\"><a href=\"#Core\" class=\"headerlink\" title=\"Core\"></a>Core</h3><p>CPU的内核，一般一个socket含有多个Core</p>\n<h3 id=\"Thread-s\"><a href=\"#Thread-s\" class=\"headerlink\" title=\"Thread(s)\"></a>Thread(s)</h3><p>超线程技术，一个core包含多个并行处理任务的thread，thread有独立执行上下文，共享内部寄存器，我们常说(看)的</p>\n<h1 id=\"主板\"><a href=\"#主板\" class=\"headerlink\" title=\"主板\"></a>主板</h1><h3 id=\"PCH-蓝厂南桥，Platform-Controller-Hub\"><a href=\"#PCH-蓝厂南桥，Platform-Controller-Hub\" class=\"headerlink\" title=\"PCH(蓝厂南桥，Platform Controller Hub)\"></a>PCH(蓝厂南桥，Platform Controller Hub)</h3><p><img src=\"https://upload.wikimedia.org/wikipedia/commons/5/53/Intel_5_Series_architecture.png\" alt=\"img\"></p>\n<p>淘汰南北桥设计，即将被SOP(不用DMI，用PCIe、USB等)淘汰，功能一直在增删</p>\n<p>PCH具有原来ICH(I/O controller hub,南桥)的全部功能，又具有原来MCH(memory control hub,北桥)的管理引擎功能</p>\n<h3 id=\"mmu-memory-management-unit，内存管理单元\"><a href=\"#mmu-memory-management-unit，内存管理单元\" class=\"headerlink\" title=\"mmu(memory management unit，内存管理单元)\"></a>mmu(memory management unit，内存管理单元)</h3><p>负责处理cpu的内存访问请求的计算机硬件</p>\n<p>功能：虚拟地址到物理地址转换、内存保护、cpu告诉缓存控制</p>\n<h4 id=\"虚拟内存管理技术\"><a href=\"#虚拟内存管理技术\" class=\"headerlink\" title=\"虚拟内存管理技术\"></a>虚拟内存管理技术</h4><p>早期PC 程序直接运行在屋里内存上，有下面几个缺点：</p>\n<ol>\n<li>物理内存不够，如，程序需要100k，物理内存只有64k</li>\n<li>程序每次装载到内存地址不一样</li>\n<li>内存使用率低，需要将整个程序放入内存才能运行</li>\n<li>多任务操作系统，多个进程间地址空间不隔离，一个任务失败可能导致整个系统崩溃</li>\n</ol>\n<h4 id=\"MMU的分页技术\"><a href=\"#MMU的分页技术\" class=\"headerlink\" title=\"MMU的分页技术\"></a>MMU的分页技术</h4><p>虚拟地址空间划分成页(page)，物理地址分成页框(frame)，页和页框大小相同，程序访问虚拟内存，虚拟内存对应物理内存，物理内存并不一定存着虚拟内存所需要的页，可能存在外存中。</p>\n<h1 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h1><h3 id=\"网络字节序\"><a href=\"#网络字节序\" class=\"headerlink\" title=\"网络字节序\"></a>网络字节序</h3><p>msb：most significant bit,最高有效位，二进制中的msb是最高位</p>\n<p>lsb：least significant bit, 最低有效位，二进制中的lsb事最后一位</p>\n<p>大端模式：big-endian，数据高位字节放内存低地址端</p>\n<p>小端模式：little-eendian，数据低位字节放内存低地址端</p>\n<p>主机可能大端也可能小端</p>\n<p>网络字节序与cpu类型、操作系统无关，网络字节序采用大端模式</p>\n<h1 id=\"存储\"><a href=\"#存储\" class=\"headerlink\" title=\"存储\"></a>存储</h1><h1 id=\"体系技术\"><a href=\"#体系技术\" class=\"headerlink\" title=\"体系技术\"></a>体系技术</h1>","categories":[{"name":"编程技术","path":"api/categories/编程技术.json"}],"tags":[{"name":"编程原理","path":"api/tags/编程原理.json"},{"name":"编程基础","path":"api/tags/编程基础.json"}]}