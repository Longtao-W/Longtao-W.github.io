{"title":"幂等","slug":"systemstructure/web/idempotent","date":"2020-10-23T15:28:21.000Z","updated":"2024-06-30T10:35:56.308Z","comments":true,"path":"api/articles/systemstructure/web/idempotent.json","excerpt":null,"covers":null,"content":"<p>[toc]</p>\n<h2 id=\"幂等去重\"><a href=\"#幂等去重\" class=\"headerlink\" title=\"幂等去重\"></a>幂等去重</h2><p>最近计算节点网络异常时经常出现请求未响应问题，之前的做法是在接收到任务之后与原先存在的任务做比较,进而判断是否为同一个请求的重试，</p>\n<p>主流的MQ实现在 <code>autocommit=true</code> 时天然实现了幂等</p>\n<p>但考虑业务处理可能出错的情况我们一般会将autocommit设置成false，在业务处理成功后再提交，这时就需要使用上述幂等方案了</p>\n<p>在接收到消息时写入请求Token以实现去重判断（Token可为Topic+Offset）提交后删除Token，整体上可以做到对业务透明</p>\n<h2 id=\"函数式编程\"><a href=\"#函数式编程\" class=\"headerlink\" title=\"函数式编程\"></a>函数式编程</h2><ol>\n<li>没有副作用</li>\n</ol>\n<h3 id=\"什么是幂等性\"><a href=\"#什么是幂等性\" class=\"headerlink\" title=\"什么是幂等性\"></a>什么是幂等性</h3><ol>\n<li>数学表述， 多次调用仍为自身，</li>\n<li>不产生副作用</li>\n<li>带上uuid识别是否是相同的请求，避免重复请求</li>\n<li>ACID 2.0 解释，与分布式中的ACID辨析</li>\n<li>stateless 无状态 何时使用，对内维护状态，对外接口无状态+异步。</li>\n</ol>\n","more":"<p>[toc]</p>\n<h2 id=\"幂等去重\"><a href=\"#幂等去重\" class=\"headerlink\" title=\"幂等去重\"></a>幂等去重</h2><p>最近计算节点网络异常时经常出现请求未响应问题，之前的做法是在接收到任务之后与原先存在的任务做比较,进而判断是否为同一个请求的重试，</p>\n<p>主流的MQ实现在 <code>autocommit=true</code> 时天然实现了幂等</p>\n<p>但考虑业务处理可能出错的情况我们一般会将autocommit设置成false，在业务处理成功后再提交，这时就需要使用上述幂等方案了</p>\n<p>在接收到消息时写入请求Token以实现去重判断（Token可为Topic+Offset）提交后删除Token，整体上可以做到对业务透明</p>\n<h2 id=\"函数式编程\"><a href=\"#函数式编程\" class=\"headerlink\" title=\"函数式编程\"></a>函数式编程</h2><ol>\n<li>没有副作用</li>\n</ol>\n<h3 id=\"什么是幂等性\"><a href=\"#什么是幂等性\" class=\"headerlink\" title=\"什么是幂等性\"></a>什么是幂等性</h3><ol>\n<li>数学表述， 多次调用仍为自身，</li>\n<li>不产生副作用</li>\n<li>带上uuid识别是否是相同的请求，避免重复请求</li>\n<li>ACID 2.0 解释，与分布式中的ACID辨析</li>\n<li>stateless 无状态 何时使用，对内维护状态，对外接口无状态+异步。</li>\n</ol>\n","categories":[{"name":"编程技术","path":"api/categories/编程技术.json"}],"tags":[{"name":"编程原理","path":"api/tags/编程原理.json"},{"name":"网络","path":"api/tags/网络.json"}]}