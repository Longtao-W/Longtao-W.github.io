{"title":"jenkins安装","slug":"tools/jenkins","date":"2019-11-27T13:29:31.000Z","updated":"2024-06-30T10:35:56.312Z","comments":true,"path":"api/articles/tools/jenkins.json","excerpt":null,"covers":null,"content":"<h2 id=\"下载镜像\"><a href=\"#下载镜像\" class=\"headerlink\" title=\"下载镜像\"></a>下载镜像</h2><p>打开终端，输入docker search命令搜索 Docker Hub 上可用的 Jenkins 镜像：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker search jenkins</span><br><span class=\"line\">NAME                                         DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class=\"line\">jenkins                                      Official Jenkins Docker image                   4328                [OK]</span><br><span class=\"line\">jenkins&#x2F;jenkins                              The leading open source automation server       1563</span><br><span class=\"line\">jenkinsci&#x2F;blueocean                          https:&#x2F;&#x2F;jenkins.io&#x2F;projects&#x2F;blueocean           399</span><br><span class=\"line\">jenkinsci&#x2F;jenkins                            Jenkins Continuous Integration and Delivery …   367</span><br><span class=\"line\">jenkinsci&#x2F;jnlp-slave                         A Jenkins slave using JNLP to establish conn…   110                                     [OK]</span><br><span class=\"line\">jenkins&#x2F;jnlp-slave                           a Jenkins agent (FKA &quot;slave&quot;) using JNLP to …   86                                      [OK]</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>根据镜像OFFICIAL标签判断，位列第一、名字为jenkins的是 Jenkins 官方提供的镜像。我们是不是应该使用这个官方镜像呢？</p>\n<p>如果你看过 Jenkins 文档中 Docker 安装 小节，会发现官方推荐使用的镜像是jenkinsci/blueocean，该镜像包含当前的长期支持 (LTS) 的 Jenkins 版本 (可以生产使用) ，并捆绑了所有 Blue Ocean 插件和功能。</p>\n<p>第一次安装的时候使用的是jenkins镜像，其集成的 Jenkins 版本比较高，结果出现好多插件不兼容的情况，对于我等小白来说是一件比较麻烦的事。</p>\n<p>这里我们果断使用jenkinsci/blueocean镜像，使用docker pull命令拉取：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull jenkinsci&#x2F;blueocean</span><br><span class=\"line\">Using default tag: latest</span><br><span class=\"line\">latest: Pulling from jenkinsci&#x2F;blueocean</span><br><span class=\"line\">Digest: sha256:523769431f19830cfda7ceae37c59c9f01affb551836933aa30114dcaa5df9eb</span><br><span class=\"line\">Status: Image is up to date for jenkinsci&#x2F;blueocean:latest</span><br></pre></td></tr></table></figure>\n\n<p>在本地镜像仓库确认是否已存在：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker images</span><br><span class=\"line\">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">jenkinsci&#x2F;blueocean   latest              ef2dc74fe285        21 hours ago        552MB</span><br><span class=\"line\">mysql                 latest              990386cbd5c0        2 months ago        443MB</span><br><span class=\"line\">jenkins               latest              cd14cecfdb3a        11 months ago       696MB</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行容器\"><a href=\"#运行容器\" class=\"headerlink\" title=\"运行容器\"></a>运行容器</h2><p>现在，就可以基于下载的镜像运行 Jenkins 容器了，有以下两种运行方式供你参考：</p>\n<p>方式一：直接运行，运行期间产生的所有数据都保存在容器内部，容器销毁，数据丢失。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run \\</span><br><span class=\"line\">    --name jenkins-blueocean \\</span><br><span class=\"line\">    -d \\</span><br><span class=\"line\">    -p 8081:8080 \\</span><br><span class=\"line\">    -p 50001:50000 \\</span><br><span class=\"line\">    jenkinsci&#x2F;blueocean</span><br></pre></td></tr></table></figure>\n\n<p>方式二：Docker 会在宿主机上创建一个数据卷jenkins-data，容器映射该卷以持久化数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run \\</span><br><span class=\"line\">  --name jenkins-blueocean \\</span><br><span class=\"line\">  -d \\</span><br><span class=\"line\">  -p 8081:8080 \\</span><br><span class=\"line\">  -p 50000:50000 \\</span><br><span class=\"line\">  -v jenkins-data:&#x2F;var&#x2F;jenkins_home \\</span><br><span class=\"line\">  jenkinsci&#x2F;blueocean</span><br></pre></td></tr></table></figure>\n\n<p>Tips：8081 端口用来公开访问 Web 界面，50000 端口允许访问远程 Java (JIRA) API。</p>\n<p>这里我使用了第二种方式启动了 一个 Jenkins 容器应用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run \\</span><br><span class=\"line\">  --name jenkins-blueocean \\</span><br><span class=\"line\">  -d \\</span><br><span class=\"line\">  -p 8080:8080 \\</span><br><span class=\"line\">  -p 50000:50000 \\ </span><br><span class=\"line\">  -v jenkins-data:&#x2F;var&#x2F;jenkins_home \\</span><br><span class=\"line\">  jenkinsci&#x2F;blueocean</span><br><span class=\"line\">93f88d6ca2129fae971298e98e20091570f6903463b203a9235660856f63020e</span><br></pre></td></tr></table></figure>\n\n<p>最后使用docker ps命令确认容器是否已经后台运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                                              NAMES</span><br><span class=\"line\">0cad9bbe76a6        jenkinsci&#x2F;blueocean   &quot;&#x2F;sbin&#x2F;tini -- &#x2F;usr&#x2F;…&quot;   About an hour ago   Up About an hour    0.0.0.0:8080-&gt;8080&#x2F;tcp, 0.0.0.0:50000-&gt;50000&#x2F;tcp   jenkins-blueocean</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置-Jenkins\"><a href=\"#配置-Jenkins\" class=\"headerlink\" title=\"配置 Jenkins\"></a>配置 Jenkins</h2><p>以上如果一切正常，现在就可以通过http://<ipaddress>:8080访问 Jenkins 的 Web 界面了。</p>\n<h3 id=\"Step1：解锁-Jenkins。\"><a href=\"#Step1：解锁-Jenkins。\" class=\"headerlink\" title=\"Step1：解锁 Jenkins。\"></a>Step1：解锁 Jenkins。</h3><p>Alt Text</p>\n<p>管理员初始密码被放到了/var/jenkins_home/secrets/initialAdminPassword 文件中。</p>\n<p>因为我们把 Jenkins 部署在了 Docker 容器中，因此需要先进入到容器，再去查看对应的文件initialAdminPassword内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker exec -it jenkins-blueocean &#x2F;bin&#x2F;bash</span><br><span class=\"line\">jenkins@93f88d6ca212:&#x2F;$ cat &#x2F;var&#x2F;jenkins_home&#x2F;secrets&#x2F;initialAdminPassword</span><br><span class=\"line\">a6f6d08fcc474178833001d1fc79be62</span><br></pre></td></tr></table></figure>\n\n<p>如上输出中，a6f6d08fcc474178833001d1fc79be62 便是我们需要的管理员密码，复制并粘贴到 Web 界面，点击继续即可解锁 Jenkins。</p>\n<h3 id=\"Step2：安装插件。\"><a href=\"#Step2：安装插件。\" class=\"headerlink\" title=\"Step2：安装插件。\"></a>Step2：安装插件。</h3><p>Jenkins 可以说完全由插件来驱动的，所以安装一些基础的插件是非要必要的，这里我们选择 安装推荐的插件 ，然后静静地等待插件安装完成即可。</p>\n<h3 id=\"Step3：创建用户。\"><a href=\"#Step3：创建用户。\" class=\"headerlink\" title=\"Step3：创建用户。\"></a>Step3：创建用户。</h3><p>接着继续下一步操作，提示需要创建一个新的用户，自行填写即可。</p>\n","more":"<h2 id=\"下载镜像\"><a href=\"#下载镜像\" class=\"headerlink\" title=\"下载镜像\"></a>下载镜像</h2><p>打开终端，输入docker search命令搜索 Docker Hub 上可用的 Jenkins 镜像：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker search jenkins</span><br><span class=\"line\">NAME                                         DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class=\"line\">jenkins                                      Official Jenkins Docker image                   4328                [OK]</span><br><span class=\"line\">jenkins&#x2F;jenkins                              The leading open source automation server       1563</span><br><span class=\"line\">jenkinsci&#x2F;blueocean                          https:&#x2F;&#x2F;jenkins.io&#x2F;projects&#x2F;blueocean           399</span><br><span class=\"line\">jenkinsci&#x2F;jenkins                            Jenkins Continuous Integration and Delivery …   367</span><br><span class=\"line\">jenkinsci&#x2F;jnlp-slave                         A Jenkins slave using JNLP to establish conn…   110                                     [OK]</span><br><span class=\"line\">jenkins&#x2F;jnlp-slave                           a Jenkins agent (FKA &quot;slave&quot;) using JNLP to …   86                                      [OK]</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>根据镜像OFFICIAL标签判断，位列第一、名字为jenkins的是 Jenkins 官方提供的镜像。我们是不是应该使用这个官方镜像呢？</p>\n<p>如果你看过 Jenkins 文档中 Docker 安装 小节，会发现官方推荐使用的镜像是jenkinsci/blueocean，该镜像包含当前的长期支持 (LTS) 的 Jenkins 版本 (可以生产使用) ，并捆绑了所有 Blue Ocean 插件和功能。</p>\n<p>第一次安装的时候使用的是jenkins镜像，其集成的 Jenkins 版本比较高，结果出现好多插件不兼容的情况，对于我等小白来说是一件比较麻烦的事。</p>\n<p>这里我们果断使用jenkinsci/blueocean镜像，使用docker pull命令拉取：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull jenkinsci&#x2F;blueocean</span><br><span class=\"line\">Using default tag: latest</span><br><span class=\"line\">latest: Pulling from jenkinsci&#x2F;blueocean</span><br><span class=\"line\">Digest: sha256:523769431f19830cfda7ceae37c59c9f01affb551836933aa30114dcaa5df9eb</span><br><span class=\"line\">Status: Image is up to date for jenkinsci&#x2F;blueocean:latest</span><br></pre></td></tr></table></figure>\n\n<p>在本地镜像仓库确认是否已存在：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker images</span><br><span class=\"line\">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">jenkinsci&#x2F;blueocean   latest              ef2dc74fe285        21 hours ago        552MB</span><br><span class=\"line\">mysql                 latest              990386cbd5c0        2 months ago        443MB</span><br><span class=\"line\">jenkins               latest              cd14cecfdb3a        11 months ago       696MB</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行容器\"><a href=\"#运行容器\" class=\"headerlink\" title=\"运行容器\"></a>运行容器</h2><p>现在，就可以基于下载的镜像运行 Jenkins 容器了，有以下两种运行方式供你参考：</p>\n<p>方式一：直接运行，运行期间产生的所有数据都保存在容器内部，容器销毁，数据丢失。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run \\</span><br><span class=\"line\">    --name jenkins-blueocean \\</span><br><span class=\"line\">    -d \\</span><br><span class=\"line\">    -p 8081:8080 \\</span><br><span class=\"line\">    -p 50001:50000 \\</span><br><span class=\"line\">    jenkinsci&#x2F;blueocean</span><br></pre></td></tr></table></figure>\n\n<p>方式二：Docker 会在宿主机上创建一个数据卷jenkins-data，容器映射该卷以持久化数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run \\</span><br><span class=\"line\">  --name jenkins-blueocean \\</span><br><span class=\"line\">  -d \\</span><br><span class=\"line\">  -p 8081:8080 \\</span><br><span class=\"line\">  -p 50000:50000 \\</span><br><span class=\"line\">  -v jenkins-data:&#x2F;var&#x2F;jenkins_home \\</span><br><span class=\"line\">  jenkinsci&#x2F;blueocean</span><br></pre></td></tr></table></figure>\n\n<p>Tips：8081 端口用来公开访问 Web 界面，50000 端口允许访问远程 Java (JIRA) API。</p>\n<p>这里我使用了第二种方式启动了 一个 Jenkins 容器应用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run \\</span><br><span class=\"line\">  --name jenkins-blueocean \\</span><br><span class=\"line\">  -d \\</span><br><span class=\"line\">  -p 8080:8080 \\</span><br><span class=\"line\">  -p 50000:50000 \\ </span><br><span class=\"line\">  -v jenkins-data:&#x2F;var&#x2F;jenkins_home \\</span><br><span class=\"line\">  jenkinsci&#x2F;blueocean</span><br><span class=\"line\">93f88d6ca2129fae971298e98e20091570f6903463b203a9235660856f63020e</span><br></pre></td></tr></table></figure>\n\n<p>最后使用docker ps命令确认容器是否已经后台运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                                              NAMES</span><br><span class=\"line\">0cad9bbe76a6        jenkinsci&#x2F;blueocean   &quot;&#x2F;sbin&#x2F;tini -- &#x2F;usr&#x2F;…&quot;   About an hour ago   Up About an hour    0.0.0.0:8080-&gt;8080&#x2F;tcp, 0.0.0.0:50000-&gt;50000&#x2F;tcp   jenkins-blueocean</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置-Jenkins\"><a href=\"#配置-Jenkins\" class=\"headerlink\" title=\"配置 Jenkins\"></a>配置 Jenkins</h2><p>以上如果一切正常，现在就可以通过http://<ipaddress>:8080访问 Jenkins 的 Web 界面了。</p>\n<h3 id=\"Step1：解锁-Jenkins。\"><a href=\"#Step1：解锁-Jenkins。\" class=\"headerlink\" title=\"Step1：解锁 Jenkins。\"></a>Step1：解锁 Jenkins。</h3><p>Alt Text</p>\n<p>管理员初始密码被放到了/var/jenkins_home/secrets/initialAdminPassword 文件中。</p>\n<p>因为我们把 Jenkins 部署在了 Docker 容器中，因此需要先进入到容器，再去查看对应的文件initialAdminPassword内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker exec -it jenkins-blueocean &#x2F;bin&#x2F;bash</span><br><span class=\"line\">jenkins@93f88d6ca212:&#x2F;$ cat &#x2F;var&#x2F;jenkins_home&#x2F;secrets&#x2F;initialAdminPassword</span><br><span class=\"line\">a6f6d08fcc474178833001d1fc79be62</span><br></pre></td></tr></table></figure>\n\n<p>如上输出中，a6f6d08fcc474178833001d1fc79be62 便是我们需要的管理员密码，复制并粘贴到 Web 界面，点击继续即可解锁 Jenkins。</p>\n<h3 id=\"Step2：安装插件。\"><a href=\"#Step2：安装插件。\" class=\"headerlink\" title=\"Step2：安装插件。\"></a>Step2：安装插件。</h3><p>Jenkins 可以说完全由插件来驱动的，所以安装一些基础的插件是非要必要的，这里我们选择 安装推荐的插件 ，然后静静地等待插件安装完成即可。</p>\n<h3 id=\"Step3：创建用户。\"><a href=\"#Step3：创建用户。\" class=\"headerlink\" title=\"Step3：创建用户。\"></a>Step3：创建用户。</h3><p>接着继续下一步操作，提示需要创建一个新的用户，自行填写即可。</p>\n","categories":[{"name":"编程技术","path":"api/categories/编程技术.json"}],"tags":[{"name":"应用","path":"api/tags/应用.json"}]}