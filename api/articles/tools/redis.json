{"title":"redis搭建","slug":"tools/redis","date":"2020-10-23T13:20:21.000Z","updated":"2024-06-30T10:35:56.312Z","comments":true,"path":"api/articles/tools/redis.json","excerpt":null,"covers":null,"content":"<p>单个节点redis搭建</p>\n<ol>\n<li>从官网或github下载源码</li>\n<li>安装gcc</li>\n<li>make（可设置内存分配器为libc，默认为jemalloc，默认更好）（内存分配器未设置为jemalloc，可能影响并发性能，并加重内存碎片，rust用的也是这个内存分配器， info memory查看内存分配器）</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"redis集群搭建\"><a href=\"#redis集群搭建\" class=\"headerlink\" title=\"redis集群搭建\"></a>redis集群搭建</h2><ol>\n<li><p>一．安装前准备<br>关闭SELinux</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setenforce 0</span><br><span class=\"line\">echo &quot;&#x2F;usr&#x2F;sbin&#x2F;setenforce 0&quot;</span><br><span class=\"line\">sed -i &#39;s&#x2F;^SELINUX&#x3D;enforcing&#x2F;SELINUX&#x3D;disabled&#x2F;g&#39; &#x2F;etc&#x2F;sysconfig&#x2F;selinux </span><br><span class=\"line\">sed -i &#39;s&#x2F;^SELINUX&#x3D;enforcing&#x2F;SELINUX&#x3D;disabled&#x2F;g&#39; &#x2F;etc&#x2F;selinux&#x2F;config</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>   设置防火墙</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">systemctl disable firewalld</span><br><span class=\"line\">vim &#x2F;etc&#x2F;sysconfig&#x2F;iptables</span><br><span class=\"line\">-A INPUT -p tcp -m state --state NEW -m tcp --dport 6379 -j ACCEPT</span><br><span class=\"line\">service iptables restart</span><br></pre></td></tr></table></figure>\n\n\n<p>   时钟校对</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install ntpdate</span><br><span class=\"line\">echo &quot;#Clock synchronization&quot; &gt;&gt; &#x2F;var&#x2F;spool&#x2F;cron&#x2F;root</span><br><span class=\"line\">echo &quot;01 00 * * * &#x2F;sbin&#x2F;ntpdate ntp2.aliyun.com;&#x2F;sbin&#x2F;hwclock -w&quot; &gt;&gt; &#x2F;var&#x2F;spool&#x2F;cron&#x2F;root</span><br></pre></td></tr></table></figure>\n\n\n<p>   调整文件打开数</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF &gt; &#x2F;etc&#x2F;security&#x2F;limits.d&#x2F;20-nproc.conf </span><br><span class=\"line\">root soft nofile 102400</span><br><span class=\"line\">root hard nofile 102400</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<p>   <code>yum -y install gcc gcc-c++</code><br>   二.安装red is<br>   下载redis安装包</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-5.0.5.tar.gz</span><br><span class=\"line\">tar zxvf redis-5.0.5.tar.gz </span><br><span class=\"line\">cd redis-5.0.5&#x2F;</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">创建文件目录</span><br></pre></td></tr></table></figure>\n\n<p>   <code>mkdir -p /opt/redis/&#123;db,etc,bin,logs&#125;</code><br>   将启动文件拷贝至文件目录</p>\n<p>   [root@localhost redis-5.0.5]#cd  src/<br>   [root@localhost src]#cp mkreleasehdr.sh redis-benchmark redis-check-aof redis-server redis-cli  /opt/redis/bin<br>   1<br>   2<br>   修改配置文件/opt/redis/etc/redis.conf</p>\n<p>   bind 0.0.0.0  #绑定的IP地址，0.0.0.0对所有开放<br>   protected-mode no  #关闭保护模式，让其他主机连接<br>   port 6379 #服务端口<br>   tcp-backlog 511 #tcp连接等待队列长度<br>   timeout 0<br>   tcp-keepalive 300<br>   daemonize yes #开启后台模式<br>   supervised no<br>   pidfile /var/run/redis_6379.pid #进程文件<br>   loglevel notice<br>   logfile /opt/redis/logs/redis.log #日志文件<br>   databases 1 #数据库的个数，默认16，由于集群不支持切换库，所有只有一个库<br>   always-show-logo yes<br>   #指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合<br>       save <seconds> <changes><br>       Redis默认配置文件中提供了三个条件：<br>   save 900 1<br>   save 300 10<br>   save 60 10000<br>   stop-writes-on-bgsave-error yes #后台备份出错时，是否停止写入keys到哈希槽<br>   rdbcompression yes #数据文件是否压缩<br>   rdbchecksum yes#数据文件执行校验<br>   dbfilename dump-6379.rdb #指定本地数据库文件名，默认值为dump.rdb<br>   dir /opt/redis/db/ #指定本地数据库存放目录<br>   replica-serve-stale-data yes<br>   replica-read-only yes<br>   repl-diskless-sync no<br>   repl-diskless-sync-delay 5<br>   repl-disable-tcp-nodelay no<br>   replica-priority 100<br>   masterauth 123456 #主机授权密码<br>   requirepass 123456 #数据库密码<br>   maxclients 10000 #最大客户端连接数<br>   lazyfree-lazy-eviction no<br>   lazyfree-lazy-expire no<br>   lazyfree-lazy-server-del no<br>   replica-lazy-flush no<br>   appendonly no<br>   appendfilename “appendonly.aof” #启动Redis上启用了AOF，则会加载AOF，这是具有更好的耐久性保证的文件，相当于MySQL的二进制文件<br>   appendfsync everysec #磁盘上刷新数据，每一秒钟一次<br>   no-appendfsync-on-rewrite no #如果您有延迟问题，请将其转换为”yes”。否则，从持久性的角度来看，设置为”no”是最安全的选择。<br>   auto-aof-rewrite-percentage 100<br>   auto-aof-rewrite-min-size 64mb #自动重写附加文件<br>   aof-load-truncated yes<br>   aof-use-rdb-preamble yes<br>   lua-time-limit 5000<br>   cluster-enabled yes #开启集群<br>   cluster-config-file node1-6379.conf #集群节点配置文件，由Redis节点自动创建和更新的,非人工创建<br>   cluster-node-timeout 15000 #集群节点超时,连接不上的时间<br>   cluster-slave-validity-factor 10  #从节点与主节点失联多久，从节点尝试升级成主节点。如果设置成正数，则cluster-node-timeout乘以cluster-slave-validity-factor得到的时间，是从节点与主节点失联后，此从节点数据有效的最长时间，超过这个时间，从节点不会启动故障迁移<br>   cluster-migration-barrier 1 #主节点需要的最小从节点数，只有达到这个数，主节点失败时，它从节点才会进行迁移<br>   cluster-require-full-coverage yes  #在部分key所在的节点不可用时，如果此参数设置为”yes”(默认值), 则整个集群停止接受操作；如果此参数设置为”no”，则集群依然为可达节点上的key提供读操作。<br>   slowlog-log-slower-than 10000<br>   slowlog-max-len 128<br>   latency-monitor-threshold 0<br>   notify-keyspace-events “”<br>   hash-max-ziplist-entries 512<br>   hash-max-ziplist-value 64<br>   list-max-ziplist-size -2<br>   list-compress-depth 0<br>   set-max-intset-entries 512<br>   zset-max-ziplist-entries 128<br>   zset-max-ziplist-value 64<br>   hll-sparse-max-bytes 3000<br>   stream-node-max-bytes 4096<br>   stream-node-max-entries 100<br>   activerehashing yes<br>   client-output-buffer-limit normal 0 0 0<br>   client-output-buffer-limit replica 256mb 64mb 60<br>   client-output-buffer-limit pubsub 32mb 8mb 60<br>   hz 10 #Redis调用一个内部函数来执行许多后台任务<br>   dynamic-hz yes<br>   aof-rewrite-incremental-fsync yes<br>   rdb-save-incremental-fsync yes<br>   配置启动脚本</p>\n<p>   #!/bin/sh</p>\n<h1 id=\"chkconfig-35-10-90\"><a href=\"#chkconfig-35-10-90\" class=\"headerlink\" title=\"chkconfig: 35 10 90\"></a>chkconfig: 35 10 90</h1><p>   #重要！否则chkconfig不能识别开机启动服务项；<br>   #”35”为运行级别，”10”为启动优先级，”90”为关闭优先级<br>   #</p>\n<h1 id=\"Simple-Redis-init-d-script-conceived-to-work-on-Linux-systems\"><a href=\"#Simple-Redis-init-d-script-conceived-to-work-on-Linux-systems\" class=\"headerlink\" title=\"Simple Redis init.d script conceived to work on Linux systems\"></a>Simple Redis init.d script conceived to work on Linux systems</h1><h1 id=\"as-it-does-use-of-the-proc-filesystem\"><a href=\"#as-it-does-use-of-the-proc-filesystem\" class=\"headerlink\" title=\"as it does use of the /proc filesystem.\"></a>as it does use of the /proc filesystem.</h1><p>   REDISPORT=6379<br>   EXEC=/opt/redis/bin/redis-server</p>\n<h1 id=\"CLIEXEC-usr-local-bin-redis-cli\"><a href=\"#CLIEXEC-usr-local-bin-redis-cli\" class=\"headerlink\" title=\"CLIEXEC=/usr/local/bin/redis-cli\"></a>CLIEXEC=/usr/local/bin/redis-cli</h1><p>   CLIEXEC=/opt/redis/bin/redis-cli</p>\n<h1 id=\"PIDFILE-var-run-redis-REDISPORT-pid\"><a href=\"#PIDFILE-var-run-redis-REDISPORT-pid\" class=\"headerlink\" title=\"PIDFILE=/var/run/redis_${REDISPORT}.pid\"></a>PIDFILE=/var/run/redis_${REDISPORT}.pid</h1><p>   PIDFILE=/var/run/redis_${REDISPORT}.pid</p>\n<h1 id=\"CONF-”-etc-redis-REDISPORT-conf”\"><a href=\"#CONF-”-etc-redis-REDISPORT-conf”\" class=\"headerlink\" title=\"CONF=”/etc/redis/${REDISPORT}.conf”\"></a>CONF=”/etc/redis/${REDISPORT}.conf”</h1><p>   CONF=”/opt/redis/etc/redis.conf”</p>\n<p>   USER=root            #添加执行用户变量</p>\n<p>   case “$1” in<br>       start)<br>           if [ -f $PIDFILE ]<br>           then<br>                   echo “$PIDFILE exists, process is already running or crashed”<br>           else<br>                   echo “Starting Redis server…”<br>                   $EXEC $CONF</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    fi</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">stop)</span><br><span class=\"line\">    if [ ! -f $PIDFILE ]</span><br><span class=\"line\">    then</span><br><span class=\"line\">            echo &quot;$PIDFILE does not exist, process is not running&quot;</span><br><span class=\"line\">    else</span><br><span class=\"line\">            PID&#x3D;$(cat $PIDFILE)</span><br><span class=\"line\">            echo &quot;Stopping ...&quot;</span><br><span class=\"line\">            $CLIEXEC -p $REDISPORT shutdown</span><br><span class=\"line\">            while [ -x &#x2F;proc&#x2F;$&#123;PID&#125; ]</span><br><span class=\"line\">            do</span><br><span class=\"line\">                echo &quot;Waiting for Redis to shutdown ...&quot;</span><br><span class=\"line\">                sleep 1</span><br><span class=\"line\">            done</span><br><span class=\"line\">            echo &quot;Redis stopped&quot;</span><br><span class=\"line\">    fi</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">restart|force-reload)</span><br><span class=\"line\">            $&#123;0&#125; stop</span><br><span class=\"line\">            $&#123;0&#125; start</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">            echo &quot;Usage: &#x2F;etc&#x2F;init.d&#x2F;redis-server &#123;start|stop|restart|force-reload&#125;&quot; &gt;&amp;2</span><br><span class=\"line\">            exit 1</span><br><span class=\"line\">将脚本放置&#x2F;etc&#x2F;init.d&#x2F;redis-server</span><br></pre></td></tr></table></figure>\n<p>   设置开机自启</p>\n<p>   [root@localhost ~]#chkconfig –add redis-server<br>   [root@localhost ~]#chkconfig –level 35 redis-server on  #默认runlevel 35已打开<br>   1<br>   2<br>   启动脚本设置执行权限</p>\n<p>   [root@localhost ~]#chmod +x /etc/init.d/redis-server<br>   1<br>   启动redis<br>   #可通过启动脚本启动/关闭服务；或采用”service”指令</p>\n<p>   [root@localhost ~]#/etc/init.d/redis-server start<br>   1<br>   创建集群<br>   在5.0之前该工具是由ruby语言编写的redis-trib.rb，在使用前需要安装ruby语言环境。在5.0之后redis摒弃了该工具，将搭建集群的功能合并到了redis-cli上。<br>   这里就可以直接创建集群，不需要在安装其他工具。</p>\n<p>   创建集群需要注意,最少要6个服务,否则创建集群失败.</p>\n<p>   redis-cli –cluster create 110.110.100.35:6379 110.110.100.36:6379 110.110.100.37:6379 110.110.100.38:6379 110.10.1100.39:6379 110.10.100.40:6379 –cluster-replicas 1 -a 123456</p>\n<p>   参数说明<br>   redis-cli 客户端工具<br>   –cluster create 创建一个新的集群<br>   –cluster-replicas 1 每一个主库对应一个从库<br>   -a 数据库密码</p>\n<p>   出现下面的字样说明创建成功</p>\n<p>   [OK] All nodes agree about slots configuration.</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>Check for open slots…<br>Check slots coverage…<br>[OK] All 16384 slots covered.<br>1<br>2<br>3<br>4<br>登陆验证</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>   redis-cli -c -p 端口<br>   auth 密码</p>\n<p>   删除主节点<br>   redis-cli –cluster reshard 110.110.100.35:6379</p>\n<p>   到这里就搭建完成了</p>\n<p>   搭建过程中有的问题也有记录在异常处理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup redis-server &#x2F;opt&#x2F;redis&#x2F;etc&#x2F;redis.conf &amp;</span><br></pre></td></tr></table></figure>\n\n\n\n<table>\n<thead>\n<tr>\n<th>测试端redis6,被测redis5</th>\n<th>单台</th>\n<th>集群</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>redis-benchmark -h 172.20.59.57 -p 6379 –threads 500 -t get -d 500 -c 500 -n 10000000</td>\n<td>137794.19 requests per second</td>\n<td></td>\n</tr>\n<tr>\n<td>redis-benchmark -h 172.20.59.57 -p 6379 –threads 500 -t set -d 500 -c 500 -n 10000000</td>\n<td>132383.70 requests per second</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>测试端redis5,被测redis5</th>\n<th>单台</th>\n<th>集群</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>redis-benchmark -h 172.20.59.57 -p 6379  -t get -d 500 -c 500 -n 10000000</td>\n<td>84317.03 requests per second</td>\n<td></td>\n</tr>\n<tr>\n<td>redis-benchmark -h 172.20.59.57 -p 6379  -t set -d 500 -c 500 -n 10000000</td>\n<td>98796.66 requests per second</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>测试端redis6,被测redis5 物理机</th>\n<th>单台</th>\n<th>集群</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>redis-benchmark -h 172.20.1.30 -p 6379  -t get -d 500 -c 500 -n 10000000</td>\n<td>106834.19 requests per second</td>\n<td></td>\n</tr>\n<tr>\n<td>redis-benchmark -h 172.20.1.30 -p 6379  -t set -d 500 -c 500 -n 10000000</td>\n<td>113291.34 requests per second</td>\n<td></td>\n</tr>\n<tr>\n<td>redis-benchmark -h 172.20.1.30 -p 6379 –threads 500 -t set -d 500 -c 500 -n 10000000</td>\n<td>163041.70 requests per second</td>\n<td></td>\n</tr>\n<tr>\n<td>redis-benchmark -h 172.20.1.30 -p 6379 –threads 500 -t get -d 500 -c 500 -n 10000000</td>\n<td>169396.78 requests per second</td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>set(requests per second)</th>\n<th>get(requests per second)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>物理机（redis5）+测试机（redis6+threads 500）</td>\n<td>163041.70</td>\n<td>169396.78</td>\n</tr>\n<tr>\n<td>物理机（redis5）+测试机（redis6+threads）</td>\n<td>113291.34</td>\n<td>106834.19</td>\n</tr>\n<tr>\n<td>云主机8c8g（redis5）+测试机（redis6+threads 500）</td>\n<td>132383.70</td>\n<td>137794.19</td>\n</tr>\n<tr>\n<td>云主机8c8g（redis5）+测试机（redis6）</td>\n<td>109325.46</td>\n<td>110688.03</td>\n</tr>\n<tr>\n<td>云主机8c8g（redis5）+测试机（redis5）</td>\n<td>98796.66</td>\n<td>84317.03</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">redis-cli --cluster create 172.20.59.83:6379 172.20.59.119:6379 172.20.59.54:6379 172.20.59.59:6379 172.20.59.99:6379 172.20.59.52:6379 --cluster-replicas 1 -a 123456</span><br></pre></td></tr></table></figure>\n\n","more":"<p>单个节点redis搭建</p>\n<ol>\n<li>从官网或github下载源码</li>\n<li>安装gcc</li>\n<li>make（可设置内存分配器为libc，默认为jemalloc，默认更好）（内存分配器未设置为jemalloc，可能影响并发性能，并加重内存碎片，rust用的也是这个内存分配器， info memory查看内存分配器）</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"redis集群搭建\"><a href=\"#redis集群搭建\" class=\"headerlink\" title=\"redis集群搭建\"></a>redis集群搭建</h2><ol>\n<li><p>一．安装前准备<br>关闭SELinux</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setenforce 0</span><br><span class=\"line\">echo &quot;&#x2F;usr&#x2F;sbin&#x2F;setenforce 0&quot;</span><br><span class=\"line\">sed -i &#39;s&#x2F;^SELINUX&#x3D;enforcing&#x2F;SELINUX&#x3D;disabled&#x2F;g&#39; &#x2F;etc&#x2F;sysconfig&#x2F;selinux </span><br><span class=\"line\">sed -i &#39;s&#x2F;^SELINUX&#x3D;enforcing&#x2F;SELINUX&#x3D;disabled&#x2F;g&#39; &#x2F;etc&#x2F;selinux&#x2F;config</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>   设置防火墙</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">systemctl disable firewalld</span><br><span class=\"line\">vim &#x2F;etc&#x2F;sysconfig&#x2F;iptables</span><br><span class=\"line\">-A INPUT -p tcp -m state --state NEW -m tcp --dport 6379 -j ACCEPT</span><br><span class=\"line\">service iptables restart</span><br></pre></td></tr></table></figure>\n\n\n<p>   时钟校对</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install ntpdate</span><br><span class=\"line\">echo &quot;#Clock synchronization&quot; &gt;&gt; &#x2F;var&#x2F;spool&#x2F;cron&#x2F;root</span><br><span class=\"line\">echo &quot;01 00 * * * &#x2F;sbin&#x2F;ntpdate ntp2.aliyun.com;&#x2F;sbin&#x2F;hwclock -w&quot; &gt;&gt; &#x2F;var&#x2F;spool&#x2F;cron&#x2F;root</span><br></pre></td></tr></table></figure>\n\n\n<p>   调整文件打开数</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF &gt; &#x2F;etc&#x2F;security&#x2F;limits.d&#x2F;20-nproc.conf </span><br><span class=\"line\">root soft nofile 102400</span><br><span class=\"line\">root hard nofile 102400</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<p>   <code>yum -y install gcc gcc-c++</code><br>   二.安装red is<br>   下载redis安装包</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-5.0.5.tar.gz</span><br><span class=\"line\">tar zxvf redis-5.0.5.tar.gz </span><br><span class=\"line\">cd redis-5.0.5&#x2F;</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">创建文件目录</span><br></pre></td></tr></table></figure>\n\n<p>   <code>mkdir -p /opt/redis/&#123;db,etc,bin,logs&#125;</code><br>   将启动文件拷贝至文件目录</p>\n<p>   [root@localhost redis-5.0.5]#cd  src/<br>   [root@localhost src]#cp mkreleasehdr.sh redis-benchmark redis-check-aof redis-server redis-cli  /opt/redis/bin<br>   1<br>   2<br>   修改配置文件/opt/redis/etc/redis.conf</p>\n<p>   bind 0.0.0.0  #绑定的IP地址，0.0.0.0对所有开放<br>   protected-mode no  #关闭保护模式，让其他主机连接<br>   port 6379 #服务端口<br>   tcp-backlog 511 #tcp连接等待队列长度<br>   timeout 0<br>   tcp-keepalive 300<br>   daemonize yes #开启后台模式<br>   supervised no<br>   pidfile /var/run/redis_6379.pid #进程文件<br>   loglevel notice<br>   logfile /opt/redis/logs/redis.log #日志文件<br>   databases 1 #数据库的个数，默认16，由于集群不支持切换库，所有只有一个库<br>   always-show-logo yes<br>   #指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合<br>       save <seconds> <changes><br>       Redis默认配置文件中提供了三个条件：<br>   save 900 1<br>   save 300 10<br>   save 60 10000<br>   stop-writes-on-bgsave-error yes #后台备份出错时，是否停止写入keys到哈希槽<br>   rdbcompression yes #数据文件是否压缩<br>   rdbchecksum yes#数据文件执行校验<br>   dbfilename dump-6379.rdb #指定本地数据库文件名，默认值为dump.rdb<br>   dir /opt/redis/db/ #指定本地数据库存放目录<br>   replica-serve-stale-data yes<br>   replica-read-only yes<br>   repl-diskless-sync no<br>   repl-diskless-sync-delay 5<br>   repl-disable-tcp-nodelay no<br>   replica-priority 100<br>   masterauth 123456 #主机授权密码<br>   requirepass 123456 #数据库密码<br>   maxclients 10000 #最大客户端连接数<br>   lazyfree-lazy-eviction no<br>   lazyfree-lazy-expire no<br>   lazyfree-lazy-server-del no<br>   replica-lazy-flush no<br>   appendonly no<br>   appendfilename “appendonly.aof” #启动Redis上启用了AOF，则会加载AOF，这是具有更好的耐久性保证的文件，相当于MySQL的二进制文件<br>   appendfsync everysec #磁盘上刷新数据，每一秒钟一次<br>   no-appendfsync-on-rewrite no #如果您有延迟问题，请将其转换为”yes”。否则，从持久性的角度来看，设置为”no”是最安全的选择。<br>   auto-aof-rewrite-percentage 100<br>   auto-aof-rewrite-min-size 64mb #自动重写附加文件<br>   aof-load-truncated yes<br>   aof-use-rdb-preamble yes<br>   lua-time-limit 5000<br>   cluster-enabled yes #开启集群<br>   cluster-config-file node1-6379.conf #集群节点配置文件，由Redis节点自动创建和更新的,非人工创建<br>   cluster-node-timeout 15000 #集群节点超时,连接不上的时间<br>   cluster-slave-validity-factor 10  #从节点与主节点失联多久，从节点尝试升级成主节点。如果设置成正数，则cluster-node-timeout乘以cluster-slave-validity-factor得到的时间，是从节点与主节点失联后，此从节点数据有效的最长时间，超过这个时间，从节点不会启动故障迁移<br>   cluster-migration-barrier 1 #主节点需要的最小从节点数，只有达到这个数，主节点失败时，它从节点才会进行迁移<br>   cluster-require-full-coverage yes  #在部分key所在的节点不可用时，如果此参数设置为”yes”(默认值), 则整个集群停止接受操作；如果此参数设置为”no”，则集群依然为可达节点上的key提供读操作。<br>   slowlog-log-slower-than 10000<br>   slowlog-max-len 128<br>   latency-monitor-threshold 0<br>   notify-keyspace-events “”<br>   hash-max-ziplist-entries 512<br>   hash-max-ziplist-value 64<br>   list-max-ziplist-size -2<br>   list-compress-depth 0<br>   set-max-intset-entries 512<br>   zset-max-ziplist-entries 128<br>   zset-max-ziplist-value 64<br>   hll-sparse-max-bytes 3000<br>   stream-node-max-bytes 4096<br>   stream-node-max-entries 100<br>   activerehashing yes<br>   client-output-buffer-limit normal 0 0 0<br>   client-output-buffer-limit replica 256mb 64mb 60<br>   client-output-buffer-limit pubsub 32mb 8mb 60<br>   hz 10 #Redis调用一个内部函数来执行许多后台任务<br>   dynamic-hz yes<br>   aof-rewrite-incremental-fsync yes<br>   rdb-save-incremental-fsync yes<br>   配置启动脚本</p>\n<p>   #!/bin/sh</p>\n<h1 id=\"chkconfig-35-10-90\"><a href=\"#chkconfig-35-10-90\" class=\"headerlink\" title=\"chkconfig: 35 10 90\"></a>chkconfig: 35 10 90</h1><p>   #重要！否则chkconfig不能识别开机启动服务项；<br>   #”35”为运行级别，”10”为启动优先级，”90”为关闭优先级<br>   #</p>\n<h1 id=\"Simple-Redis-init-d-script-conceived-to-work-on-Linux-systems\"><a href=\"#Simple-Redis-init-d-script-conceived-to-work-on-Linux-systems\" class=\"headerlink\" title=\"Simple Redis init.d script conceived to work on Linux systems\"></a>Simple Redis init.d script conceived to work on Linux systems</h1><h1 id=\"as-it-does-use-of-the-proc-filesystem\"><a href=\"#as-it-does-use-of-the-proc-filesystem\" class=\"headerlink\" title=\"as it does use of the /proc filesystem.\"></a>as it does use of the /proc filesystem.</h1><p>   REDISPORT=6379<br>   EXEC=/opt/redis/bin/redis-server</p>\n<h1 id=\"CLIEXEC-usr-local-bin-redis-cli\"><a href=\"#CLIEXEC-usr-local-bin-redis-cli\" class=\"headerlink\" title=\"CLIEXEC=/usr/local/bin/redis-cli\"></a>CLIEXEC=/usr/local/bin/redis-cli</h1><p>   CLIEXEC=/opt/redis/bin/redis-cli</p>\n<h1 id=\"PIDFILE-var-run-redis-REDISPORT-pid\"><a href=\"#PIDFILE-var-run-redis-REDISPORT-pid\" class=\"headerlink\" title=\"PIDFILE=/var/run/redis_${REDISPORT}.pid\"></a>PIDFILE=/var/run/redis_${REDISPORT}.pid</h1><p>   PIDFILE=/var/run/redis_${REDISPORT}.pid</p>\n<h1 id=\"CONF-”-etc-redis-REDISPORT-conf”\"><a href=\"#CONF-”-etc-redis-REDISPORT-conf”\" class=\"headerlink\" title=\"CONF=”/etc/redis/${REDISPORT}.conf”\"></a>CONF=”/etc/redis/${REDISPORT}.conf”</h1><p>   CONF=”/opt/redis/etc/redis.conf”</p>\n<p>   USER=root            #添加执行用户变量</p>\n<p>   case “$1” in<br>       start)<br>           if [ -f $PIDFILE ]<br>           then<br>                   echo “$PIDFILE exists, process is already running or crashed”<br>           else<br>                   echo “Starting Redis server…”<br>                   $EXEC $CONF</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    fi</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">stop)</span><br><span class=\"line\">    if [ ! -f $PIDFILE ]</span><br><span class=\"line\">    then</span><br><span class=\"line\">            echo &quot;$PIDFILE does not exist, process is not running&quot;</span><br><span class=\"line\">    else</span><br><span class=\"line\">            PID&#x3D;$(cat $PIDFILE)</span><br><span class=\"line\">            echo &quot;Stopping ...&quot;</span><br><span class=\"line\">            $CLIEXEC -p $REDISPORT shutdown</span><br><span class=\"line\">            while [ -x &#x2F;proc&#x2F;$&#123;PID&#125; ]</span><br><span class=\"line\">            do</span><br><span class=\"line\">                echo &quot;Waiting for Redis to shutdown ...&quot;</span><br><span class=\"line\">                sleep 1</span><br><span class=\"line\">            done</span><br><span class=\"line\">            echo &quot;Redis stopped&quot;</span><br><span class=\"line\">    fi</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">restart|force-reload)</span><br><span class=\"line\">            $&#123;0&#125; stop</span><br><span class=\"line\">            $&#123;0&#125; start</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">            echo &quot;Usage: &#x2F;etc&#x2F;init.d&#x2F;redis-server &#123;start|stop|restart|force-reload&#125;&quot; &gt;&amp;2</span><br><span class=\"line\">            exit 1</span><br><span class=\"line\">将脚本放置&#x2F;etc&#x2F;init.d&#x2F;redis-server</span><br></pre></td></tr></table></figure>\n<p>   设置开机自启</p>\n<p>   [root@localhost ~]#chkconfig –add redis-server<br>   [root@localhost ~]#chkconfig –level 35 redis-server on  #默认runlevel 35已打开<br>   1<br>   2<br>   启动脚本设置执行权限</p>\n<p>   [root@localhost ~]#chmod +x /etc/init.d/redis-server<br>   1<br>   启动redis<br>   #可通过启动脚本启动/关闭服务；或采用”service”指令</p>\n<p>   [root@localhost ~]#/etc/init.d/redis-server start<br>   1<br>   创建集群<br>   在5.0之前该工具是由ruby语言编写的redis-trib.rb，在使用前需要安装ruby语言环境。在5.0之后redis摒弃了该工具，将搭建集群的功能合并到了redis-cli上。<br>   这里就可以直接创建集群，不需要在安装其他工具。</p>\n<p>   创建集群需要注意,最少要6个服务,否则创建集群失败.</p>\n<p>   redis-cli –cluster create 110.110.100.35:6379 110.110.100.36:6379 110.110.100.37:6379 110.110.100.38:6379 110.10.1100.39:6379 110.10.100.40:6379 –cluster-replicas 1 -a 123456</p>\n<p>   参数说明<br>   redis-cli 客户端工具<br>   –cluster create 创建一个新的集群<br>   –cluster-replicas 1 每一个主库对应一个从库<br>   -a 数据库密码</p>\n<p>   出现下面的字样说明创建成功</p>\n<p>   [OK] All nodes agree about slots configuration.</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>Check for open slots…<br>Check slots coverage…<br>[OK] All 16384 slots covered.<br>1<br>2<br>3<br>4<br>登陆验证</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>   redis-cli -c -p 端口<br>   auth 密码</p>\n<p>   删除主节点<br>   redis-cli –cluster reshard 110.110.100.35:6379</p>\n<p>   到这里就搭建完成了</p>\n<p>   搭建过程中有的问题也有记录在异常处理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup redis-server &#x2F;opt&#x2F;redis&#x2F;etc&#x2F;redis.conf &amp;</span><br></pre></td></tr></table></figure>\n\n\n\n<table>\n<thead>\n<tr>\n<th>测试端redis6,被测redis5</th>\n<th>单台</th>\n<th>集群</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>redis-benchmark -h 172.20.59.57 -p 6379 –threads 500 -t get -d 500 -c 500 -n 10000000</td>\n<td>137794.19 requests per second</td>\n<td></td>\n</tr>\n<tr>\n<td>redis-benchmark -h 172.20.59.57 -p 6379 –threads 500 -t set -d 500 -c 500 -n 10000000</td>\n<td>132383.70 requests per second</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>测试端redis5,被测redis5</th>\n<th>单台</th>\n<th>集群</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>redis-benchmark -h 172.20.59.57 -p 6379  -t get -d 500 -c 500 -n 10000000</td>\n<td>84317.03 requests per second</td>\n<td></td>\n</tr>\n<tr>\n<td>redis-benchmark -h 172.20.59.57 -p 6379  -t set -d 500 -c 500 -n 10000000</td>\n<td>98796.66 requests per second</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>测试端redis6,被测redis5 物理机</th>\n<th>单台</th>\n<th>集群</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>redis-benchmark -h 172.20.1.30 -p 6379  -t get -d 500 -c 500 -n 10000000</td>\n<td>106834.19 requests per second</td>\n<td></td>\n</tr>\n<tr>\n<td>redis-benchmark -h 172.20.1.30 -p 6379  -t set -d 500 -c 500 -n 10000000</td>\n<td>113291.34 requests per second</td>\n<td></td>\n</tr>\n<tr>\n<td>redis-benchmark -h 172.20.1.30 -p 6379 –threads 500 -t set -d 500 -c 500 -n 10000000</td>\n<td>163041.70 requests per second</td>\n<td></td>\n</tr>\n<tr>\n<td>redis-benchmark -h 172.20.1.30 -p 6379 –threads 500 -t get -d 500 -c 500 -n 10000000</td>\n<td>169396.78 requests per second</td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>set(requests per second)</th>\n<th>get(requests per second)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>物理机（redis5）+测试机（redis6+threads 500）</td>\n<td>163041.70</td>\n<td>169396.78</td>\n</tr>\n<tr>\n<td>物理机（redis5）+测试机（redis6+threads）</td>\n<td>113291.34</td>\n<td>106834.19</td>\n</tr>\n<tr>\n<td>云主机8c8g（redis5）+测试机（redis6+threads 500）</td>\n<td>132383.70</td>\n<td>137794.19</td>\n</tr>\n<tr>\n<td>云主机8c8g（redis5）+测试机（redis6）</td>\n<td>109325.46</td>\n<td>110688.03</td>\n</tr>\n<tr>\n<td>云主机8c8g（redis5）+测试机（redis5）</td>\n<td>98796.66</td>\n<td>84317.03</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">redis-cli --cluster create 172.20.59.83:6379 172.20.59.119:6379 172.20.59.54:6379 172.20.59.59:6379 172.20.59.99:6379 172.20.59.52:6379 --cluster-replicas 1 -a 123456</span><br></pre></td></tr></table></figure>\n\n","categories":[{"name":"编程技术","path":"api/categories/编程技术.json"}],"tags":[{"name":"应用","path":"api/tags/应用.json"}]}