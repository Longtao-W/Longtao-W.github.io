{"title":"HAProxy负载均衡器","slug":"tools/loadbanlance","date":"2020-03-11T11:30:41.000Z","updated":"2024-06-30T10:35:56.312Z","comments":true,"path":"api/articles/tools/loadbanlance.json","excerpt":null,"covers":null,"content":"<h2 id=\"LB简介\"><a href=\"#LB简介\" class=\"headerlink\" title=\"LB简介\"></a>LB简介</h2><h2 id=\"HAProxy是什么\"><a href=\"#HAProxy是什么\" class=\"headerlink\" title=\"HAProxy是什么\"></a>HAProxy是什么</h2><p>HAProxy是一个免费的负载均衡软件，可以运行于大部分主流的Linux操作系统上。</p>\n<p>HAProxy提供了L4(TCP)和L7(HTTP)两种负载均衡能力，具备丰富的功能。HAProxy的社区非常活跃，版本更新快速（最新稳定版1.7.2于2017/01/13推出）。最关键的是，HAProxy具备媲美商用负载均衡器的性能和稳定性。</p>\n<p>因为HAProxy的上述优点，它当前不仅仅是免费负载均衡软件的首选，更几乎成为了唯一选择。（还有gobetween）</p>\n<h3 id=\"HAProxy的核心功能\"><a href=\"#HAProxy的核心功能\" class=\"headerlink\" title=\"HAProxy的核心功能\"></a>HAProxy的核心功能</h3><ul>\n<li>负载均衡：L4和L7两种模式，支持RR/静态RR/LC/IP Hash/URI Hash/URL_PARAM Hash/HTTP_HEADER Hash等丰富的负载均衡算法</li>\n<li>健康检查：支持TCP和HTTP两种健康检查模式</li>\n<li>会话保持：对于未实现会话共享的应用集群，可通过Insert Cookie/Rewrite Cookie/Prefix Cookie，以及上述的多种Hash方式实现会话保持</li>\n<li>SSL：HAProxy可以解析HTTPS协议，并能够将请求解密为HTTP后向后端传输</li>\n<li>HTTP请求重写与重定向</li>\n<li>监控与统计：HAProxy提供了基于Web的统计信息页面，展现健康状态和流量数据。基于此功能，使用者可以开发监控程序来监控HAProxy的状态</li>\n</ul>\n<p><strong>稳定性</strong></p>\n<p>作为建议以单进程模式运行的程序，HAProxy对稳定性的要求是十分严苛的。按照作者的说法，HAProxy在13年间从未出现过一个会导致其崩溃的BUG，HAProxy一旦成功启动，除非操作系统或硬件故障，否则就不会崩溃（我觉得可能多少还是有夸大的成分）。</p>\n<p>在上文中提到过，HAProxy的大部分工作都是在操作系统内核完成的，所以HAProxy的稳定性主要依赖于操作系统，作者建议使用2.6或3.x的Linux内核，对sysctls参数进行精细的优化，并且确保主机有足够的内存。这样HAProxy就能够持续满负载稳定运行数年之久。</p>\n<p>个人的建议：</p>\n<ul>\n<li>使用3.x内核的Linux操作系统运行HAProxy</li>\n<li>运行HAProxy的主机上不要部署其他的应用，确保HAProxy独占资源，同时避免其他应用引发操作系统或主机的故障</li>\n<li>至少为HAProxy配备一台备机，以应对主机硬件故障、断电等突发情况（搭建双活HAProxy的方法在后文中有描述）</li>\n<li>sysctl的建议配置（并不是万用配置，仍然需要针对具体情况进行更精细的调整，但可以作为首次使用HAProxy的初始配置使用）：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net.ipv4.tcp_tw_reuse = 1</span><br><span class=\"line\">net.ipv4.ip_local_port_range = 1024 65023</span><br><span class=\"line\">net.ipv4.tcp_max_syn_backlog = 10240</span><br><span class=\"line\">net.ipv4.tcp_max_tw_buckets = 400000</span><br><span class=\"line\">net.ipv4.tcp_max_orphans = 60000</span><br><span class=\"line\">net.ipv4.tcp_synack_retries = 3</span><br><span class=\"line\">net.core.somaxconn = 10000</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"LB简介\"><a href=\"#LB简介\" class=\"headerlink\" title=\"LB简介\"></a>LB简介</h2><h2 id=\"HAProxy是什么\"><a href=\"#HAProxy是什么\" class=\"headerlink\" title=\"HAProxy是什么\"></a>HAProxy是什么</h2><p>HAProxy是一个免费的负载均衡软件，可以运行于大部分主流的Linux操作系统上。</p>\n<p>HAProxy提供了L4(TCP)和L7(HTTP)两种负载均衡能力，具备丰富的功能。HAProxy的社区非常活跃，版本更新快速（最新稳定版1.7.2于2017/01/13推出）。最关键的是，HAProxy具备媲美商用负载均衡器的性能和稳定性。</p>\n<p>因为HAProxy的上述优点，它当前不仅仅是免费负载均衡软件的首选，更几乎成为了唯一选择。（还有gobetween）</p>\n<h3 id=\"HAProxy的核心功能\"><a href=\"#HAProxy的核心功能\" class=\"headerlink\" title=\"HAProxy的核心功能\"></a>HAProxy的核心功能</h3><ul>\n<li>负载均衡：L4和L7两种模式，支持RR/静态RR/LC/IP Hash/URI Hash/URL_PARAM Hash/HTTP_HEADER Hash等丰富的负载均衡算法</li>\n<li>健康检查：支持TCP和HTTP两种健康检查模式</li>\n<li>会话保持：对于未实现会话共享的应用集群，可通过Insert Cookie/Rewrite Cookie/Prefix Cookie，以及上述的多种Hash方式实现会话保持</li>\n<li>SSL：HAProxy可以解析HTTPS协议，并能够将请求解密为HTTP后向后端传输</li>\n<li>HTTP请求重写与重定向</li>\n<li>监控与统计：HAProxy提供了基于Web的统计信息页面，展现健康状态和流量数据。基于此功能，使用者可以开发监控程序来监控HAProxy的状态</li>\n</ul>\n<p><strong>稳定性</strong></p>\n<p>作为建议以单进程模式运行的程序，HAProxy对稳定性的要求是十分严苛的。按照作者的说法，HAProxy在13年间从未出现过一个会导致其崩溃的BUG，HAProxy一旦成功启动，除非操作系统或硬件故障，否则就不会崩溃（我觉得可能多少还是有夸大的成分）。</p>\n<p>在上文中提到过，HAProxy的大部分工作都是在操作系统内核完成的，所以HAProxy的稳定性主要依赖于操作系统，作者建议使用2.6或3.x的Linux内核，对sysctls参数进行精细的优化，并且确保主机有足够的内存。这样HAProxy就能够持续满负载稳定运行数年之久。</p>\n<p>个人的建议：</p>\n<ul>\n<li>使用3.x内核的Linux操作系统运行HAProxy</li>\n<li>运行HAProxy的主机上不要部署其他的应用，确保HAProxy独占资源，同时避免其他应用引发操作系统或主机的故障</li>\n<li>至少为HAProxy配备一台备机，以应对主机硬件故障、断电等突发情况（搭建双活HAProxy的方法在后文中有描述）</li>\n<li>sysctl的建议配置（并不是万用配置，仍然需要针对具体情况进行更精细的调整，但可以作为首次使用HAProxy的初始配置使用）：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net.ipv4.tcp_tw_reuse = 1</span><br><span class=\"line\">net.ipv4.ip_local_port_range = 1024 65023</span><br><span class=\"line\">net.ipv4.tcp_max_syn_backlog = 10240</span><br><span class=\"line\">net.ipv4.tcp_max_tw_buckets = 400000</span><br><span class=\"line\">net.ipv4.tcp_max_orphans = 60000</span><br><span class=\"line\">net.ipv4.tcp_synack_retries = 3</span><br><span class=\"line\">net.core.somaxconn = 10000</span><br></pre></td></tr></table></figure>","categories":[{"name":"编程技术","path":"api/categories/编程技术.json"}],"tags":[{"name":"工具","path":"api/tags/工具.json"}]}